!function(){"use strict";!function(t,e,r,s){function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var i=n(t),a=n(e),o=n(r),l=n(s);globalThis.METRO5_COMPONENTS_REGISTRY={};const u={register(t,e){METRO5_COMPONENTS_REGISTRY[t]||(METRO5_COMPONENTS_REGISTRY[t]=e)},unregister(t,e){METRO5_COMPONENTS_REGISTRY[t]&&METRO5_COMPONENTS_REGISTRY[t]===e&&delete METRO5_COMPONENTS_REGISTRY[t]},getClass:t=>METRO5_COMPONENTS_REGISTRY[t],getRegistry:()=>METRO5_COMPONENTS_REGISTRY,dump(){((...t)=>{t.length?1===t.length?console.log(JSON.stringify(t[0],null,2)):console.log(...t):console.log("Hi!")})(METRO5_COMPONENTS_REGISTRY)}},h=t=>t&&"object"==typeof t&&!Array.isArray(t),c=(t,...e)=>{if(!e.length)return t;const r=e.shift();if(h(t)&&h(r))for(const e in r)h(r[e])?(t[e]||Object.assign(t,{[e]:{}}),c(t[e],r[e])):Object.assign(t,{[e]:r[e]});return c(t,...e)},d="YYYY-MM-DDTHH:mm:ss.sss",p="Invalid date",f=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|m{1,2}|s{1,3}/g,g=/(%[a-z])/gi,m={months:"January February March April May June July August September October November December".split(" "),monthsShort:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),weekdays:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),weekdaysShort:"Sun Mon Tue Wed Thu Fri Sat".split(" "),weekdaysMin:"Su Mo Tu We Th Fr Sa".split(" "),weekStart:0},y={ms:"Milliseconds",s:"Seconds",m:"Minutes",h:"Hours",D:"Date",d:"Day",M:"Month",Y:"FullYear",y:"Year",t:"Time"},b="ms",v="second",w="minute",x="hour",_="day",k="week",S="month",E="year",A=(t="")=>{throw new Error("This argument is required!")},O=(t,e=!0)=>{try{return e?void 0!==t:null!=t}catch(t){return!1}},T=t=>null==t,j=function(t,e,r){let s=""+t;return r&&s.length>=r?s:Array(r+1-s.length).join(e)+s};class C{constructor(){const t=[].slice.call(arguments);if(this.value=new(Function.prototype.bind.apply(Date,[this].concat(t))),this.locale="en",this.weekStart=C.locales.en.weekStart,this.utcMode=!1,this.mutable=!0,e=this.value.getTime(),isNaN(e))throw new Error(p);var e}static locales={en:m};static isDatetime(t){return t instanceof C}static now(t=!1){return M()[t?"val":"time"]()}static parse(t=A()){return M(Date.parse(t))}static setLocale(t=A(),e=A()){C.locales[t]=e}static getLocale(t="en"){return O(C.locales[t],!1)?C.locales[t]:C.locales.en}static align(t,e){let r,s,n=M(t);switch(e){case v:r=n.ms(0);break;case w:r=C.align(n,v)[v](0);break;case x:r=C.align(n,w)[w](0);break;case _:r=C.align(n,x)[x](0);break;case S:r=C.align(n,_)[_](1);break;case E:r=C.align(n,S)[S](0);break;case k:s=n.weekDay(),r=C.align(t,_).addDay(-s);break;default:r=n}return r}static alignEnd(t,e){let r,s,n=M(t);switch(e){case b:r=n.ms(999);break;case v:r=C.alignEnd(n,b);break;case w:r=C.alignEnd(n,v)[v](59);break;case x:r=C.alignEnd(n,w)[w](59);break;case _:r=C.alignEnd(n,x)[x](23);break;case S:r=C.alignEnd(n,_)[_](1).add(1,S).add(-1,_);break;case E:r=C.alignEnd(n,_)[S](11)[_](31);break;case k:s=n.weekDay(),r=C.alignEnd(n,"day").addDay(6-s);break;default:r=t}return r}immutable(t){return this.mutable=!(T(t)||t),this}utc(){return this.utcMode=!0,this}local(){return this.utcMode=!1,this}useLocale(t){return this.locale=O(C.locales[t],!1)?t:"en",this.weekStart=C.getLocale(this.locale).weekStart,this}clone(){const t=M(this.value);return t.locale=this.locale,t.weekStart=this.weekStart,t.mutable=this.mutable,t}align(t){return this.mutable?(this.value=C.align(this,t).val(),this):this.clone().immutable(!1).align(t).immutable(!this.mutable)}alignEnd(t){return this.mutable?(this.value=C.alignEnd(this,t).val(),this):this.clone().immutable(!1).alignEnd(t).immutable(!this.mutable)}val(t){return t instanceof Date?this.mutable?(this.value=t,this):M(t):this.value}year2(){return+(""+this.year()).substr(-2)}_set(t,e){const r="set"+(this.utcMode&&"t"!==t?"UTC":"")+y[t];if(this.mutable)return this.value[r](e),this;const s=this.clone();return s.value[r](e),s}_get(t){const e="get"+(this.utcMode&&"t"!==t?"UTC":"")+y[t];return this.value[e]()}_work(t,e){return arguments.length&&null!=e?this._set(t,e):this._get(t)}ms(t){return this._work("ms",t)}second(t){return this._work("s",t)}minute(t){return this._work("m",t)}hour(t){return this._work("h",t)}day(t){return this._work("D",t)}month(t){return this._work("M",t)}year(t){return this._work("Y",t)}time(t){return this._work("t",t)}weekDay(t){if(!arguments.length||T(t))return this.utcMode?this.value.getUTCDay():this.value.getDay();const e=t-this.weekDay();return this.day(this.day()+e),this}get(t){return"function"!=typeof this[t]?this:this[t]()}set(t,e){return"function"!=typeof this[t]?this:this[t](e)}add(t,e){switch(e){case x:return this.time(this.time()+60*t*60*1e3);case w:return this.time(this.time()+60*t*1e3);case v:return this.time(this.time()+1e3*t);case b:return this.time(this.time()+t);case _:return this.day(this.day()+t);case k:return this.day(this.day()+7*t);case S:return this.month(this.month()+t);case E:return this.year(this.year()+t)}}addHour(t){return this.add(t,x)}addMinute(t){return this.add(t,w)}addSecond(t){return this.add(t,v)}addMs(t){return this.add(t,b)}addDay(t){return this.add(t,_)}addWeek(t){return this.add(t,k)}addMonth(t){return this.add(t,S)}addYear(t){return this.add(t,E)}format(t,e){const r=t||d,s=C.getLocale(e||this.locale),n=this.year(),i=this.year2(),a=this.month(),o=this.day(),l=this.weekDay(),u=this.hour(),h=this.minute(),c=this.second(),p=this.ms(),g={YY:i,YYYY:n,M:a+1,MM:j(a+1,0,2),MMM:s.monthsShort[a],MMMM:s.months[a],D:o,DD:j(o,0,2),d:l,dd:s.weekdaysMin[l],ddd:s.weekdaysShort[l],dddd:s.weekdays[l],H:u,HH:j(u,0,2),m:h,mm:j(h,0,2),s:c,ss:j(c,0,2),sss:j(p,0,3)};return r.replace(f,((t,e)=>e||g[t]))}valueOf(){return this.value.valueOf()}toString(){return this.value.toString()}}const M=(...t)=>t&&t[0]instanceof C?t[0]:new C(...t),N=C.prototype.format,D={buddhist(){return this.year()+543},format(t,e){t=t||d;const r={BB:(this.buddhist()+"").slice(-2),BBBB:this.buddhist()};let s=t.replace(/(\[[^\]]+])|B{4}|B{2}/g,((t,e)=>e||r[t]));return N.bind(this)(s,e)}};Object.assign(C.prototype,D);Object.assign(C.prototype,{calendar(t){return((t,e)=>{let r,s=M(t),n=0===e||e?e:t.weekStart,i=n?s.isoWeekDay():s.weekDay(),a=C.getLocale(s.locale),o=M();const l={month:a.months[s.month()],days:[],weekstart:e?1:0,weekdays:((t,e)=>{if(0===e)return t;let r=t[0];return t.slice(1).concat([r])})(a.weekdaysMin,n),today:o.format("YYYY-MM-DD"),weekends:[],week:[]};for(s.addDay(n?1-i:-i),r=0;r<42;r++)l.days.push(s.format("YYYY-MM-DD")),s.add(1,"day");for(l.weekends=l.days.filter((function(t,e){return 0===n?[0,6,7,13,14,20,21,27,28,34,35,41].includes(e):[5,6,12,13,19,20,26,27,33,34,40,41].includes(e)})),s=o.clone(),i=n?s.isoWeekDay():s.weekDay(),s.addDay(n?1-i:-i),r=0;r<7;r++)l.week.push(s.format("YYYY-MM-DD")),s.add(1,"day");return l})(this,t)}});const L=C.prototype.format;Object.assign(C.prototype,{century(){return Math.ceil(this.year()/100)},format(t,e){t=t||d;const r={C:this.century()};let s=t.replace(/(\[[^\]]+])|C/g,((t,e)=>e||r[t]));return L.bind(this)(s,e)}}),Object.assign(C.prototype,{same(t){return this.time()===M(t).time()},compare(t,e,r="="){const s=M(t),n=M(this.value);let i,a;switch(!1===["<",">",">=","<=","=","!="].includes(r=r||"=")&&(r="="),e=(e||"ms").toLowerCase(),i=n.align(e).time(),a=s.align(e).time(),r){case"<":return i<a;case">":return i>a;case"<=":return i<=a;case">=":return i>=a;case"=":return i===a;case"!=":return i!==a}},between(t,e){return this.younger(t)&&this.older(e)},older(t,e){return this.compare(t,e,"<")},olderOrEqual(t,e){return this.compare(t,e,"<=")},younger(t,e){return this.compare(t,e,">")},youngerOrEqual(t,e){return this.compare(t,e,">=")},equal(t,e){return this.compare(t,e,"=")},notEqual(t,e){return this.compare(t,e,"!=")},diff(t){const e=M(t),r=Math.abs(this.time()-e.time()),s=Math.abs(this.month()-e.month()+12*(this.year()-e.year()));return{ms:r,second:Math.ceil(r/1e3),minute:Math.ceil(r/6e4),hour:Math.ceil(r/36e5),day:Math.ceil(r/864e5),month:s,year:Math.floor(s/12)}},distance(t,e){return this.diff(t)[e]}}),Object.assign(C.prototype,{isLeapYear(){const t=this.year();return t%4==0&&t%100!=0||t%400==0}}),Object.assign(C.prototype,{dayOfYear(){const t=this.month(),e=this.day();return[0,31,59,90,120,151,181,212,243,273,304,334][t]+e+(t>1&&this.isLeapYear()?1:0)}}),Object.assign(C.prototype,{daysInMonth(){return M(this.value).add(1,"month").day(1).add(-1,"day").day()},daysInYear(){return this.isLeapYear()?366:365},daysInYearMap(){const t=[],e=M(this.value);e.month(0).day(1);for(let r=0;r<12;r++)e.add(1,"month").add(-1,"day"),t.push(e.day()),e.day(1).add(1,"month");return t},daysInYearObj(t,e){const r=this.daysInYearMap(),s={},n=C.getLocale(t||this.locale);return r.forEach(((t,r)=>s[n[e?"monthsShort":"months"][r]]=t)),s}}),Object.assign(C.prototype,{decade(){return 10*Math.floor(this.year()/10)},decadeStart(){const t=this.decade();return(this.mutable?this:this.clone()).year(t).month(0).day(1)},decadeEnd(){const t=this.decade()+9;return(this.mutable?this:this.clone()).year(t).month(11).day(31)},decadeOfMonth(){const t=this.clone().add(1,"month").day(1).add(-1,"day").day()/3,e=this.day();return e<=t?1:e<=2*t?2:3}}),Object.assign(C,{from(t,e,r){let s,n,i,a,o,l,u,h,c,d,f,g,m,y,b,v,w,x,_;const k=function(t,e){return t.map((function(t){return t.toLowerCase()})).indexOf(e.toLowerCase())},S=function(t){const e={month:["M","mm","%m"],day:["D","dd","%d"],year:["YY","YYYY","yy","yyyy","%y"],hour:["h","hh","%h"],minute:["m","mi","i","ii","%i"],second:["s","ss","%s"],ms:["sss"]};let r,s,n=-1;for(let a=0;a<e[t].length;a++)if(r=e[t][a],s=i.indexOf(r),-1!==s){n=s;break}return n};if(!e)return M();if(s=t.replace(/[\/,.:\s]/g,"-"),n=e.toLowerCase().replace(/[^a-zA-Z0-9%]/g,"-"),i=n.split("-"),a=s.split("-"),""===s.replace(/-/g,"").trim())throw new Error(p);return o=S("month"),l=S("day"),u=S("year"),h=S("hour"),c=S("minute"),d=S("second"),f=S("ms"),o>-1&&a[o]?isNaN(parseInt(a[o]))?(a[o]=function(t){let e=-1;const s=C.getLocale(r||"en");return T(t)?-1:(e=k(s.months,t),-1===e&&void 0!==s.monthsParental&&(e=k(s.monthsParental,t)),-1===e&&(t=t.substr(0,3),e=k(s.monthsShort,t)),-1===e?-1:e+1)}(a[o]),-1===a[o]&&(o=-1)):(_=parseInt(a[o]),(_<1||_>12)&&(o=-1)):o=-1,g=u>-1&&a[u]?a[u]:0,m=o>-1&&a[o]?a[o]:1,y=l>-1&&a[l]?a[l]:1,b=h>-1&&a[h]?a[h]:0,v=c>-1&&a[c]?a[c]:0,w=d>-1&&a[d]?a[d]:0,x=f>-1&&a[f]?a[f]:0,M(g,m-1,y,b,v,w,x)}});const I=C.prototype.format;Object.assign(C.prototype,{ampm(t){let e=this.hour()<12?"AM":"PM";return t?e.toLowerCase():e},hour12:function(t,e){let r=t;return 0===arguments.length?this.hour()%12:("pm"===(e=e||"am").toLowerCase()&&(r+=12),this.hour(r))},format:function(t,e){let r,s,n=this.hour12();return t=t||d,r={a:"["+this.ampm(!0)+"]",A:"["+this.ampm(!1)+"]",h:n,hh:j(n,0,2)},s=t.replace(/(\[[^\]]+])|a|A|h{1,2}/g,((t,e)=>e||r[t])),I.bind(this)(s,e)}});const F=C.prototype.format,R=C.align,P=C.alignEnd;Object.assign(C,{align(t,e){let r,s,n=M(t);if("isoWeek"===e)s=n.isoWeekDay(),r=R(n,"day").addDay(1-s);else r=R.apply(void 0,[n,e]);return r},alignEnd(t,e){let r,s,n=M(t);if("isoWeek"===e)s=n.isoWeekDay(),r=P(n,"day").addDay(7-s);else r=P.apply(void 0,[n,e]);return r}}),Object.assign(C.prototype,{isoWeekDay(t){let e=(this.weekDay()+6)%7+1;return!arguments.length||T(t)?e:this.addDay(t-e)},format(t,e){t=t||d;const r={I:this.isoWeekDay()};let s=t.replace(/(\[[^\]]+])|I{1,2}/g,((t,e)=>e||r[t]));return F.bind(this)(s,e)}}),Object.assign(C,{max(){return[].slice.call(arguments).map((t=>M(t))).sort(((t,e)=>e.time()-t.time()))[0]}}),Object.assign(C.prototype,{max(){return C.max.apply(this,[this].concat([].slice.call(arguments)))}}),Object.assign(C,{min(){return[].slice.call(arguments).map((t=>M(t))).sort(((t,e)=>t.time()-e.time()))[0]}}),Object.assign(C.prototype,{min(){return C.min.apply(this,[this].concat([].slice.call(arguments)))}});const H=C.align,B=C.alignEnd,Y=C.prototype.add;Object.assign(C,{align(t,e){let r,s=M(t);if("quarter"===e)r=C.align(s,"day").day(1).month(3*s.quarter()-3);else r=H.apply(this,[s,e]);return r},alignEnd(t,e){let r,s=M(t);if("quarter"===e)r=C.align(s,"quarter").add(3,"month").add(-1,"ms");else r=B.apply(this,[s,e]);return r}}),Object.assign(C.prototype,{quarter(){const t=this.month();return t<=2?1:t<=5?2:t<=8?3:4},add(t,e){return"quarter"===e?this.month(this.month()+3*t):Y.bind(this)(t,e)},addQuarter(t){return this.add(t,"quarter")}}),Object.assign(C,{sort(t,e){let r,s;const n={};switch("string"==typeof e||"object"!=typeof e||T(e)?(n.format=d,n.dir=e&&"DESC"===e.toUpperCase()?"DESC":"ASC",n.returnAs="datetime"):(n.format=e.format||d,n.dir=(e.dir||"ASC").toUpperCase(),n.returnAs=e.format?"string":e.returnAs||"datetime"),s=t.map((t=>M(t))).sort(((t,e)=>t.valueOf()-e.valueOf())),"DESC"===n.dir&&s.reverse(),n.returnAs){case"string":r=s.map((t=>t.format(n.format)));break;case"date":r=s.map((t=>t.val()));break;default:r=s}return r}});const q=C.prototype.format;Object.assign(C.prototype,{utcOffset(){return this.value.getTimezoneOffset()},timezone(){return this.toTimeString().replace(/.+GMT([+-])(\d{2})(\d{2}).+/,"$1$2:$3")},timezoneName(){return this.toTimeString().replace(/.+\((.+?)\)$/,"$1")},format(t,e){t=t||d;const r={Z:this.utcMode?"Z":this.timezone(),ZZ:this.timezone().replace(":",""),ZZZ:"[GMT]"+this.timezone(),z:this.timezoneName()};let s=t.replace(/(\[[^\]]+])|Z{1,3}|z/g,((t,e)=>e||r[t]));return q.bind(this)(s,e)}});const W=C.prototype.format;Object.assign(C.prototype,{weekNumber(t){let e,r,s,n,i,a;return t=+t||0,s=M(this.year(),0,1),n=s.weekDay()-t,n=n>=0?n:n+7,i=Math.floor((this.time()-s.time()-6e4*(this.utcOffset()-s.utcOffset()))/864e5)+1,n<4?(a=Math.floor((i+n-1)/7)+1,a>52&&(e=M(this.year()+1,0,1),r=e.weekDay()-t,r=r>=0?r:r+7,a=r<4?1:53)):a=Math.floor((i+n-1)/7),a},isoWeekNumber(){return this.weekNumber(1)},weeksInYear(t){return M(this.value).month(11).day(31).weekNumber(t)},format:function(t,e){let r,s,n=this.weekNumber(),i=this.isoWeekNumber();return t=t||d,r={W:n,WW:j(n,0,2),WWW:i,WWWW:j(i,0,2)},s=t.replace(/(\[[^\]]+])|W{1,4}/g,((t,e)=>e||r[t])),W.bind(this)(s,e)}}),Object.assign(C.prototype,{strftime(t,e){const r=t||"%Y-%m-%dT%H:%M:%S.%Q%t",s=C.getLocale(e||this.locale),n=this.year(),i=this.year2(),a=this.month(),o=this.day(),l=this.weekDay(),u=this.hour(),h=this.hour12(),c=this.minute(),d=this.second(),p=this.ms(),f=this.time(),m=j(o,0,2),y=j(a+1,0,2),b=j(u,0,2),v=j(h,0,2),w=j(c,0,2),x=j(d,0,2),_=j(p,0,3),k=this,S=function(){return M(k.value).day(k.day()-(k.weekDay()+6)%7+3)},E={"%a":s.weekdaysShort[l],"%A":s.weekdays[l],"%b":s.monthsShort[a],"%h":s.monthsShort[a],"%B":s.months[a],"%c":this.toString().substring(0,this.toString().indexOf(" (")),"%C":this.century(),"%d":m,"%D":[m,y,n].join("/"),"%e":o,"%F":[n,y,m].join("-"),"%G":S().year(),"%g":(""+S().year()).slice(2),"%H":b,"%I":v,"%j":j(this.dayOfYear(),0,3),"%k":b,"%l":v,"%m":y,"%n":a+1,"%M":w,"%p":this.ampm(),"%P":this.ampm(!0),"%s":Math.round(f/1e3),"%S":x,"%u":this.isoWeekDay(),"%V":this.isoWeekNumber(),"%w":l,"%x":this.toLocaleDateString(),"%X":this.toLocaleTimeString(),"%y":i,"%Y":n,"%z":this.timezone().replace(":",""),"%Z":this.timezoneName(),"%r":[v,w,x].join(":")+" "+this.ampm(),"%R":[b,w].join(":"),"%T":[b,w,x].join(":"),"%Q":_,"%q":p,"%t":this.timezone()};return r.replace(g,(t=>0===E[t]||E[t]?E[t]:t))}}),Object.assign(C,{isToday(t){const e=M(t).align("day"),r=M().align("day");return e.time()===r.time()}}),Object.assign(C.prototype,{isToday(){return C.isToday(this)},today(){const t=M();return this.mutable?this.val(t.val()):t}}),Object.assign(C,{isTomorrow(t){const e=M(t).align("day"),r=M().align("day").add(1,"day");return e.time()===r.time()}}),Object.assign(C.prototype,{isTomorrow(){return C.isTomorrow(this)},tomorrow(){return this.mutable?this.add(1,"day"):this.clone().immutable(!1).add(1,"day").immutable(!this.mutable)}}),Object.assign(C.prototype,{toDateString(){return this.value.toDateString()},toISOString(){return this.value.toISOString()},toJSON(){return this.value.toJSON()},toGMTString(){return this.value.toGMTString()},toLocaleDateString(){return this.value.toLocaleDateString()},toLocaleString(){return this.value.toLocaleString()},toLocaleTimeString(){return this.value.toLocaleTimeString()},toTimeString(){return this.value.toTimeString()},toUTCString(){return this.value.toUTCString()},toDate(){return new Date(this.value)}}),Object.assign(C,{timestamp:()=>(new Date).getTime()/1e3}),Object.assign(C.prototype,{unix(t){let e;return!arguments.length||T(t)?Math.floor(this.valueOf()/1e3):(e=1e3*t,this.mutable?this.time(e):M(this.value).time(e))},timestamp(){return this.unix()}}),Object.assign(C,{isYesterday(t){const e=M(t).align("day"),r=M().align("day").add(-1,"day");return e.time()===r.time()}}),Object.assign(C.prototype,{isYesterday(){return C.isYesterday(this)},yesterday(){return this.mutable?this.add(-1,"day"):this.clone().immutable(!1).add(-1,"day").immutable(!this.mutable)}});const z=t=>{let e,r=Math.floor(t/1e3),s=Math.floor(r/60),n=Math.floor(s/60),i=Math.floor(n/24),a=Math.floor(i/30),o=Math.floor(a/12);return o>=1&&(e=`${o} year`),a>=1&&o<1&&(e=`${a} mon`),i>=1&&i<=30&&(e=`${i} days`),n&&n<24&&(e=`${n} hour`),s&&s>=40&&s<60&&(e="less a hour"),s&&s<40&&(e=`${s} min`),r&&r>=30&&r<60&&(e=`${r} sec`),r<30&&(e="few sec"),e};Object.assign(C,{timeLapse(t){let e=M(t),r=M();return z(r-e)}}),Object.assign(C.prototype,{timeLapse(){let t=M()-+this;return z(t)}});const G={parseTime(t){if(!isNaN(t))return Math.abs(+t);return t.match(/([0-9]+d)|([0-9]{1,2}h)|([0-9]{1,2}m)|([0-9]{1,2}s)/gm).reduce(((t,e)=>{let r;return e.includes("d")?r=864e5*parseInt(e):e.includes("h")?r=36e5*parseInt(e):e.includes("m")?r=6e4*parseInt(e):e.includes("s")&&(r=1e3*parseInt(e)),t+r}),0)}};Object.assign(C,G);const U="\\s\\uFEFF\\xA0",Q="\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F",Z="a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F",J="\\x41-\\x5a\\xc0-\\xd6\\xd8-\\xde\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc\\u01c4\\u01c5\\u01c7\\u01c8\\u01ca\\u01cb\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f2\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e",V=new RegExp("^["+U+"]+"),X=new RegExp("["+U+"]+$"),K=new RegExp("^\\d+$"),tt=/[<>&"'`]/g,et=/(<([^>]+)>)/gi,rt=new RegExp("(?:["+J+"]["+Q+"]*)?(?:["+Z+"]["+Q+"]*)+|(?:["+J+"]["+Q+"]*)+(?!["+Z+"])|["+"\\d]+|[\\u2700-\\u27BF]|[^\\x00-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7b-\\xBF\\xD7\\xF7\\u2000-\\u206F"+U+"]+","g"),st=/[A-Z\xC0-\xD6\xD8-\xDE]?[a-z\xDF-\xF6\xF8-\xFF]+|[A-Z\xC0-\xD6\xD8-\xDE]+(?![a-z\xDF-\xF6\xF8-\xFF])|\d+/g,nt=new RegExp("^(?:["+Z+J+"]["+Q+"]*)+$"),it=new RegExp("^((?:["+Z+J+"]["+Q+"]*)|["+"\\d])+$"),at=/^[\x01-\xFF]*$/,ot=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return t?"string"==typeof t?t:Array.isArray(t)?t.join(""):JSON.stringify(t):e},lt=(t,e)=>null==t?e:t,ut=(t,e,r)=>{let s;return s=e?e instanceof RegExp?e:new RegExp(e,lt(r,"")):at.test(t)?st:rt,lt(ot(t).match(s),[])},ht=function(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=ot(t),s=r.substr(1);return r.substr(0,1).toUpperCase()+(e?s.toLowerCase():s)},ct=t=>ot(t).toLowerCase(),dt=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return ot(t).split("").filter((t=>!e.includes(t)))},pt=(t,e)=>{const r=e.toLowerCase(),s=e.toUpperCase();return t+(e===r?s:r)},ft=t=>ot(t).toUpperCase(),gt=function(){let t=[...arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]];for(let e=0;e<t.length;++e)for(let r=e+1;r<t.length;++r)t[e]===t[r]&&t.splice(r--,1);return t},mt={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#x27;","`":"&#x60;"};function yt(t){return mt[t]}const bt={"<":/(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,">":/(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,"&":/(&amp;)|(&#x0*26;)|(&#0*38;)/gi,'"':/(&quot;)|(&#x0*22;)|(&#0*34;)/gi,"'":/(&#x0*27;)|(&#0*39;)/gi,"`":/(&#x0*60;)|(&#0*96;)/gi},vt=Object.keys(bt);function wt(t,e){return t.replace(bt[e],e)}const xt=(t,e,r)=>ot(t).substr(e,r),_t=9007199254740991,kt=function(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:_t;return t<e?e:t>r?r:t},St=t=>t===1/0?_t:t===-1/0?-_t:~~t,Et=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=ot(t),s=e?kt(St(e),0,_t):r.length;const n=r;if(0===e)return"";for(let t=0;t<s-1;t++)r+=n;return r},At=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const r=t.length;return Et(t,e-r+1).substr(0,e)},Ot=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=ot(t),i=r?kt(St(r),0,_t):n.length,a=e.length,o=i-n.length;if(o<=0||0===a)return n;let l=At(e,o);return s?l+n:n+l},Tt=Array.prototype.reduce,jt=Array.prototype.reduceRight,$t=(t,e)=>Ct(Mt(t,e),e),Ct=(t,e)=>{let r=ot(t);if(!e)return r.replace(V,"");if(""===e||""===r)return r;"string"!=typeof e&&(e="");let s=!0;return Tt.call(r,((t,r)=>s&&e.includes(r)?t:(s=!1,t+r)),"")},Mt=(t,e)=>{let r=ot(t);if(!e)return r.replace(X,"");if(""===e||""===r)return r;"string"!=typeof e&&(e="");let s=!0;return jt.call(r,((t,r)=>s&&e.includes(r)?t:(s=!1,r+t)),"")},Nt=t=>0===$t(t).length,Dt={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};const Lt=Object.create(null);const It=t=>function(t,e){let r,s,n,i,a,o,l,u=1,h=t.length,c="";for(let d=0;d<h;d++)if("string"==typeof t[d])c+=t[d];else if("object"==typeof t[d]){if(s=t[d],s.keys){r=e[u];for(let t=0;t<s.keys.length;t++){if(void 0===r)throw new Error(It('[sprintf] Cannot access property "%s" of undefined value "%s"',s.keys[t],s.keys[t-1]));r=r[s.keys[t]]}}else r=s.param_no?e[s.param_no]:e[u++];if(Dt.not_type.test(s.type)&&Dt.not_primitive.test(s.type)&&r instanceof Function&&(r=r()),Dt.numeric_arg.test(s.type)&&"number"!=typeof r&&isNaN(r))throw new TypeError(It("[sprintf] expecting number but found %T"));switch(Dt.number.test(s.type)&&(o=r>=0),s.type){case"b":r=parseInt(r,10).toString(2);break;case"c":r=String.fromCharCode(parseInt(r,10));break;case"d":case"i":r=parseInt(r,10);break;case"j":r=JSON.stringify(r,null,s.width?parseInt(s.width):0);break;case"e":r=s.precision?parseFloat(r).toExponential(s.precision):parseFloat(r).toExponential();break;case"f":r=s.precision?parseFloat(r).toFixed(s.precision):parseFloat(r);break;case"g":r=s.precision?String(Number(r.toPrecision(s.precision))):parseFloat(r);break;case"o":r=(parseInt(r,10)>>>0).toString(8);break;case"s":r=String(r),r=s.precision?r.substring(0,s.precision):r;break;case"t":r=String(!!r),r=s.precision?r.substring(0,s.precision):r;break;case"T":r=Object.prototype.toString.call(r).slice(8,-1).toLowerCase(),r=s.precision?r.substring(0,s.precision):r;break;case"u":r=parseInt(r,10)>>>0;break;case"v":r=r.valueOf(),r=s.precision?r.substring(0,s.precision):r;break;case"x":r=(parseInt(r,10)>>>0).toString(16);break;case"X":r=(parseInt(r,10)>>>0).toString(16).toUpperCase()}Dt.json.test(s.type)?c+=r:(!Dt.number.test(s.type)||o&&!s.sign?l="":(l=o?"+":"-",r=r.toString().replace(Dt.sign,"")),i=s.pad_char?"0"===s.pad_char?"0":s.pad_char.charAt(1):" ",a=s.width-(l+r).length,n=s.width&&a>0?i.repeat(a):"",c+=s.align?l+r+n:"0"===i?l+n+r:n+l+r)}return c}(function(t){if(Lt[t])return Lt[t];let e,r=t,s=[],n=0;for(;r;){if(null!==(e=Dt.text.exec(r)))s.push(e[0]);else if(null!==(e=Dt.modulo.exec(r)))s.push("%");else{if(null===(e=Dt.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(e[2]){n|=1;let t=[],r=e[2],s=[];if(null===(s=Dt.key.exec(r)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(t.push(s[1]);""!==(r=r.substring(s[0].length));)if(null!==(s=Dt.key_access.exec(r)))t.push(s[1]);else{if(null===(s=Dt.index_access.exec(r)))throw new SyntaxError("[sprintf] failed to parse named argument key");t.push(s[1])}e[2]=t}else n|=2;if(3===n)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");s.push({placeholder:e[0],param_no:e[1],keys:e[2],sign:e[3],pad_char:e[4],align:e[5],width:e[6],precision:e[7],type:e[8]})}r=r.substring(e[0].length)}return Lt[t]=s}(t),arguments);var Ft={camelCase:t=>ut(ot(t)).map(((t,e)=>0===e?t.toLowerCase():ht(t))).join(""),capitalize:ht,chars:dt,count:t=>ot(t).length,countChars:(t,e)=>dt(t,e).length,countUniqueChars:(t,e)=>gt(dt(t,e)).length,countSubstr:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=ot(t),s=ot(e);return""===r||""===s?0:r.split(s).length-1},countWords:(t,e,r)=>ut(t,e,r).length,countUniqueWords:(t,e,r)=>gt(ut(t,e,r)).length,dashedName:t=>ut(ot(t)).map((t=>t.toLowerCase())).join("-"),decapitalize:t=>{let e=ot(t);return e.substr(0,1).toLowerCase()+e.substr(1)},kebab:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return ut(ot(t)).map((t=>t.toLowerCase())).join(e)},lower:ct,reverse:(t,e)=>dt(ot(t),e).reverse().join(""),shuffle:t=>function(){let t,e,r=[...arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]],s=r.length;for(;0!==s;)e=Math.floor(Math.random()*s),s-=1,t=r[s],r[s]=r[e],r[e]=t;return r}(ot(t).split("")).join(""),snake:t=>ut(ot(t)).map((t=>t.toLowerCase())).join("_"),swap:t=>ot(t).split("").reduce(pt,""),title:function(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",s=ot(t);const n=at.test(s)?st:rt,i=Array.isArray(e)?e:"string"!=typeof e?[]:e.split(r);return t.replace(n,((t,e)=>e&&i.includes(s[e-1])?ct(t):ht(t)))},upper:ft,words:ut,wrap:function(t){let e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"")+ot(t)+e},wrapTag:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div";return`<${e}>${ot(t)}</${e}>`},escapeHtml:t=>ot(t).replace(tt,yt),unescapeHtml:t=>vt.reduce(wt,ot(t)),unique:(t,e)=>gt(dt(t,e)).join(""),uniqueWords:(t,e,r)=>gt(ut(t,e,r)).join(""),substr:xt,first:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return xt(ot(t),0,e)},last:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=ot(t);return r?xt(r,r.length-e):""},truncate:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"...",s=ot(t),n=e?kt(St(e),0,_t):s.length;return xt(s,0,n)+(s.length===n?"":r)},slice:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=ot(t),s=[],n=Math.round(r.length/e);for(let t=0;t<e;t++)s.push(xt(r,t*n,n));return s},prune:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",s=ot(t),n=e?kt(St(e),0,_t):s.length,i=0;const a=at.test(s)?st:rt;return s.replace(a,((t,e)=>{const s=e+t.length;s<=n-r.length&&(i=s)})),s.substr(0,i)+r},repeat:Et,pad:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=ot(t),n=r?kt(St(r),0,_t):s.length,i=e.length,a=n-s.length,o=St(a/2),l=a%2;return a<=0||0===i?s:At(e,o)+s+At(e,o+l)},lpad:function(t){return Ot(t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>1&&void 0!==arguments[1]?arguments[1]:" ",!0)},rpad:function(t){return Ot(t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>1&&void 0!==arguments[1]?arguments[1]:" ",!1)},insert:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=ot(t);return s.substr(0,r)+e+s.substr(r)},trim:$t,ltrim:Ct,rtrim:Mt,endsWith:(t,e,r)=>ot(t).endsWith(e,r),isAlpha:t=>nt.test(ot(t)),isAlphaDigit:t=>it.test(ot(t)),isDigit:t=>K.test(ot(t)),isBlank:function(t){return!(arguments.length>1&&void 0!==arguments[1])||arguments[1]?0===ot(t).length:0===$t(t).length},isEmpty:Nt,isLower:t=>ct(t)===t,isUpper:t=>ft(t)===t,startWith:(t,e,r)=>ot(t).startsWith(e,r),stripTags:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return ot(t).replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,((t,r)=>e.includes(r)?t:""))},stripTagsAll:t=>ot(t).replace(et,""),sprintf:It,vsprintf:(t,e)=>It.apply(null,[t].concat(e||[])),includes:(t,e,r)=>ot(t).includes(e,r),split:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];return ot(t).split(e,r).map((t=>s?t.trim():t)).filter((t=>!s||!Nt(t)))},strip:function(t){let e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=ot(t);return r?(e=new RegExp(r,"g"),n.replace(e,s)):n},isString:t=>"string"==typeof t,matches:function(t,e){let r,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=ot(t);if(!(e instanceof RegExp)){if(r=e?$t(ot(e)):"",!r)return!1;e=new RegExp(r,s)}return e.test(n)},append:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return ot(t)+Et(e,r)},prepend:function(t){return Et(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",arguments.length>2&&void 0!==arguments[2]?arguments[2]:1)+ot(t)},stripBoom:t=>{let e=ot(t);return""===e?e:"\ufeff"===e[0]?e.substr(1):e},shorten:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"...";return t?`${t.substring(0,e)}${r}${t.substring(t.length-e)}`:t}};class Rt{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",{mutable:e=!0}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.value=t.toString(),this.mutable=e}[Symbol.toPrimitive](t){return"number"===t?+this.value:this.value}get[Symbol.toStringTag](){return"Str"}val(t){return null==t?this.value:(this.value=t.toString(),this)}get length(){return this.value.length}immutable(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.mutable=!t}toString(){return this.value}_result(t){return this.mutable?(this.value=t,this):Pt(t)}camelCase(){return this._result(Ft.camelCase(this.value))}capitalize(t){return this._result(Ft.capitalize(this.value,t))}chars(t){return this._result(Ft.chars(this.value,t))}count(){return Ft.count(this.value)}countChars(t){return Ft.countChars(this.value,t)}countUniqueChars(t){return Ft.countUniqueChars(this.value,t)}countSubstr(t){return Ft.countSubstr(this.value,t)}countWords(t,e){return Ft.countChars(this.value,t,e)}countUniqueWords(t,e){return Ft.countUniqueChars(this.value,t,e)}dashedName(){return this._result(Ft.dashedName(this.value))}decapitalize(){return this._result(Ft.decapitalize(this.value))}endsWith(t,e){return Ft.endsWith(this.value,t,e)}escapeHtml(){return this._result(Ft.escapeHtml(this.value))}first(){return this._result(Ft.first(this.value))}includes(t,e){return Ft.includes(this.value,t,e)}insert(t,e){return this._result(Ft.insert(this.value,t,e))}isAlpha(){return Ft.isAlpha(this.value)}isAlphaDigit(){return Ft.isAlphaDigit(this.value)}isBlank(t){return Ft.isBlank(this.value,t)}isDigit(){return Ft.isDigit(this.value)}isEmpty(){return Ft.isEmpty(this.value)}isLower(){return Ft.isLower(this.value)}static isString(t){return Ft.isString(t)}isUpper(){return Ft.isUpper(this.value)}kebab(t){return this._result(Ft.kebab(this.value,t))}last(t){return this._result(Ft.last(this.value,t))}lower(){return this._result(Ft.lower(this.value))}matches(t,e){return Ft.matches(this.value,t,e)}pad(t,e){return this._result(Ft.pad(this.value,t,e))}lpad(t,e){return this._result(Ft.lpad(this.value,t,e))}rpad(t,e){return this._result(Ft.rpad(this.value,t,e))}prune(t,e){return this._result(Ft.prune(this.value,t,e))}repeat(t){return this._result(Ft.repeat(this.value,t))}append(t,e){return this._result(Ft.append(this.value,t,e))}prepend(t,e){return this._result(Ft.prepend(this.value,t,e))}reverse(t){return this._result(Ft.reverse(this.value,t))}shuffle(){return this._result(Ft.shuffle(this.value))}slice(t){return this._result(Ft.slice(this.value,t))}snake(){return this._result(Ft.snake(this.value))}split(t,e,r){return this._result(Ft.split(this.value,t,e,r))}sprintf(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return this._result(Ft.sprintf(this.value,...e))}vsprintf(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return this._result(Ft.vsprintf(this.value,...e))}startWith(t,e){return Ft.startWith(this.value,t,e)}stripBoom(){return this._result(Ft.stripBoom(this.value))}stripTags(t){return this._result(Ft.stripTags(this.value,t))}stripTagsAll(){return this._result(Ft.stripTagsAll(this.value))}strip(t,e){return this._result(Ft.strip(this.value,t,e))}substr(t,e){return this._result(Ft.substr(this.value,t,e))}swap(){return this._result(Ft.swap(this.value))}title(t,e){return this._result(Ft.title(this.value,t,e))}trim(t){return this._result(Ft.trim(this.value,t))}ltrim(t){return this._result(Ft.ltrim(this.value,t))}rtrim(t){return this._result(Ft.rtrim(this.value,t))}truncate(t,e){return this._result(Ft.truncate(this.value,t,e))}unescapeHtml(){return this._result(Ft.unescapeHtml(this.value))}unique(t){return this._result(Ft.unique(this.value,t))}uniqueWords(t,e){return this._result(Ft.uniqueWords(this.value,t,e))}upper(){return this._result(Ft.upper(this.value))}words(t,e){return Ft.words(this.value,t,e)}wrap(t,e){return this._result(Ft.wrap(this.value,t,e))}wrapTag(t){return this._result(Ft.wrapTag(this.value,t))}shorten(t,e){return this._result(Ft.shorten(this.value,t,e))}}Object.assign(Rt,Ft);const Pt=t=>new Rt(t),Ht=t=>t&&(Array.isArray(t)||"number"==typeof t.length),Bt=(t,e)=>{let r=0;if(Ht(t))[].forEach.call(t,(function(t,s){e.apply(t,[s,t,r++])}));else for(let s in t)t.hasOwnProperty(s)&&e.apply(t[s],[s,t[s],r++]);return t},Yt=Element.prototype.matches||Element.prototype.matchesSelector||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector,qt=t=>{const e=t||globalThis.location.hostname;return"localhost"===e||"127.0.0.1"===e||"[::1]"===e||""===e||null!==e.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)},Wt=(t=globalThis.location.hostname)=>/(^localhost)|(^127\.)|(^192\.168\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2\d\.)|(^172\.3[0-1]\.)|(^::1$)|(^[fF][cCdD])/.test(t),zt=t=>!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length),Gt=t=>{const e=getComputedStyle(t);return!zt(t)||0==+e.opacity||t.hidden||"hidden"===e.visibility},Ut=t=>{const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)},Qt=t=>{try{return(t=>{document.createDocumentFragment().querySelector(t)})(t),!0}catch{return!1}},Zt=t=>void 0===t||null==t;const Jt=t=>{let e;return!(!t||"[object Object]"!==Object.prototype.toString.call(t))&&(e=void 0!==t.prototype,!e||e.constructor&&"function"==typeof e.constructor)},Vt=(t,e=" ")=>(""+t).split(e).map((t=>t.trim())),Xt={attr(t,e){const r={};if(0!==this.length||0!==arguments.length)return this.length&&0===arguments.length?(Bt(this[0].attributes,(function(){r[this.nodeName]=this.nodeValue})),r):1===arguments.length?this.length&&1===this[0].nodeType&&this[0].hasAttribute(t)?this[0].getAttribute(t):void 0:this.each((function(){const r=this;Jt(t)?Bt(t,(function(t,e){r.setAttribute(t,e)})):e?r.setAttribute(t,e):r.removeAttribute(t)}))},hasAttr(t){return!!this.attr(t)},hasAttrs(t){for(let e of t)if(void 0===this.attr(e))return!1;return!0},removeAttr:function(t){let e;return Zt(t)?this.each((function(){const t=this;Bt(t.attributes,(function(){t.removeAttribute(this)}))})):(e="string"==typeof t?Vt(t,","):t,this.each((function(){const t=this;Bt(e,(function(){t.hasAttribute(this)&&t.removeAttribute(this)}))})))},toggleAttr:function(t,e){return this.each((function(){const r=this;Zt(e)?r.removeAttribute(t):r.setAttribute(t,e)}))},id:function(t){return this.length?t?this[0].setAttribute("id",t):this[0].getAttribute("id"):void 0}},Kt={addClass(){},removeClass(){},toggleClass(){},containsClass(){},itemClass(){},hasClass(t){let e=!1;return!(!t||"string"!=typeof t)&&(this.each(((r,s)=>{Bt(Vt(t),((t,r)=>{!e&&s.classList&&s.classList.contains(r)&&(e=!0)}))})),e)},clearClasses(){return this.each((function(){this.className=""}))},classes(t=0,e=!0){return 0===this.length?void 0:e?Vt(this[t].className):this[t].className},classesCount(t=0){return 0===this.length?void 0:this[t].classList.length},removeClassBy(t){return this.each(((e,r)=>{Bt(Vt(r.className),((e,s)=>{s.includes(t)&&r.classList.remove(s)}))}))}};Bt(["add","remove","toggle","contains","item"],((t,e)=>{Kt[`${e}Class`]=function(t){return t.trim()?this.each(((r,s)=>{const n=void 0!==s.classList;Bt(Vt(t),((t,r)=>{n&&s.classList[e](r)}))})):this}}));const te={index(t,e=!1){let r,s=-1;return 0===this.length?s:(r=Zt(t)?this[0]:Ht(t)?t[0]:"string"==typeof t?$(t)[0]:void 0,Zt(r)||(e?r&&r.parentNode&&Bt(r.parentNode.children,(function(t){this===r&&(s=t)})):this.each((function(t){this===r&&(s=t)}))),s)},get(t){return Zt(t)?this:t<0?this[t+this.length]:this[t]},eq(t){return!Zt(t)&&this.length>0?$(this.get(t),void 0,{prevObj:this}):this},is(t){let e=!1;return 0!==this.length&&(Ht(t)?this.each((function(){const r=this;Bt(t,(function(){r===this&&(e=!0)}))})):":selected"===t?this.each((function(){!e&&this.selected&&(e=!0)})):":checked"===t?this.each((function(){!e&&this.checked&&(e=!0)})):":visible"===t?this.each((function(){!e&&zt(this)&&(e=!0)})):":hidden"===t?this.each((function(){const t=getComputedStyle(this);("hidden"===this.getAttribute("type")||this.hidden||"none"===t.display||"hidden"===t.visibility||0===parseInt(t.opacity))&&(e=!0)})):"string"==typeof t?this.each((function(){Yt.call(this,t)&&(e=!0)})):t.nodeType&&1===t.nodeType&&this.each((function(){this===t&&(e=!0)})),e)},same(t){let e=!0;const r=$(t);if(this.length!==r.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==this[t]){e=!1;break}return e},last(){return this.eq(this.length-1)},first(){return this.eq(0)},filter(t){if("string"==typeof t){let e=t;t=t=>Yt.call(t,e)}return $([].filter.call(this,t),void 0,{prevObj:this})},odd(t){let e=this.filter(((t,e)=>e%2==0));return t&&(e=e.filter((e=>Yt.call(e,t)))),$(e,void 0,{prevObj:this})},even(t){let e=this.filter(((t,e)=>e%2!=0));return t&&(e=e.filter((e=>Yt.call(e,t)))),$(e,void 0,{prevObj:this})},find(t){let e,r=[];return 0===this.length?e=this:(this.each((function(){void 0!==this.querySelectorAll&&(r=r.concat([].slice.call(this.querySelectorAll(t))))})),e=$(r)),$(e,void 0,{prevObj:this})},contains(t){return this.find(t).length>0},children(t){let e,r=[];return this.each((function(){const t=this;for(e=0;e<t.children.length;e++)1===t.children[e].nodeType&&r.push(t.children[e])})),r=t?r.filter((e=>Yt.call(e,t))):r,$(r,void 0,{prevObj:this})},parent(t){let e=[];if(0!==this.length)return this.each((function(){this.parentNode&&(e.includes(this.parentNode)||e.push(this.parentNode))})),e=t?e.filter((e=>Yt.call(e,t))):e,$(e,void 0,{prevObj:this})},parents(t){let e=[];if(0!==this.length)return this.each((function(){let r=this.parentNode;for(;r;)1!==r.nodeType||e.includes(r)||(t?Yt.call(r,t)&&e.push(r):e.push(r)),r=r.parentNode})),$(e,void 0,{prevObj:this})},siblings(t){let e=[];if(0!==this.length)return this.each((function(){const t=this;t.parentNode&&Bt(t.parentNode.children,(function(){t!==this&&e.push(this)}))})),t&&(e=e.filter((e=>Yt.call(e,t)))),$(e,void 0,{prevObj:this})},_siblingAll(t,e){let r=[];if(0!==this.length)return this.each((function(){let e=this;for(;e&&(e=e[t],e);)r.push(e)})),e&&(r=r.filter((t=>Yt.call(t,e)))),$(r,void 0,{prevObj:this})},_sibling(t,e){let r=[];if(0!==this.length)return this.each((function(){const e=this[t];e&&1===e.nodeType&&r.push(e)})),e&&(r=r.filter((t=>Yt.call(t,e)))),$(r,void 0,{prevObj:this})},prev(t){return this._sibling("previousElementSibling",t)},next(t){return this._sibling("nextElementSibling",t)},prevAll(t){return this._siblingAll("previousElementSibling",t)},nextAll(t){return this._siblingAll("nextElementSibling",t)},closest(t){const e=[];if(0!==this.length)return t?(this.each((function(){let r=this;for(;r&&r;){if(Yt.call(r,t))return void e.push(r);r=r.parentElement}})),$(e.reverse(),void 0,{prevObj:this})):this.parent(t)},has(t){const e=[];if(0!==this.length)return this.each((function(){$(this).children(t).length>0&&e.push(this)})),$(e,void 0,{prevObj:this})},back(t=!1){let e;if(t)for(e=this.prevObj;e&&e.prevObj;)e=e.prevObj;else e=this.prevObj?this.prevObj:this;return e}},ee={scrollTop:function(t){return Zt(t)?0===this.length?void 0:this[0]===window?scrollY:this[0].scrollTop:this.each((function(){this.scrollTop=t}))},scrollLeft:function(t){return Zt(t)?0===this.length?void 0:this[0]===window?scrollX:this[0].scrollLeft:this.each((function(){this.scrollLeft=t}))}},re=t=>t.replace(/-([a-z])/g,(t=>t[1].toUpperCase())),se={_setStyleProp(t,e,r){e=re(e),["scrollLeft","scrollTop"].includes(e)?t[e]=parseInt(r):t.style[e]=isNaN(r)||["opacity","zIndex"].includes(e)?r:r+"px"},_getStyle:(t,e,r)=>["scrollLeft","scrollTop"].includes(e)?$(t)[e]():getComputedStyle(t,r)[e],style:function(t,e){let r;const s=this;if("string"!=typeof t||0!==this.length){if(0===this.length)return this;if(r=this[0],Zt(t)||"all"===t)return getComputedStyle(r,e);{const n={},i=Vt(t,",");return 1===i.length?this._getStyle(r,i[0],e):(Bt(i,(function(){n[this]=s._getStyle(r,this,e)})),n)}}},removeStyle:function(t){if(Zt(t)||0===this.length)return this;const e=Vt(t);return this.each((function(){const t=this;Bt(e,(function(){t.style.removeProperty(this)}))}))},css:function(t,e){const r=this;return"string"!=typeof(t=t||"all")||e?this.each((function(){const s=this;"object"==typeof t?Bt(t,(function(t,e){r._setStyleProp(s,t,e)})):"string"==typeof t&&r._setStyleProp(s,t,e)})):this.style(t)}},ne=t=>{if("object"==typeof t&&null!==t){for(let e in t)if(t.hasOwnProperty(e))return!1;return!0}},ie=t=>"string"!=typeof t?void 0:t.replace(/\-/g,"").toLowerCase(),ae=Event.prototype.stopPropagation,oe=Event.prototype.preventDefault;Event.prototype.stopPropagation=function(){this.isPropagationStopped=!0,ae.apply(this,arguments)},Event.prototype.preventDefault=function(){this.isPreventedDefault=!0,oe.apply(this,arguments)},Event.prototype.stop=function(t){return t?this.stopImmediatePropagation():this.stopPropagation()};const le={events:[],eventHooks:{},eventUID:-1,ready:(t,e=!1)=>$(t,e),load:(t,e=!1)=>$(window).on("load",t,e),unload:(t,e=!1)=>$(window).on("unload",t,e),beforeunload:(t,e=!1)=>"string"==typeof t?$(window).on("beforeunload",(function(e){return e.returnValue=t,t}),e):$(window).on("beforeunload",t,e),setEventHandler:function({element:t,event:e,handler:r,selector:s,ns:n,id:i,options:a}=args){let o,l,u,h=-1;if(this.events.length>0)for(o=0;o<this.events.length;o++)if(null===this.events[o].handler){h=o;break}return l={element:t,event:e,handler:r,selector:s,ns:n,id:i,options:a},-1===h?(this.events.push(l),u=this.events.length-1):(this.events[h]=l,u=h),u},getEventHandler:function(t){const e=this.events;let r;if(!Zt(e[t]))return r=e[t].handler,e[t]=null,r},off:function(){return this.each(this.events,(function(){this.element.removeEventListener(this.event,this.handler,this.options)})),this.events=[],this},getEvents:function(){return this.events},getEventHooks:function(){return this.eventHooks},addEventHook:function(t,e,r="before"){return this.each(Vt(t),(function(){this.eventHooks[re(r+"-"+this)]=e})),this},removeEventHook:function(t,e="before"){return this.each(Vt(t),((t,r)=>{delete this.eventHooks[re(e+"-"+r)]})),this},removeEventHooks:function(t,e="before"){return Zt(t)?this.eventHooks={}:this.each(Vt(t),((t,r)=>{delete this.eventHooks[re(e+"-"+r)]})),this}},ue={load:function(t,e){return 0===this.length||this[0].self!==window?void 0:le.load(t,e)},unload:function(t,e){return 0===this.length||this[0].self!==window?void 0:le.unload(t,e)},beforeunload:function(t,e){return 0===this.length||this[0].self!==window?void 0:le.beforeunload(t,e)},ready:function(t,e){if(this.length&&this[0]===document&&"function"==typeof t)return le.ready(t,e)},on:function(t,e,r,s){if(0!==this.length)return"function"==typeof e&&(s=r,r=e,e=void 0),Jt(s)||(s={}),this.each((function(){const n=this;Bt(Vt(t),(function(){let t,i,a;const o=this.split("."),l=ie(o[0]),u=s.ns?s.ns:o[1];le.eventUID++,t=function(t){let a=t.target;const o=le.eventHooks[re("before-"+l)],h=le.eventHooks[re("after-"+l)];if("function"==typeof o&&o.call(a,t),e)for(;a&&a!==n;){if(Yt.call(a,e)&&(r.call(a,t),t.isPropagationStopped)){t.stopImmediatePropagation();break}a=a.parentNode}else r.call(n,t);"function"==typeof h&&h.call(a,t),s.once&&(i=+$(n).data("event-"+t.type+(e?":"+e:"")+(u?":"+u:"")),isNaN(i)||le.events.splice(i,1))},Object.defineProperty(t,"name",{value:r.name&&""!==r.name?r.name:"func_event_"+l+"_"+le.eventUID}),a=l+(e?":"+e:"")+(u?":"+u:""),n.addEventListener(l,t,!ne(s)&&s),i=le.setEventHandler({el:n,event:l,handler:t,selector:e,ns:u,id:le.eventUID,options:!ne(s)&&s}),$(n).data("event-"+a,i)}))}))},one:function(t,e,r,s){return Jt(s)||(s={}),s.once=!0,this.on.apply(this,[t,e,r,s])},off:function(t,e,r){return Jt(e)&&(r=e,e=null),Jt(r)||(r={}),t&&"all"!==t.toLowerCase()?this.each((function(){const s=this;Bt(Vt(t),(function(){const t=this.split("."),n=ie(t[0]),i=r.ns?r.ns:t[1];let a,o;a="event-"+n+(e?":"+e:"")+(i?":"+i:""),o=+$(s).data(a),void 0!==o&&le.events[o].handler&&(s.removeEventListener(n,le.events[o].handler,le.events[o].options),le.events[o].handler=null),$(s).data(a,null)}))})):this.each((function(){const t=this;Bt(le.events,(function(){const e=this;e.element===t&&(t.removeEventListener(e.event,e.handler,e.options),e.handler=null,$(t).data("event-"+name+(e.selector?":"+e.selector:"")+(e.ns?":"+e.ns:""),null))}))}))},trigger:function(t,e){return this.fire(t,e)},fire:function(t,e){const r=ie(t);if(0===this.length)return;if(["focus","blur"].indexOf(r)>-1)return this[0][r](),this;const s=new CustomEvent(r,{bubbles:!0,cancelable:!0,detail:e});return this.each((function(){this.dispatchEvent(s)}))},hover:function(t,e,r){return this.on("mouseenter",t,r).on("mouseleave",e||t,r)}};["blur","focus","resize","scroll","click","dblclick","mousedown","mouseup","mousemove","mouseenter","mouseleave","mouseover","touchstart","touchend","touchmove","touchcancel","change","select","submit","keyup","keydown","keypress","contextmenu"].forEach((function(t){ue[t]=function(e,r,s){return arguments.length>0?this.on(t,e,r,s):this.fire(t,s.detail)}}));const he=(t,e=document.body)=>{if(!e instanceof HTMLElement)return;const r=$(t);Bt(r,((t,r)=>{if(r.tagName&&"SCRIPT"===r.tagName){const t=document.createElement("script");return t.type="text/javascript",r.src?t.src=r.src:t.textContent=r.innerText,e.appendChild(t),r.parentNode&&r.parentNode.removeChild(r),t}}))},ce={script(t){return he(this,t),this}},de=function(t){let e,r,s,n=[];if("string"!=typeof t)return[];if(s=document.implementation.createHTMLDocument(""),e=s.createElement("base"),e.href=document.location.href,s.head.appendChild(e),r=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i.exec(t),r)n.push(document.createElement(r[1]));else{s.body.innerHTML=t;for(let t=0;t<s.body.childNodes.length;t++)n.push(s.body.childNodes[t])}return n},pe=function(){let t=[],e=[...arguments];for(let r of e)t=[].concat(t,fe(r));return t},fe=function(t){let e;return"string"==typeof t?e=Qt(t)?$(t):de(t):t.nodeType&&1===t.nodeType?e=[t]:Ht(t)&&(e=t),e},ge={appendText(t){return this.each(((e,r)=>r.innerHTML+=t))},prependText(t){return this.each(((e,r)=>r.innerHTML=t+r.innerHTML))},append(){let t=pe(...arguments);return this.each(((e,r)=>{Bt(t,((t,s)=>{if(r===s)return;const n=0===e?s:s.cloneNode(!0);n.tagName&&"SCRIPT"!==n.tagName&&r.append(n),he(n)}))}))},appendTo(){let t=pe(...arguments);return this.each(((e,r)=>{Bt(t,((t,e)=>{r!==e&&$(e).append(0===t?r:r.cloneNode(!0))}))}))},prepend(){let t=pe(...arguments);return this.each(((e,r)=>{Bt(t,((t,s)=>{if(r===s)return;const n=0===e?s:s.cloneNode(!0);n.tagName&&"SCRIPT"!==n.tagName&&r.prepend(n),he(n)}))}))},prependTo(){let t=pe(...arguments);return this.each(((e,r)=>{Bt(t,((t,e)=>{r!==e&&$(e).prepend(0===t?r:r.cloneNode(!0))}))}))},insertBefore(){let t=pe(...arguments);return console.log("elements",t,...arguments),this.each(((e,r)=>{Bt(t,((t,e)=>{r!==e&&e.parentNode&&e.parentNode.insertBefore(0===t?r:r.cloneNode(!0),e)}))}))},insertAfter(){let t=pe(...arguments);return this.each(((e,r)=>{Bt(t,((t,e)=>{r!==e&&e.parentNode&&e.parentNode.insertBefore(0===t?r:r.cloneNode(!0),e.nextSibling)}))}))},after(t){return this.each((function(){const e=this;"string"==typeof t?e.insertAdjacentHTML("afterend",t):$(t).insertAfter(e)}))},before(t){return this.each((function(){const e=this;"string"==typeof t?e.insertAdjacentHTML("beforebegin",t):$(t).insertBefore(e)}))},clone(t=!1,e=!1){const r=[];return this.each(((s,n)=>{const i=$(n.cloneNode(t));if(e){const t=$.dataset.get(n);Bt(t,(function(t,e){$.dataset.set(i,t,e)}))}r.push(i)})),$(r)},import(t=!1){const e=[];return this.each(((r,s)=>e.push(document.importNode(s,t)))),$(e)},adopt(){const t=[];return this.each(((e,r)=>t.push(document.adoptNode(r)))),$(t)},remove(t){let e,r,s=0;const n=[];if(0===this.length)return this;for(r=t?this.filter((e=>$.matches.call(e,t))):this;null!=(e=r[s]);s++)e.parentNode&&(n.push(e.parentNode.removeChild(e)),$.dataset.removeAll(e));return $(n)},clear(){return this.each(((t,e)=>e.innerHTML=""))},wrap(t){const e=$(fe(t)),r=[];if(this.length&&e.length)return this.each(((t,s)=>{let n=e.clone(!0,!0);n.insertBefore(s);let i=n;for(;i.children().length;)i=i.children().eq(0);i.append(s),r.push(n)})),$(r)},wrapAll(t){const e=$(fe(t));let r,s;if(this.length&&e.length){for(r=e.clone(!0,!0),r.insertBefore(this[0]),s=r;s.children().length;)s=s.children().eq(0);return this.each((function(){s.append(this)})),r}},wrapInner:function(t){if(0!==this.length){var e=$(fe(t));if(e.length){var r=[];return this.each((function(){var t=$(this),s=t.html(),n=e.clone(!0,!0);t.html(n.html(s)),r.push(n)})),$(r)}}}},me={toArray:function(){return[...this]},age(){return this.timestamp},each(t){return Bt(this,t)}},ye={inViewport(){return this.length?Ut(this[0]):void 0},isVisible(){return this.length?zt(this[0]):void 0},isHidden(){return this.length?Gt(this[0]):void 0},hide(t){return this.each(((e,r)=>{getComputedStyle(r,null).display,$(r).data("display-state",r.style.display),r.style.display="none","function"==typeof t&&t.apply(r,[r])}))},show(t){return this.each(((e,r)=>{const s=$(r).data("display-state");console.log(s),r.style.display=s?"none"===s?"block":s:"",0===parseInt(r.style.opacity)&&(r.style.opacity="1"),"function"==typeof t&&t.apply(r,[r])}))},visible(t=!0,e){return this.each(((r,s)=>{s.style.visibility=t?"visible":"hidden","function"==typeof e&&e.apply(s,[s])}))},toggle(t){return this.each(((e,r)=>{let s="show";"none"!==getComputedStyle(r,null).display&&(s="hide"),$(r)[s](t)}))},hidden(t=!0,e){return"boolean"!=typeof t&&(t=!1),this.each(((r,s)=>{s.hidden=t,"function"==typeof e&&e.apply(s,[s])}))}},be={_prop(t,e=""){return 1===arguments.length?0===this.length?void 0:this[0][t]:this.each(((r,s)=>{void 0!==s[t]&&(s[t]=e)}))},prop(t,e){return 1===arguments.length?this._prop(t):this._prop(t,void 0===e?"":e)},val(t){return Zt(t)?this.length?this[0].value:void 0:this.each(((e,r)=>{void 0!==r.value?r.value=t:r.innerHTML=t}))},html(t){const e=[];return 0===arguments.length?this._prop("innerHTML"):("string"!=typeof t&&Ht(t)?Bt(t,((t,r)=>{r instanceof HTMLElement&&e.push(this.outerHTML)})):e.push(t),this._prop("innerHTML",e.join("\n")),this)},outerHTML(){return this._prop("outerHTML")},text(t){return 0===arguments.length?this._prop("textContent"):this._prop("textContent",void 0===t?"":t)},innerText(t){return 0===arguments.length?this._prop("innerText"):this._prop("innerText",void 0===t?"":t)},empty(){return this.each(((t,e)=>{void 0!==e.value?e.value="":void 0!==e.innerHTML&&(e.innerHTML="")}))},clear:function(){return this.empty()}},ve={_size:function(t,e){if(0!==this.length){if(Zt(e)){const e=this[0];if("height"===t)return e===window?window.innerHeight:e===document?e.body.clientHeight:parseInt(getComputedStyle(e).height);if("width"===t)return e===window?window.innerWidth:e===document?e.body.clientWidth:parseInt(getComputedStyle(e).width)}return this.each(((r,s)=>{s!==window&&s!==document&&s.style.hasOwnProperty(t)&&(s.style[t]=isNaN(e)?e:e+"px")}))}},height:function(t){return this._size("height",t)},width:function(t){return this._size("width",t)},_sizeOut:function(t,e){if(0===this.length)return;if(!Zt(e)&&"boolean"!=typeof e)return this.each(((r,s)=>{if(s===window||s===document)return;const n=getComputedStyle(s);let i,a="width"===t?parseInt(n["border-left-width"])+parseInt(n["border-right-width"]):parseInt(n["border-top-width"])+parseInt(n["border-bottom-width"]),o="width"===t?parseInt(n["padding-left"])+parseInt(n["padding-right"]):parseInt(n["padding-top"])+parseInt(n["padding-bottom"]);i=$(s)[t](e)[t]()-a-o,s.style[t]=i+"px"}));const r=this[0],s=r["width"===t?"offsetWidth":"offsetHeight"],n=getComputedStyle(r),i=s+parseInt(n["width"===t?"margin-left":"margin-top"])+parseInt(n["width"===t?"margin-right":"margin-bottom"]);return!0===e?i:s},outerWidth:function(t){return this._sizeOut("width",t)},outerHeight:function(t){return this._sizeOut("height",t)},padding:function(t){if(0===this.length)return;const e=getComputedStyle(this[0],t);return{top:parseInt(e["padding-top"]),right:parseInt(e["padding-right"]),bottom:parseInt(e["padding-bottom"]),left:parseInt(e["padding-left"])}},margin:function(t){if(0===this.length)return;const e=getComputedStyle(this[0],t);return{top:parseInt(e["margin-top"]),right:parseInt(e["margin-right"]),bottom:parseInt(e["margin-bottom"]),left:parseInt(e["margin-left"])}},border:function(t){if(0===this.length)return;const e=getComputedStyle(this[0],t);return{top:parseInt(e["border-top-width"]),right:parseInt(e["border-right-width"]),bottom:parseInt(e["border-bottom-width"]),left:parseInt(e["border-left-width"])}}},we={init(){if(this.selector)if("function"!=typeof this.selector){if("window"===this.selector||this.selector&&this.selector.self===window)return this[0]=window,void(this.length=1);if("doctype"===this.selector||this.selector&&this.selector.nodeType&&10===this.selector.nodeType)return this[0]=document.doctype,void(this.length=1);if("document"===this.selector||this.selector&&this.selector.nodeType&&9===this.selector.nodeType)return this[0]=document,void(this.length=1);if("object"==typeof this.selector&&Ht(this.selector))Bt(this.selector,((t,e)=>{this.push(e instanceof Query?e[0]:e)}));else if(this.selector instanceof HTMLElement)this.push(this.selector);else if("string"==typeof this.selector&&Qt(this.selector))[].push.apply(this,document.querySelectorAll(this.selector));else if("#"!==this.selector&&"."!==this.selector){if("string"==typeof this.selector){const t=de(this.selector);if(1===t.length&&3===t[0].nodeType?[].push.apply(this,document.querySelectorAll(this.selector)):[].push.apply(this,t),this.length>0&&this.context)if("object"==typeof this.context&&Jt(this.context))Bt(this,((t,e)=>{for(let t in this.context)this.context.hasOwnProperty(t)&&e.setAttribute(t,this.context[t])}));else{"string"==typeof this.context&&(this.context=$(this.context));let t=[];this.context instanceof HTMLElement?t.push(this.context):Ht(this.context)&&[].push.apply(t,this.context);const e=[];Bt(t,((t,r)=>{const s=this.clone(!0,!0);new Query(r).append(s),Bt(s,((t,r)=>{e.push(r)}))})),this.length=0,[].push.apply(this,e)}}}else console.warn("Selector can't be # or .")}else document.addEventListener("DOMContentLoaded",this.selector,this.context||!1)}},xe={offset:function(){if(0===this.length)return;const t=this[0];return{top:t.offsetTop,left:t.offsetLeft,height:t.offsetHeight,width:t.offsetWidth,parent:t.offsetParent}},position:function(t){let e,r,s=0,n=0;var i;if(0!==this.length)return e=this[0],r=getComputedStyle(e),Zt(i=t)||("boolean"==typeof i||"number"==typeof i&&0!==i?!i:"number"==typeof i&&0===i||!["true","ok","yes"].includes((""+i).toLowerCase()))||(s=parseInt(r["margin-left"]),n=parseInt(r["margin-top"])),{left:e.offsetLeft-s,top:e.offsetTop-n}},left:function(t,e){if(0!==this.length)return Zt(t)?this.position(e).left:"boolean"==typeof t?(e=t,this.position(e).left):this.each((function(){$(this).css({left:t})}))},top:function(t,e){if(0!==this.length)return Zt(t)?this.position(e).top:"boolean"==typeof t?(e=t,this.position(e).top):this.each((function(){$(this).css({top:t})}))},coord:function(){return 0===this.length?void 0:this[0].getBoundingClientRect()},pos:function(){if(0!==this.length)return{top:parseInt($(this[0]).style("top")),left:parseInt($(this[0]).style("left"))}}},_e={uid:"uid",prevObj:null};class ke extends Array{get[Symbol.toStringTag](){return"Query"}[Symbol.toPrimitive](t){if("string"===t){const t=[...this];return JSON.stringify(t)}return this.value}constructor(t,e,r){super(),this.options=Object.assign({},_e,r),this.length=0,this.uid=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.options.uid),this.timestamp=+new Date,this.selector="string"==typeof t?t.trim():t,this.context=e,this.prevObj=this.options.prevObj,this.init()}}const Se=(...t)=>new ke(...t),Ee=Se;ke.use=(...t)=>Object.assign(ke.prototype,...t),Se.use=(...t)=>Object.assign(Se,...t),ke.use(we,Xt,Kt,te,se,ee,ue,ce,ge,me,ye,be,ve,xe),Se.use({dataset:new class{constructor(){this._dataset=new Map}set(t,e,r){this._dataset.has(t)||this._dataset.set(t,new Map);const s=this._dataset.get(t);s.has(e)||0===s.size?s.set(e,r):console.error(`Query doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`)}get(t,e,r=null){if(this._dataset.has(t)){const s=this._dataset.get(t);return e?s.get(e)||r:s}return null}remove(t,e){if(!this._dataset.has(t))return;const r=this._dataset.get(t);r.delete(e),0===r.size&&this._dataset.delete(t)}removeAll(t){this._dataset.has(t)&&this._dataset.delete(t)}attr(t,e,r){if(1!==t.nodeType||!e)return;const s="data-"+e.replace(/[A-Z]/g,"-$&").toLowerCase();return r&&t.setAttribute(s,JSON.stringify(r)),t.getAttribute(s)}},matches:Yt,html:Ee("html"),doctype:Ee("doctype"),head:Ee("head"),body:Ee("body"),document:Ee("document"),window:Ee("window"),meta:t=>Ee(t?"meta[name=$name]".replace("$name",t):"meta"),metaBy:t=>t?Ee("meta[$name]".replace("$name",t)):Ee.meta,charset:t=>{if(t){const e=Ee("meta[charset]");e.length>0&&e.attr("charset",t)}return document.characterSet},each:function(t,e){return Bt(t,e)},bind:(t,e)=>"function"!=typeof t?void 0:t.bind(e),proxy:(t,e)=>new Proxy(t,e),device:/android|wearos|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()),localhost:qt(),isLocalhost:qt,privateAddress:Wt(),isPrivateAddress:Wt,touchable:"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0,script:he,noop:()=>{},noop_true:()=>!0,noop_false:()=>!1,exec:(t,e,r)=>{let s;if("function"==typeof t)s=t;else if(/^[a-z]+[\w.]*[\w]$/i.test(t)){const e=t.split(".");s=globalThis;for(let t=0;t<e.length;t++)s=s[e[t]]}else s=new Function("a",t);return s.apply(r,e)},dark:globalThis.matchMedia&&globalThis.matchMedia("(prefers-color-scheme: dark)").matches,isVisible:zt,isHidden:Gt,inViewport:Ut,type:t=>({}.toString.call(t).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()),isSelector:Qt,undef:Zt,iif:(t,e,r)=>t?e:r,nvl:(t,e)=>null==t?e:t,coalesce:function(){const t=[...arguments];for(let e of t)if(!Zt(e))return e;return null}}),ke.use({data(t,e){let r,s;if(0!==this.length){if(r=this[0],!arguments.length){if(s=Ee.dataset.get(r),!s){s={};for(let t of[...r.attributes]){const e=t.name;e.startsWith("data-")&&(r.getAttribute(e),s[e]=r.getAttribute(e))}}return s}return 1===arguments.length?Ee.dataset.get(r,t)||Ee.dataset.attr(r,t):this.each((function(){Ee.dataset.set(this,t,e)}))}},removeData(t){return this.each((function(){Ee.dataset.remove(this,t)}))}});let Ae=globalThis.$;Se.use({global(){Ae=globalThis.$,globalThis.$=Ee},noConflict:()=>(globalThis.$===Ee&&(globalThis.$=Ae),Ee)});const Oe=Se;function Te(t){return t.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}))}const je=["opacity","zIndex","order","zoom"];function $e(t={}){return Object.keys(t).map((e=>{const r=Te(e);let s=t[e];return je.includes(r)||isNaN(s)||(s+="px"),`${r}: ${s}`})).join(";")}const Ce=["accesskey","contenteditable","contextmenu","dir","id","lang","spellcheck","tabindex","title"];class Me{constructor(t={}){this.options=t,this.tag="div"}selfAttributes(){return[]}get attributes(){return this.getAttributes().join(" ")}getAttributes(){let t=[],e=["hidden","disabled","required","readonly","selected","open","multiply","default"],r=["className","style","data","tag","events"];for(let s in this.options)r.includes(s)||(e.includes(s)&&!0===this.options[s]?t.push(s):(this.selfAttributes().includes(s)&&!t.includes(s)||Ce.includes(s))&&t.push(`${s}="${this.options[s]}"`));return this.classes&&t.push(`class="${this.classes}"`),this.styles&&t.push(`style="${this.styles}"`),this.dataSet&&t.push(this.dataSet),this.aria&&t.push(this.aria),t}draw(){return this.template()}get dataSet(){const{data:t={}}=this.options;let e=[];if(t==={})return"";for(let r in t)e.push(`data-${Te(r)}="${t[r]}"`);return e.join(" ")}get aria(){const{aria:t={}}=this.options;let e=[];if(t==={})return"";for(let r in t)e.push(`aria-${r.toLowerCase()}="${t[r]}"`);return e.join(" ")}get events(){const{events:t={}}=this.options;let e=[];if(t==={})return"";for(let r in t)e.push(`${r.toLowerCase()}="${t[r]}"`);return e.join(" ")}get classes(){const{className:t=[]}=this.options;return function(t=[]){return Array.isArray(t)?t.join(" "):t.toString()}(t)}get styles(){const{style:t={}}=this.options;return $e(t)}template(){return""}}const Ne=t=>{if(Array.isArray(t))return t.map(Ne).join("");if("string"==typeof t)return t;if(t.draw)return t.draw();throw new Error("Unknown element! "+t)};class De extends Me{constructor(t="",e={}){"object"!=typeof t||Array.isArray(t)||t.draw||(e=t,t=""),super(e),this.children=t}template(t){const e=this.options.tag?this.options.tag:this.tag;return`\n            <${e} ${this.attributes} ${this.events}>${t}</${e}>\n        `}draw(){let t,e=this.children;return null==e&&(e=""),t="string"==typeof e?e:e instanceof Me?e.draw():Array.isArray(e)?e.map(Ne).join(""):"",this.template(t)}}class Le extends Me{constructor(t={}){super(t),this.options=t}template(){return`\n            <${this.options.tag?this.options.tag:this.tag} ${this.attributes} ${this.events}/>\n        `}}const Ie=(t=[],e=document.body,r={})=>{let s,n;const{clear:i=!0,where:a="beforeend"}=r;n="string"==typeof e?document.querySelector(e):e,n||(n=document.body),i&&(n.innerHTML=""),Array.isArray(t)||(t=[t]),s=t.map(Ne).join(""),n.insertAdjacentHTML(a,s)};class Fe{version="0.1.0";_routes=[];_route="/";_mode=null;_ignore="[data-route-ignore]";_404=()=>{};constructor(t={}){this.options=Object.assign({},this.options,t),this.options.mode&&(this._mode=this.options.mode),this.options.ignore&&(this._ignore=this.options.ignore),this.options.routes&&this.addRoutes(this.options.routes),this.options[404]&&"function"==typeof this.options[404]&&(this._404=this.options[404])}clearSlashes(t){return t.replace(/\/$/,"").replace(/^\//,"")}index(t){let e=-1;for(let r=0;r<this._routes.length;r++)if(this._routes[r].path===t){e=r;break}return e}routeExists(t){return-1!==this.index(t)}_routesFn(t,e){if(Array.isArray(t)&&t.length)t.forEach((t=>{t.path&&this[e](t.path,t.callback)}));else if("object"==typeof t)for(let r in t)t.hasOwnProperty(r)&&this[e](r,t[r])}addRoute(t,e){return t&&!this.routeExists(t)&&this._routes.push({path:t,callback:e,pattern:new RegExp("^"+t.replace(/:\w+/g,"(\\w+)")+"$")}),this}addRoutes(t){return this._routesFn(t,"addRoute"),this}updRoute(t,e){const r=this.index(t);if(-1!==r)return e&&e.path&&(this._routes[r].path=e.path),e&&e.callback&&(this._routes[r].callback=e.callback),this}updRoutes(t){return this._routesFn(t,"updRoute"),this}delRoute(t){return this.routeExists(t)&&delete this._routes[t],this}findRoute(t){let e;for(let r=0;r<this._routes.length;r++)if(t.match(this._routes[r].pattern)){e=this._routes[r];break}return e}exec(t=document.location,e=!1){let r,s,n;return r=new URL(t),s=r.pathname,n=this.findRoute(s),n?(e&&history.pushState(null,null,s),n&&"function"==typeof n.callback&&n.callback.apply(this,[s]),this.route=s,this):(this._404(),this)}listen(){const{ignore:t}=this.options;return window.addEventListener("click",(e=>{const r=e.target;let s;"a"!==r.tagName.toLowerCase()||r.matches(t)||(e.preventDefault(),s=r.href,s&&this.exec(s,!0))}),!1),window.addEventListener("popstate",(t=>{this.exec(document.location)}),!1),this}}const Re=(t="",e)=>{let r=document.createElement("style");return void 0!==e&&r.setAttribute("media",e),r.appendChild(document.createTextNode(t)),document.head.appendChild(r),r},Pe=t=>Re(t).sheet,He=(t,e,r)=>{t.insertRule(e+"{"+r+"}")};class Be extends De{tag="span"}class Ye extends Le{tag="img";selfAttributes(){return["align","alt","border","height","hspace","ismap","longdesc","lowsrc","src","vspace","width","usemap"]}}const qe=(t={})=>new Ye(t);class We extends Le{tag="input";selfAttributes(){return["accept","align","alt","autocomplete","autofocus","border","checked","disabled","form","formaction","formenctype","formmethod","formnovalidate","formtarget","list","max","maxlength","min","multiple","name","pattern","placeholder","size","src","step","type","value"]}}class ze extends Le{tag="br";selfAttributes(){return["clear"]}}class Ge extends Le{tag="hr"}class Ue extends De{constructor(t="h1",e="",r={}){super(e,r),this.tag=t}}const Qe=(t="h1",e="",r={})=>new Ue(t,e,r);class Ze extends De{tag="section"}class Je extends De{tag="a";selfAttributes(){return["coords","download","hreflang","name","rel","rev","shape","target","type","href"]}}class Ve extends De{tag="abbr"}class Xe extends De{tag="article"}class Ke extends De{tag="nav"}class tr extends De{tag="aside"}class er extends De{tag="header"}class rr extends De{tag="footer"}class sr extends De{tag="address"}class nr extends De{tag="map";selfAttributes(){return["name"]}}class ir extends Le{tag="area";selfAttributes(){return["alt","coords","hreflang","nohref","shape","target","type","href"]}}const ar=(t={})=>new ir(t);class or extends De{tag="audio";selfAttributes(){return["autoplay","controls","loop","preload","src"]}}class lr extends De{tag="b"}class ur extends De{tag="bdi"}class hr extends De{tag="bdo"}class cr extends De{tag="blockquote";selfAttributes(){return["cite"]}}class dr extends De{tag="button";selfAttributes(){return["autofocus","form","formaction","formenctype","formmethod","formnovalidate","formtarget","name","type","value"]}}class pr extends De{tag="canvas";selfAttributes(){return["width","height"]}}class fr extends De{tag="table";selfAttributes(){return["align","background","bgcolor","border","bordercolor","cellpadding","cellspacing","cols","frame","height","rules","summary","width"]}}class gr extends De{tag="caption";selfAttributes(){return["align","valign"]}}class mr extends Le{tag="col";selfAttributes(){return["align","valign","char","charoff","span","width"]}}class yr extends Le{tag="colgroup";selfAttributes(){return["align","valign","char","charoff","span","width"]}}class br extends De{constructor(t="tbody",e="",r={}){super(e,r),this.tag=t}selfAttributes(){return["align","valign","char","charoff","bgcolor"]}}class vr extends De{tag="tr";selfAttributes(){return["align","bgcolor","bordercolor","char","charoff","valign"]}}class wr extends De{constructor(t="td",e="",r={}){super(e,r),this.tag=t}selfAttributes(){return["abbr","align","axis","background","bgcolor","bordercolor","char","charoff","colspan","headers","height","nowrap","rowspan","scope","valign","width"]}}class xr extends De{tag="cite"}class _r extends De{tag="code"}class kr extends De{tag="dl"}class Sr extends De{tag="dt"}class Er extends De{tag="dd"}class Ar extends De{tag="details"}class Or extends De{tag="summary"}class Tr extends De{tag="dfn"}class jr extends De{tag="div";selfAttributes(){return["align","title"]}}class $r extends De{tag="em"}class Cr extends De{tag="i"}class Mr extends De{tag="strong"}class Nr extends De{tag="embed";selfAttributes(){return["align","height","hspace","pluginspace","src","type","vspace","width"]}}class Dr extends De{tag="noembed"}class Lr extends De{tag="fieldset";selfAttributes(){return["form","title"]}}class Ir extends De{tag="legend";selfAttributes(){return["align","title"]}}class Fr extends De{tag="figure"}class Rr extends De{tag="figcaption"}class Pr extends De{tag="form";selfAttributes(){return["accept-charset","action","autocomplete","enctype","method","name","novalidate","target"]}}class Hr extends De{tag="frameset";selfAttributes(){return["border","bordercolor","cols","frameborder","framespacing","rows"]}}class Br extends Le{tag="frame";selfAttributes(){return["bordercolor","frameborder","noresize","name","src","scrolling"]}}class Yr extends De{tag="noframes"}class qr extends De{tag="iframe";selfAttributes(){return["align","allowtransparency","frameborder","height","hspace","marginheight","marginwidth","name","sandbox","scrolling","seamless","src","srcdoc","vspace","width"]}}class Wr extends De{tag="ins";selfAttributes(){return["cite","datetime"]}}class zr extends De{tag="kbd"}class Gr extends De{tag="label";selfAttributes(){return["for"]}}const Ur=(t="",e={})=>new Gr(t,e);class Qr extends De{constructor(t="ul",e="",r={}){super(e,r),this.tag=t}selfAttributes(){return"ul"===this.tag?["type"]:["type","reserved","start"]}}class Zr extends De{tag="li";selfAttributes(){return["type","value"]}}class Jr extends De{tag="mark"}class Vr extends De{tag="noscript"}class Xr extends De{tag="select";selfAttributes(){return["autofocus","form","name","size"]}}class Kr extends De{tag="optgroup";selfAttributes(){return["label"]}}class ts extends De{tag="option";selfAttributes(){return["label","value"]}}class es extends De{tag="output";selfAttributes(){return["for","form","name"]}}class rs extends De{tag="p";selfAttributes(){return["align"]}}class ss extends De{tag="pre"}class ns extends De{tag="q";selfAttributes(){return["cite"]}}class is extends De{tag="strike"}class as extends De{tag="script";selfAttributes(){return["async","defer","language","src","type"]}}const os=(t="",e={})=>new as(t,e);class ls extends De{tag="small"}class us extends Le{tag="source";selfAttributes(){return["media","src","type"]}}const hs=(t={})=>new us(t);class cs extends De{tag="sub"}class ds extends De{tag="sup"}class ps extends De{tag="textarea";selfAttributes(){return["autofocus","cols","form","maxlength","name","placeholder","rows","wrap"]}}class fs extends De{tag="time";selfAttributes(){return["datetime","pubdate"]}}class gs extends Le{tag="track";selfAttributes(){return["kind","src","srclang","label"]}}const ms=(t={})=>new gs(t);class ys extends De{tag="var"}class bs extends De{tag="video";selfAttributes(){return["autoplay","controls","height","loop","loop","poster","preload","src","width"]}}const vs=(t="",e={})=>new bs(t,e);class ws extends Le{tag="wbr"}class xs extends De{tag="main"}class _s extends De{tag="div";constructor(t="",e={}){let{style:r={},order:s=0,justify:n="flex-start",align:i="stretch",content:a="normal"}=e;r.display=!0===e.inline?"inline-flex":"flex",["direction","wrap","flow","grow","shrink","basis"].forEach((t=>{void 0!==e[t]&&(r[`flex-${t}`]=e[t])})),r.order=s,r.justifyContent=n,r.alignItems=i,r.alignContent=a,super(t,{...e,style:r})}}class ks extends De{constructor(t="",e={}){let{style:r={}}=e;["left","right","top","bottom"].forEach((t=>{if(void 0!==e[t]){let s=e[t];r[`margin-${t}`]=isNaN(s)?s:`${s}px`}})),super(t,{...e,style:r})}}class Ss extends De{constructor(t="",e={}){let{style:r={}}=e;["left","right","top","bottom"].forEach((t=>{if(void 0!==e[t]){let s=e[t];r[`padding-${t}`]=isNaN(s)?s:`${s}px`}})),super(t,{...e,style:r})}}class Es extends De{constructor(t="",e={}){let{style:r={}}=e;r.textAlign="center",super(t,{...e,style:r})}}class As extends De{tag="figure";constructor(t="",e="",r="",s={}){r&&"string"!=typeof r&&(s=r,r=""),super(s),this.img=t,this.alt=r,this.caption=e}template(){return`\n            <${this.tag} ${this.attributes} ${this.events}>\n                <img src="${this.img}" alt="${this.alt}">\n                <figcaption>${this.caption}</figcaption>            \n            </${this.tag}>\n        `}}class Os extends De{constructor(t="",e={}){let{style:r={}}=e;r.display="grid",["gap","templateRows","templateColumns","templateAreas","autoRows","autoColumns","autoFlow"].forEach((t=>{void 0!==e[t]&&(r[`grid-${Te(t)}`]=e[t])})),super(t,{...e,style:r})}}class Ts extends De{constructor(t="",e={}){let{style:r={}}=e;["rowStart","rowEnd","columnStart","columnEnd","area","column","row"].forEach((t=>{void 0!==e[t]&&(r[`grid-${Te(t)}`]=e[t])})),super(t,{...e,style:r}),e.tag&&(this.tag=e.tag)}}class js extends Le{tag="meta";selfAttributes(){return["content","name","http-equiv","charset"]}}const $s=t=>new js(t);class Cs extends De{tag="title"}const Ms=t=>new Cs(t);var Ns=Object.freeze({__proto__:null,BaseElement:Me,Tag:De,TagEmpty:Le,render:Ie,router:t=>new Fe(t),Router:Fe,createStyleElement:Re,createStyleSheet:Pe,addCssRule:He,addStyle:(t,e)=>{if("string"==typeof t)return void Re(t,e);const r=Pe(e);for(let e in t)He(r,e,$e(t[e]))},cssLoader:async(t,e)=>{let r,s,n=await fetch(t,e);if(!n.ok)throw new Error("HTTP error: "+n.status);r=await n.text(),s=document.createElement("style"),s.appendChild(document.createTextNode(r)),document.body.appendChild(s)},jsLoader:async(t,e)=>{let r,s,n=await fetch(t,e);if(!n.ok)throw new Error("HTTP error: "+n.status);r=await n.text(),s=document.createElement("script"),s.appendChild(document.createTextNode(r)),document.body.appendChild(s)},viewLoader:async(t,e={},r=!1)=>{let s,n,i;if(!1!==r&&(i=`htmljs::key::${t}`,n=localStorage.getItem(i)),!n){if(s=await fetch(t,e),!s.ok)throw new Error("HTTP error: "+s.status);n=await s.text(),!1!==r&&localStorage.setItem(i,n)}(0,eval)(`result = ${n}`)},clearViewStorageHolder:t=>localStorage.removeItem(`htmljs::key::${t}`),br:t=>new ze(t),Br:ze,hr:t=>new Ge(t),Hr:Ge,span:(t="",e={})=>new Be(t,e),Span:Be,Img:Ye,img:qe,img2:(t="",e="",r={})=>qe({...r,src:t,alt:e}),Input:We,input:(t={})=>new We(t),input2:(t="",e={})=>new We({...e,value:t}),heading:Qe,Heading:Ue,h1:(t="",e={})=>Qe("h1",t,e),h2:(t="",e={})=>Qe("h2",t,e),h3:(t="",e={})=>Qe("h3",t,e),h4:(t="",e={})=>Qe("h4",t,e),h5:(t="",e={})=>Qe("h5",t,e),h6:(t="",e={})=>Qe("h6",t,e),section:(t="",e={})=>new Ze(t,e),Section:Ze,anchor:(t="",e={})=>new Je(t,e),a:(t="#",e="",r={})=>new Je(e,{...r,href:t}),Anchor:Je,abbr:(t="",e={})=>new Ve(t,e),Abbr:Ve,article:(t="",e={})=>new Xe(t,e),Article:Xe,nav:(t="",e={})=>new Ke(t,e),Nav:Ke,aside:(t="",e={})=>new tr(t,e),Aside:tr,header:(t="",e={})=>new er(t,e),Header:er,footer:(t="",e={})=>new rr(t,e),Footer:rr,address:(t="",e={})=>new sr(t,e),Address:sr,map:(t="",e={})=>new nr(t,e),Map:nr,area:ar,Area:ir,area2:(t="#",e={})=>ar({...e,href:t}),audio:(t="",e={})=>new or(t,e),audio2:(t="",e="",r={})=>new or(e,{...r,src:t}),AudioTag:or,bold:(t="",e={})=>new lr(t,e),Bold:lr,bdi:(t="",e={})=>new ur(t,e),Bdi:ur,bdo:(t="",e={})=>new hr(t,e),Bdo:hr,blockquote:(t="",e={})=>new cr(t,e),Blockquote:cr,button:(t="",e={})=>new dr(t,e),Button:dr,canvas:(t="",e={})=>new pr(t,e),Canvas:pr,table:(t="",e={})=>new fr(t,e),Table:fr,caption:(t="",e={})=>new gr(t,e),Caption:gr,col:t=>new mr(t),Col:mr,colgroup:t=>new yr(t),Colgroup:yr,TableSection:br,TableCell:wr,thead:(t="",e={})=>new br("thead",t,e),tbody:(t="",e={})=>new br("tbody",t,e),tfoot:(t="",e={})=>new br("tfoot",t,e),td:(t="",e={})=>new wr("td",t,e),th:(t="",e={})=>new wr("th",t,e),tr:(t="",e={})=>new vr(t,e),TableRow:vr,cite:(t="",e={})=>new xr(t,e),Cite:xr,code:(t="",e={})=>new _r(t,e),Code:_r,dl:(t="",e={})=>new kr(t,e),dt:(t="",e={})=>new Sr(t,e),dd:(t="",e={})=>new Er(t,e),Dl:kr,Dt:Sr,Dd:Er,details:(t="",e={})=>new Ar(t,e),Details:Ar,summary:(t="",e={})=>new Or(t,e),Summary:Or,dfn:(t="",e={})=>new Tr(t,e),Dfn:Tr,div:(t="",e={})=>new jr(t,e),Div:jr,em:(t="",e={})=>new $r(t,e),Em:$r,ital:(t="",e={})=>new Cr(t,e),Ital:Cr,i:(t="",e={})=>new Cr(t,e),strong:(t="",e={})=>new Mr(t,e),Strong:Mr,embed:(t="",e={})=>new Nr(t,e),Embed:Nr,noembed:(t="",e={})=>new Dr(t,e),NoEmbed:Dr,fieldset:(t="",e={})=>new Lr(t,e),Fieldset:Lr,legend:(t="",e={})=>new Ir(t,e),Legend:Ir,figure:(t="",e={})=>new Fr(t,e),Figure:Fr,figcaption:(t="",e={})=>new Rr(t,e),FigCaption:Rr,form:(t="",e={})=>new Pr(t,e),Form:Pr,frame:(t={})=>new Br(t),frame2:(t="",e="",r={})=>new Br({...r,src:t,name:e}),frameset:(t="",e={})=>new Hr(t,e),Frame:Br,Frameset:Hr,noframes:(t="",e={})=>new Yr(t,e),NoFrames:Yr,iframe:(t="",e={})=>new qr(t,e),IFrame:qr,iframe2:(t="",e="",r="",s={})=>new qr(r,{...s,src:t,name:e}),ins:(t="",e={})=>new Wr(t,e),Ins:Wr,kbd:(t="",e={})=>new zr(t,e),Kbd:zr,label:Ur,label2:(t="",e="",r={})=>Ur(e,{...r,for:t}),Label:Gr,ul:(t="",e={})=>new Qr("ul",t,e),ol:(t="",e={})=>new Qr("ol",t,e),li:(t="",e={})=>new Zr(t,e),List:Qr,ListItem:Zr,mark:(t="",e={})=>new Jr(t,e),Mark:Jr,noscript:(t="",e={})=>new Vr(t,e),NoScript:Vr,select:(t="",e={})=>new Xr(t,e),Select:Xr,OptionGroup:Kr,optgroup:(t="",e={})=>new Kr(t,e),Option:ts,option:(t="",e="",r={})=>new ts(t,e,r),output:(t="",e={})=>new es(t,e),Output:es,p:(t="",e={})=>new rs(t,e),Paragraph:rs,paragraph:(t="",e={})=>new rs(t,e),pre:(t="",e={})=>new ss(t,e),Pre:ss,q:(t="",e={})=>new ns(t,e),Quoted:ns,s:(t="",e={})=>new is(t,e),strike:(t="",e={})=>new is(t,e),Strike:is,script:os,Script:as,script2:(t="",e="",r={})=>os(e,{...r,src:t}),small:(t="",e={})=>new ls(t,e),Small:ls,source:hs,Source:us,source2:(t="",e={})=>hs({...e,src:t}),sub:(t="",e={})=>new cs(t,e),Sub:cs,sup:(t="",e={})=>new ds(t,e),Sup:ds,textarea:(t="",e={})=>new ps(t,e),Textarea:ps,time:(t="",e={})=>new fs(t,e),Time:fs,track:ms,Track:gs,track2:(t="",e={})=>ms({...e,src:t}),variable:(t="",e={})=>new ys(t,e),Var:ys,video:vs,VideoTag:bs,video2:(t="",e="",r={})=>vs(e,{...r,src:t}),wbr:t=>new ws(t),Wbr:ws,main:(t="",e={})=>new xs(t,e),Main:xs,flexbox:(t,e)=>new _s(t,e),Flexbox:_s,margin:(t,e)=>new ks(t,e),Margin:ks,padding:(t,e)=>new Ss(t,e),Padding:Ss,center:(t,e)=>new Es(t,e),Center:Es,figureSimple:(t,e,r,s)=>new As(t,e,r,s),FigureSimple:As,cssGrid:(t,e)=>new Os(t,e),CssGrid:Os,cssGridItem:(t,e)=>new Ts(t,e),CssGridItem:Ts,meta:$s,Meta:js,addMeta:t=>{let e,r=document.head.querySelectorAll("meta"),s=$s(t);const n=["name","charset","http-equiv"];r.forEach((r=>{for(let s=0;s<n.length;s++)if(e=n[s],t[e]&&r.hasAttribute(e)&&r.getAttribute(e)===t[e])return void r.remove()})),Ie(s,document.head,{clear:!1})},title:Ms,Title:Cs,addTitle:t=>{let e=document.head.querySelector("title");e&&e.remove(),Ie(Ms(t),document.head,{clear:!1})}});var Ds={},Ls=a.default,Is="win32"===process.platform,Fs=i.default,Rs=process.env.NODE_DEBUG&&/fs/.test(process.env.NODE_DEBUG);function Ps(t){return"function"==typeof t?t:function(){var t;if(Rs){var e=new Error;t=function(t){t&&(e.message=t.message,r(t=e))}}else t=r;return t;function r(t){if(t){if(process.throwDeprecation)throw t;if(!process.noDeprecation){var e="fs: missing callback "+(t.stack||t.message);process.traceDeprecation?console.trace(e):console.error(e)}}}}()}if(Ls.normalize,Is)var Hs=/(.*?)(?:[\/\\]+|$)/g;else Hs=/(.*?)(?:[\/]+|$)/g;if(Is)var Bs=/^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;else Bs=/^[\/]*/;Ds.realpathSync=function(t,e){if(t=Ls.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return e[t];var r,s,n,i,a=t,o={},l={};function u(){var e=Bs.exec(t);r=e[0].length,s=e[0],n=e[0],i="",Is&&!l[n]&&(Fs.lstatSync(n),l[n]=!0)}for(u();r<t.length;){Hs.lastIndex=r;var h=Hs.exec(t);if(i=s,s+=h[0],n=i+h[1],r=Hs.lastIndex,!(l[n]||e&&e[n]===n)){var c;if(e&&Object.prototype.hasOwnProperty.call(e,n))c=e[n];else{var d=Fs.lstatSync(n);if(!d.isSymbolicLink()){l[n]=!0,e&&(e[n]=n);continue}var p=null;if(!Is){var f=d.dev.toString(32)+":"+d.ino.toString(32);o.hasOwnProperty(f)&&(p=o[f])}null===p&&(Fs.statSync(n),p=Fs.readlinkSync(n)),c=Ls.resolve(i,p),e&&(e[n]=c),Is||(o[f]=p)}t=Ls.resolve(c,t.slice(r)),u()}}return e&&(e[a]=t),t},Ds.realpath=function(t,e,r){if("function"!=typeof r&&(r=Ps(e),e=null),t=Ls.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return process.nextTick(r.bind(null,null,e[t]));var s,n,i,a,o=t,l={},u={};function h(){var e=Bs.exec(t);s=e[0].length,n=e[0],i=e[0],a="",Is&&!u[i]?Fs.lstat(i,(function(t){if(t)return r(t);u[i]=!0,c()})):process.nextTick(c)}function c(){if(s>=t.length)return e&&(e[o]=t),r(null,t);Hs.lastIndex=s;var l=Hs.exec(t);return a=n,n+=l[0],i=a+l[1],s=Hs.lastIndex,u[i]||e&&e[i]===i?process.nextTick(c):e&&Object.prototype.hasOwnProperty.call(e,i)?f(e[i]):Fs.lstat(i,d)}function d(t,s){if(t)return r(t);if(!s.isSymbolicLink())return u[i]=!0,e&&(e[i]=i),process.nextTick(c);if(!Is){var n=s.dev.toString(32)+":"+s.ino.toString(32);if(l.hasOwnProperty(n))return p(null,l[n],i)}Fs.stat(i,(function(t){if(t)return r(t);Fs.readlink(i,(function(t,e){Is||(l[n]=e),p(t,e)}))}))}function p(t,s,n){if(t)return r(t);var i=Ls.resolve(a,s);e&&(e[n]=i),f(i)}function f(e){t=Ls.resolve(e,t.slice(s)),h()}h()};var Ys=Js;Js.realpath=Js,Js.sync=Vs,Js.realpathSync=Vs,Js.monkeypatch=function(){qs.realpath=Js,qs.realpathSync=Vs},Js.unmonkeypatch=function(){qs.realpath=Ws,qs.realpathSync=zs};var qs=i.default,Ws=qs.realpath,zs=qs.realpathSync,Gs=process.version,Us=/^v[0-5]\./.test(Gs),Qs=Ds;function Zs(t){return t&&"realpath"===t.syscall&&("ELOOP"===t.code||"ENOMEM"===t.code||"ENAMETOOLONG"===t.code)}function Js(t,e,r){if(Us)return Ws(t,e,r);"function"==typeof e&&(r=e,e=null),Ws(t,e,(function(s,n){Zs(s)?Qs.realpath(t,e,r):r(s,n)}))}function Vs(t,e){if(Us)return zs(t,e);try{return zs(t,e)}catch(r){if(Zs(r))return Qs.realpathSync(t,e);throw r}}var Xs="object"==typeof process&&process&&"win32"===process.platform?{sep:"\\"}:{sep:"/"},Ks=tn;function tn(t,e,r){t instanceof RegExp&&(t=en(t,r)),e instanceof RegExp&&(e=en(e,r));var s=rn(t,e,r);return s&&{start:s[0],end:s[1],pre:r.slice(0,s[0]),body:r.slice(s[0]+t.length,s[1]),post:r.slice(s[1]+e.length)}}function en(t,e){var r=e.match(t);return r?r[0]:null}function rn(t,e,r){var s,n,i,a,o,l=r.indexOf(t),u=r.indexOf(e,l+1),h=l;if(l>=0&&u>0){if(t===e)return[l,u];for(s=[],i=r.length;h>=0&&!o;)h==l?(s.push(h),l=r.indexOf(t,h+1)):1==s.length?o=[s.pop(),u]:((n=s.pop())<i&&(i=n,a=u),u=r.indexOf(e,h+1)),h=l<u&&l>=0?l:u;s.length&&(o=[i,a])}return o}tn.range=rn;var sn=Ks,nn=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return bn(function(t){return t.split("\\\\").join(an).split("\\{").join(on).split("\\}").join(ln).split("\\,").join(un).split("\\.").join(hn)}(t),!0).map(dn)},an="\0SLASH"+Math.random()+"\0",on="\0OPEN"+Math.random()+"\0",ln="\0CLOSE"+Math.random()+"\0",un="\0COMMA"+Math.random()+"\0",hn="\0PERIOD"+Math.random()+"\0";function cn(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function dn(t){return t.split(an).join("\\").split(on).join("{").split(ln).join("}").split(un).join(",").split(hn).join(".")}function pn(t){if(!t)return[""];var e=[],r=sn("{","}",t);if(!r)return t.split(",");var s=r.pre,n=r.body,i=r.post,a=s.split(",");a[a.length-1]+="{"+n+"}";var o=pn(i);return i.length&&(a[a.length-1]+=o.shift(),a.push.apply(a,o)),e.push.apply(e,a),e}function fn(t){return"{"+t+"}"}function gn(t){return/^-?0\d/.test(t)}function mn(t,e){return t<=e}function yn(t,e){return t>=e}function bn(t,e){var r=[],s=sn("{","}",t);if(!s)return[t];var n=s.pre,i=s.post.length?bn(s.post,!1):[""];if(/\$$/.test(s.pre))for(var a=0;a<i.length;a++){var o=n+"{"+s.body+"}"+i[a];r.push(o)}else{var l,u,h=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),d=h||c,p=s.body.indexOf(",")>=0;if(!d&&!p)return s.post.match(/,.*\}/)?bn(t=s.pre+"{"+s.body+ln+s.post):[t];if(d)l=s.body.split(/\.\./);else if(1===(l=pn(s.body)).length&&1===(l=bn(l[0],!1).map(fn)).length)return i.map((function(t){return s.pre+l[0]+t}));if(d){var f=cn(l[0]),g=cn(l[1]),m=Math.max(l[0].length,l[1].length),y=3==l.length?Math.abs(cn(l[2])):1,b=mn;g<f&&(y*=-1,b=yn);var v=l.some(gn);u=[];for(var w=f;b(w,g);w+=y){var x;if(c)"\\"===(x=String.fromCharCode(w))&&(x="");else if(x=String(w),v){var _=m-x.length;if(_>0){var k=new Array(_+1).join("0");x=w<0?"-"+k+x.slice(1):k+x}}u.push(x)}}else{u=[];for(var S=0;S<l.length;S++)u.push.apply(u,bn(l[S],!1))}for(S=0;S<u.length;S++)for(a=0;a<i.length;a++){o=n+u[S]+i[a];(!e||d||o)&&r.push(o)}}return r}const vn=wn=(t,e,r={})=>(Nn(e),!(!r.nocomment&&"#"===e.charAt(0))&&new Fn(e,r).match(t));var wn=vn;const xn=Xs;vn.sep=xn.sep;const _n=Symbol("globstar **");vn.GLOBSTAR=_n;const kn=nn,Sn={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},En="[^/]",An=En+"*?",On=t=>t.split("").reduce(((t,e)=>(t[e]=!0,t)),{}),Tn=On("().*{}+?[]^$\\!"),jn=On("[.("),$n=/\/+/;vn.filter=(t,e={})=>(r,s,n)=>vn(r,t,e);const Cn=(t,e={})=>{const r={};return Object.keys(t).forEach((e=>r[e]=t[e])),Object.keys(e).forEach((t=>r[t]=e[t])),r};vn.defaults=t=>{if(!t||"object"!=typeof t||!Object.keys(t).length)return vn;const e=vn,r=(r,s,n)=>e(r,s,Cn(t,n));return(r.Minimatch=class extends e.Minimatch{constructor(e,r){super(e,Cn(t,r))}}).defaults=r=>e.defaults(Cn(t,r)).Minimatch,r.filter=(r,s)=>e.filter(r,Cn(t,s)),r.defaults=r=>e.defaults(Cn(t,r)),r.makeRe=(r,s)=>e.makeRe(r,Cn(t,s)),r.braceExpand=(r,s)=>e.braceExpand(r,Cn(t,s)),r.match=(r,s,n)=>e.match(r,s,Cn(t,n)),r},vn.braceExpand=(t,e)=>Mn(t,e);const Mn=(t,e={})=>(Nn(t),e.nobrace||!/\{(?:(?!\{).)*\}/.test(t)?[t]:kn(t)),Nn=t=>{if("string"!=typeof t)throw new TypeError("invalid pattern");if(t.length>65536)throw new TypeError("pattern is too long")},Dn=Symbol("subparse");vn.makeRe=(t,e)=>new Fn(t,e||{}).makeRe(),vn.match=(t,e,r={})=>{const s=new Fn(e,r);return t=t.filter((t=>s.match(t))),s.options.nonull&&!t.length&&t.push(e),t};const Ln=t=>t.replace(/\\([^-\]])/g,"$1"),In=t=>t.replace(/[[\]\\]/g,"\\$&");class Fn{constructor(t,e){Nn(t),e||(e={}),this.options=e,this.set=[],this.pattern=t,this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||!1===e.allowWindowsEscape,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.make()}debug(){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();let r=this.globSet=this.braceExpand();e.debug&&(this.debug=(...t)=>console.error(...t)),this.debug(this.pattern,r),r=this.globParts=r.map((t=>t.split($n))),this.debug(this.pattern,r),r=r.map(((t,e,r)=>t.map(this.parse,this))),this.debug(this.pattern,r),r=r.filter((t=>-1===t.indexOf(!1))),this.debug(this.pattern,r),this.set=r}parseNegate(){if(this.options.nonegate)return;const t=this.pattern;let e=!1,r=0;for(let s=0;s<t.length&&"!"===t.charAt(s);s++)e=!e,r++;r&&(this.pattern=t.slice(r)),this.negate=e}matchOne(t,e,r){var s=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var n=0,i=0,a=t.length,o=e.length;n<a&&i<o;n++,i++){this.debug("matchOne loop");var l,u=e[i],h=t[n];if(this.debug(e,u,h),!1===u)return!1;if(u===_n){this.debug("GLOBSTAR",[e,u,h]);var c=n,d=i+1;if(d===o){for(this.debug("** at the end");n<a;n++)if("."===t[n]||".."===t[n]||!s.dot&&"."===t[n].charAt(0))return!1;return!0}for(;c<a;){var p=t[c];if(this.debug("\nglobstar while",t,c,e,d,p),this.matchOne(t.slice(c),e.slice(d),r))return this.debug("globstar found match!",c,a,p),!0;if("."===p||".."===p||!s.dot&&"."===p.charAt(0)){this.debug("dot detected!",t,c,e,d);break}this.debug("globstar swallow a segment, and continue"),c++}return!(!r||(this.debug("\n>>> no match, partial?",t,c,e,d),c!==a))}if("string"==typeof u?(l=h===u,this.debug("string match",u,h,l)):(l=h.match(u),this.debug("pattern match",u,h,l)),!l)return!1}if(n===a&&i===o)return!0;if(n===a)return r;if(i===o)return n===a-1&&""===t[n];throw new Error("wtf?")}braceExpand(){return Mn(this.pattern,this.options)}parse(t,e){Nn(t);const r=this.options;if("**"===t){if(!r.noglobstar)return _n;t="*"}if(""===t)return"";let s="",n=!1,i=!1;const a=[],o=[];let l,u,h,c,d=!1,p=-1,f=-1,g="."===t.charAt(0),m=r.dot||g;const y=t=>"."===t.charAt(0)?"":r.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",b=()=>{if(l){switch(l){case"*":s+=An,n=!0;break;case"?":s+=En,n=!0;break;default:s+="\\"+l}this.debug("clearStateChar %j %j",l,s),l=!1}};for(let e,c=0;c<t.length&&(e=t.charAt(c));c++)if(this.debug("%s\t%s %s %j",t,c,s,e),i){if("/"===e)return!1;Tn[e]&&(s+="\\"),s+=e,i=!1}else switch(e){case"/":return!1;case"\\":if(d&&"-"===t.charAt(c+1)){s+=e;continue}b(),i=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,c,s,e),d){this.debug("  in class"),"!"===e&&c===f+1&&(e="^"),s+=e;continue}this.debug("call clearStateChar %j",l),b(),l=e,r.noext&&b();continue;case"(":{if(d){s+="(";continue}if(!l){s+="\\(";continue}const e={type:l,start:c-1,reStart:s.length,open:Sn[l].open,close:Sn[l].close};this.debug(this.pattern,"\t",e),a.push(e),s+=e.open,0===e.start&&"!"!==e.type&&(g=!0,s+=y(t.slice(c+1))),this.debug("plType %j %j",l,s),l=!1;continue}case")":{const t=a[a.length-1];if(d||!t){s+="\\)";continue}a.pop(),b(),n=!0,h=t,s+=h.close,"!"===h.type&&o.push(Object.assign(h,{reEnd:s.length}));continue}case"|":{const e=a[a.length-1];if(d||!e){s+="\\|";continue}b(),s+="|",0===e.start&&"!"!==e.type&&(g=!0,s+=y(t.slice(c+1)));continue}case"[":if(b(),d){s+="\\"+e;continue}d=!0,f=c,p=s.length,s+=e;continue;case"]":if(c===f+1||!d){s+="\\"+e;continue}u=t.substring(f+1,c);try{RegExp("["+In(Ln(u))+"]"),s+=e}catch(t){s=s.substring(0,p)+"(?:$.)"}n=!0,d=!1;continue;default:b(),!Tn[e]||"^"===e&&d||(s+="\\"),s+=e}for(d&&(u=t.slice(f+1),c=this.parse(u,Dn),s=s.substring(0,p)+"\\["+c[0],n=n||c[1]),h=a.pop();h;h=a.pop()){let t;t=s.slice(h.reStart+h.open.length),this.debug("setting tail",s,h),t=t.replace(/((?:\\{2}){0,64})(\\?)\|/g,((t,e,r)=>(r||(r="\\"),e+e+r+"|"))),this.debug("tail=%j\n   %s",t,t,h,s);const e="*"===h.type?An:"?"===h.type?En:"\\"+h.type;n=!0,s=s.slice(0,h.reStart)+e+"\\("+t}b(),i&&(s+="\\\\");const v=jn[s.charAt(0)];for(let t=o.length-1;t>-1;t--){const r=o[t],n=s.slice(0,r.reStart),i=s.slice(r.reStart,r.reEnd-8);let a=s.slice(r.reEnd);const l=s.slice(r.reEnd-8,r.reEnd)+a,u=n.split(")").length,h=n.split("(").length-u;let c=a;for(let t=0;t<h;t++)c=c.replace(/\)[+*?]?/,"");a=c;s=n+i+a+(""===a&&e!==Dn?"(?:$|\\/)":"")+l}if(""!==s&&n&&(s="(?=.)"+s),v&&(s=(g?"":m?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)")+s),e===Dn)return[s,n];if(r.nocase&&!n&&(n=t.toUpperCase()!==t.toLowerCase()),!n)return(t=>t.replace(/\\(.)/g,"$1"))(t);const w=r.nocase?"i":"";try{return Object.assign(new RegExp("^"+s+"$",w),{_glob:t,_src:s})}catch(t){return new RegExp("$.")}}makeRe(){if(this.regexp||!1===this.regexp)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,r=e.noglobstar?An:e.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",s=e.nocase?"i":"";let n=t.map((t=>(t=t.map((t=>"string"==typeof t?(t=>t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))(t):t===_n?_n:t._src)).reduce(((t,e)=>(t[t.length-1]===_n&&e===_n||t.push(e),t)),[]),t.forEach(((e,s)=>{e===_n&&t[s-1]!==_n&&(0===s?t.length>1?t[s+1]="(?:\\/|"+r+"\\/)?"+t[s+1]:t[s]=r:s===t.length-1?t[s-1]+="(?:\\/|"+r+")?":(t[s-1]+="(?:\\/|\\/"+r+"\\/)"+t[s+1],t[s+1]=_n))})),t.filter((t=>t!==_n)).join("/")))).join("|");n="^(?:"+n+")$",this.negate&&(n="^(?!"+n+").*$");try{this.regexp=new RegExp(n,s)}catch(t){this.regexp=!1}return this.regexp}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;const r=this.options;"/"!==xn.sep&&(t=t.split(xn.sep).join("/")),t=t.split($n),this.debug(this.pattern,"split",t);const s=this.set;let n;this.debug(this.pattern,"set",s);for(let e=t.length-1;e>=0&&(n=t[e],!n);e--);for(let i=0;i<s.length;i++){const a=s[i];let o=t;r.matchBase&&1===a.length&&(o=[n]);if(this.matchOne(o,a,e))return!!r.flipNegate||!this.negate}return!r.flipNegate&&this.negate}static defaults(t){return vn.defaults(t).Minimatch}}vn.Minimatch=Fn;var Rn={},Pn={get exports(){return Rn},set exports(t){Rn=t}};"function"==typeof Object.create?Pn.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:Pn.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}};var Hn={};function Bn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}Hn.setopts=function(t,e,r){r||(r={});if(r.matchBase&&-1===e.indexOf("/")){if(r.noglobstar)throw new Error("base matching requires globstar");e="**/"+e}t.windowsPathsNoEscape=!!r.windowsPathsNoEscape||!1===r.allowWindowsEscape,t.windowsPathsNoEscape&&(e=e.replace(/\\/g,"/"));t.silent=!!r.silent,t.pattern=e,t.strict=!1!==r.strict,t.realpath=!!r.realpath,t.realpathCache=r.realpathCache||Object.create(null),t.follow=!!r.follow,t.dot=!!r.dot,t.mark=!!r.mark,t.nodir=!!r.nodir,t.nodir&&(t.mark=!0);t.sync=!!r.sync,t.nounique=!!r.nounique,t.nonull=!!r.nonull,t.nosort=!!r.nosort,t.nocase=!!r.nocase,t.stat=!!r.stat,t.noprocess=!!r.noprocess,t.absolute=!!r.absolute,t.fs=r.fs||Wn,t.maxLength=r.maxLength||1/0,t.cache=r.cache||Object.create(null),t.statCache=r.statCache||Object.create(null),t.symlinks=r.symlinks||Object.create(null),function(t,e){t.ignore=e.ignore||[],Array.isArray(t.ignore)||(t.ignore=[t.ignore]);t.ignore.length&&(t.ignore=t.ignore.map(Jn))}(t,r),t.changedCwd=!1;var s=process.cwd();Bn(r,"cwd")?(t.cwd=zn.resolve(r.cwd),t.changedCwd=t.cwd!==s):t.cwd=zn.resolve(s);t.root=r.root||zn.resolve(t.cwd,"/"),t.root=zn.resolve(t.root),t.cwdAbs=Un(t.cwd)?t.cwd:Vn(t,t.cwd),t.nomount=!!r.nomount,"win32"===process.platform&&(t.root=t.root.replace(/\\/g,"/"),t.cwd=t.cwd.replace(/\\/g,"/"),t.cwdAbs=t.cwdAbs.replace(/\\/g,"/"));r.nonegate=!0,r.nocomment=!0,t.minimatch=new Qn(e,r),t.options=t.minimatch.options},Hn.ownProp=Bn,Hn.makeAbs=Vn,Hn.finish=function(t){for(var e=t.nounique,r=e?[]:Object.create(null),s=0,n=t.matches.length;s<n;s++){var i=t.matches[s];if(i&&0!==Object.keys(i).length){var a=Object.keys(i);e?r.push.apply(r,a):a.forEach((function(t){r[t]=!0}))}else if(t.nonull){var o=t.minimatch.globSet[s];e?r.push(o):r[o]=!0}}e||(r=Object.keys(r));t.nosort||(r=r.sort(Zn));if(t.mark){for(s=0;s<r.length;s++)r[s]=t._mark(r[s]);t.nodir&&(r=r.filter((function(e){var r=!/\/$/.test(e),s=t.cache[e]||t.cache[Vn(t,e)];return r&&s&&(r="DIR"!==s&&!Array.isArray(s)),r})))}t.ignore.length&&(r=r.filter((function(e){return!Xn(t,e)})));t.found=r},Hn.mark=function(t,e){var r=Vn(t,e),s=t.cache[r],n=e;if(s){var i="DIR"===s||Array.isArray(s),a="/"===e.slice(-1);if(i&&!a?n+="/":!i&&a&&(n=n.slice(0,-1)),n!==e){var o=Vn(t,n);t.statCache[o]=t.statCache[r],t.cache[o]=t.cache[r]}}return n},Hn.isIgnored=Xn,Hn.childrenIgnored=function(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return!(!t.gmatcher||!t.gmatcher.match(e))}))};var Yn,qn,Wn=i.default,zn=a.default,Gn=wn,Un=a.default.isAbsolute,Qn=Gn.Minimatch;function Zn(t,e){return t.localeCompare(e,"en")}function Jn(t){var e=null;if("/**"===t.slice(-3)){var r=t.replace(/(\/\*\*)+$/,"");e=new Qn(r,{dot:!0})}return{matcher:new Qn(t,{dot:!0}),gmatcher:e}}function Vn(t,e){var r=e;return r="/"===e.charAt(0)?zn.join(t.root,e):Un(e)||""===e?e:t.changedCwd?zn.resolve(t.cwd,e):zn.resolve(e),"win32"===process.platform&&(r=r.replace(/\\/g,"/")),r}function Xn(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return t.matcher.match(e)||!(!t.gmatcher||!t.gmatcher.match(e))}))}var Kn=function t(e,r){if(e&&r)return t(e)(r);if("function"!=typeof e)throw new TypeError("need wrapper function");return Object.keys(e).forEach((function(t){s[t]=e[t]})),s;function s(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];var s=e.apply(this,t),n=t[t.length-1];return"function"==typeof s&&s!==n&&Object.keys(n).forEach((function(t){s[t]=n[t]})),s}};var ti={},ei=Kn;function ri(t){var e=function(){return e.called?e.value:(e.called=!0,e.value=t.apply(this,arguments))};return e.called=!1,e}function si(t){var e=function(){if(e.called)throw new Error(e.onceError);return e.called=!0,e.value=t.apply(this,arguments)},r=t.name||"Function wrapped with `once`";return e.onceError=r+" shouldn't be called more than once",e.called=!1,e}({get exports(){return ti},set exports(t){ti=t}}).exports=ei(ri),ti.strict=ei(si),ri.proto=ri((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return ri(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return si(this)},configurable:!0})}));var ni,ii,ai=Kn,oi=Object.create(null),li=ti,ui=ai((function(t,e){return oi[t]?(oi[t].push(e),null):(oi[t]=[e],function(t){return li((function e(){var r=oi[t],s=r.length,n=function(t){for(var e=t.length,r=[],s=0;s<e;s++)r[s]=t[s];return r}(arguments);try{for(var i=0;i<s;i++)r[i].apply(null,n)}finally{r.length>s?(r.splice(0,s),process.nextTick((function(){e.apply(null,n)}))):delete oi[t]}}))}(t))}));function hi(){if(ii)return ni;ii=1,ni=b;var t=Ys,e=wn;e.Minimatch;var r=Rn,s=o.default.EventEmitter,n=a.default,i=l.default,u=a.default.isAbsolute,h=function(){if(qn)return Yn;qn=1,Yn=d,d.GlobSync=p;var t=Ys,e=wn;e.Minimatch,hi().Glob;var r=a.default,s=l.default,n=a.default.isAbsolute,i=Hn,o=i.setopts,u=i.ownProp,h=i.childrenIgnored,c=i.isIgnored;function d(t,e){if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");return new p(t,e).found}function p(t,e){if(!t)throw new Error("must provide pattern");if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");if(!(this instanceof p))return new p(t,e);if(o(this,t,e),this.noprocess)return this;var r=this.minimatch.set.length;this.matches=new Array(r);for(var s=0;s<r;s++)this._process(this.minimatch.set[s],s,!1);this._finish()}return p.prototype._finish=function(){if(s.ok(this instanceof p),this.realpath){var e=this;this.matches.forEach((function(r,s){var n=e.matches[s]=Object.create(null);for(var i in r)try{i=e._makeAbs(i),n[t.realpathSync(i,e.realpathCache)]=!0}catch(t){if("stat"!==t.syscall)throw t;n[e._makeAbs(i)]=!0}}))}i.finish(this)},p.prototype._process=function(t,r,i){s.ok(this instanceof p);for(var a,o=0;"string"==typeof t[o];)o++;switch(o){case t.length:return void this._processSimple(t.join("/"),r);case 0:a=null;break;default:a=t.slice(0,o).join("/")}var l,u=t.slice(o);null===a?l=".":n(a)||n(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(a&&n(a)||(a="/"+a),l=a):l=a;var c=this._makeAbs(l);h(this,l)||(u[0]===e.GLOBSTAR?this._processGlobStar(a,l,c,u,r,i):this._processReaddir(a,l,c,u,r,i))},p.prototype._processReaddir=function(t,e,s,n,i,a){var o=this._readdir(s,a);if(o){for(var l=n[0],u=!!this.minimatch.negate,h=l._glob,c=this.dot||"."===h.charAt(0),d=[],p=0;p<o.length;p++)("."!==(m=o[p]).charAt(0)||c)&&(u&&!t?!m.match(l):m.match(l))&&d.push(m);var f=d.length;if(0!==f)if(1!==n.length||this.mark||this.stat)for(n.shift(),p=0;p<f;p++){var g;m=d[p],g=t?[t,m]:[m],this._process(g.concat(n),i,a)}else{this.matches[i]||(this.matches[i]=Object.create(null));for(p=0;p<f;p++){var m=d[p];t&&(m="/"!==t.slice(-1)?t+"/"+m:t+m),"/"!==m.charAt(0)||this.nomount||(m=r.join(this.root,m)),this._emitMatch(i,m)}}}},p.prototype._emitMatch=function(t,e){if(!c(this,e)){var r=this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=r),!this.matches[t][e]){if(this.nodir){var s=this.cache[r];if("DIR"===s||Array.isArray(s))return}this.matches[t][e]=!0,this.stat&&this._stat(e)}}},p.prototype._readdirInGlobStar=function(t){if(this.follow)return this._readdir(t,!1);var e,r;try{r=this.fs.lstatSync(t)}catch(t){if("ENOENT"===t.code)return null}var s=r&&r.isSymbolicLink();return this.symlinks[t]=s,s||!r||r.isDirectory()?e=this._readdir(t,!1):this.cache[t]="FILE",e},p.prototype._readdir=function(t,e){if(e&&!u(this.symlinks,t))return this._readdirInGlobStar(t);if(u(this.cache,t)){var r=this.cache[t];if(!r||"FILE"===r)return null;if(Array.isArray(r))return r}try{return this._readdirEntries(t,this.fs.readdirSync(t))}catch(e){return this._readdirError(t,e),null}},p.prototype._readdirEntries=function(t,e){if(!this.mark&&!this.stat)for(var r=0;r<e.length;r++){var s=e[r];s="/"===t?t+s:t+"/"+s,this.cache[s]=!0}return this.cache[t]=e,e},p.prototype._readdirError=function(t,e){switch(e.code){case"ENOTSUP":case"ENOTDIR":var r=this._makeAbs(t);if(this.cache[r]="FILE",r===this.cwdAbs){var s=new Error(e.code+" invalid cwd "+this.cwd);throw s.path=this.cwd,s.code=e.code,s}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:if(this.cache[this._makeAbs(t)]=!1,this.strict)throw e;this.silent||console.error("glob error",e)}},p.prototype._processGlobStar=function(t,e,r,s,n,i){var a=this._readdir(r,i);if(a){var o=s.slice(1),l=t?[t]:[],u=l.concat(o);this._process(u,n,!1);var h=a.length;if(!this.symlinks[r]||!i)for(var c=0;c<h;c++)if("."!==a[c].charAt(0)||this.dot){var d=l.concat(a[c],o);this._process(d,n,!0);var p=l.concat(a[c],s);this._process(p,n,!0)}}},p.prototype._processSimple=function(t,e){var s=this._stat(t);if(this.matches[e]||(this.matches[e]=Object.create(null)),s){if(t&&n(t)&&!this.nomount){var i=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=r.join(this.root,t):(t=r.resolve(this.root,t),i&&(t+="/"))}"win32"===process.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t)}},p.prototype._stat=function(t){var e=this._makeAbs(t),r="/"===t.slice(-1);if(t.length>this.maxLength)return!1;if(!this.stat&&u(this.cache,e)){var s=this.cache[e];if(Array.isArray(s)&&(s="DIR"),!r||"DIR"===s)return s;if(r&&"FILE"===s)return!1}var n=this.statCache[e];if(!n){var i;try{i=this.fs.lstatSync(e)}catch(t){if(t&&("ENOENT"===t.code||"ENOTDIR"===t.code))return this.statCache[e]=!1,!1}if(i&&i.isSymbolicLink())try{n=this.fs.statSync(e)}catch(t){n=i}else n=i}return this.statCache[e]=n,s=!0,n&&(s=n.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||s,(!r||"FILE"!==s)&&s},p.prototype._mark=function(t){return i.mark(this,t)},p.prototype._makeAbs=function(t){return i.makeAbs(this,t)},Yn}(),c=Hn,d=c.setopts,p=c.ownProp,f=ui,g=c.childrenIgnored,m=c.isIgnored,y=ti;function b(t,e,r){if("function"==typeof e&&(r=e,e={}),e||(e={}),e.sync){if(r)throw new TypeError("callback provided to sync glob");return h(t,e)}return new w(t,e,r)}b.sync=h;var v=b.GlobSync=h.GlobSync;function w(t,e,r){if("function"==typeof e&&(r=e,e=null),e&&e.sync){if(r)throw new TypeError("callback provided to sync glob");return new v(t,e)}if(!(this instanceof w))return new w(t,e,r);d(this,t,e),this._didRealPath=!1;var s=this.minimatch.set.length;this.matches=new Array(s),"function"==typeof r&&(r=y(r),this.on("error",r),this.on("end",(function(t){r(null,t)})));var n=this;if(this._processing=0,this._emitQueue=[],this._processQueue=[],this.paused=!1,this.noprocess)return this;if(0===s)return o();for(var i=!0,a=0;a<s;a++)this._process(this.minimatch.set[a],a,!1,o);function o(){--n._processing,n._processing<=0&&(i?process.nextTick((function(){n._finish()})):n._finish())}i=!1}return b.glob=b,b.hasMagic=function(t,e){var r=function(t,e){if(null===e||"object"!=typeof e)return t;for(var r=Object.keys(e),s=r.length;s--;)t[r[s]]=e[r[s]];return t}({},e);r.noprocess=!0;var s=new w(t,r).minimatch.set;if(!t)return!1;if(s.length>1)return!0;for(var n=0;n<s[0].length;n++)if("string"!=typeof s[0][n])return!0;return!1},b.Glob=w,r(w,s),w.prototype._finish=function(){if(i(this instanceof w),!this.aborted){if(this.realpath&&!this._didRealpath)return this._realpath();c.finish(this),this.emit("end",this.found)}},w.prototype._realpath=function(){if(!this._didRealpath){this._didRealpath=!0;var t=this.matches.length;if(0===t)return this._finish();for(var e=this,r=0;r<this.matches.length;r++)this._realpathSet(r,s)}function s(){0==--t&&e._finish()}},w.prototype._realpathSet=function(e,r){var s=this.matches[e];if(!s)return r();var n=Object.keys(s),i=this,a=n.length;if(0===a)return r();var o=this.matches[e]=Object.create(null);n.forEach((function(s,n){s=i._makeAbs(s),t.realpath(s,i.realpathCache,(function(t,n){t?"stat"===t.syscall?o[s]=!0:i.emit("error",t):o[n]=!0,0==--a&&(i.matches[e]=o,r())}))}))},w.prototype._mark=function(t){return c.mark(this,t)},w.prototype._makeAbs=function(t){return c.makeAbs(this,t)},w.prototype.abort=function(){this.aborted=!0,this.emit("abort")},w.prototype.pause=function(){this.paused||(this.paused=!0,this.emit("pause"))},w.prototype.resume=function(){if(this.paused){if(this.emit("resume"),this.paused=!1,this._emitQueue.length){var t=this._emitQueue.slice(0);this._emitQueue.length=0;for(var e=0;e<t.length;e++){var r=t[e];this._emitMatch(r[0],r[1])}}if(this._processQueue.length){var s=this._processQueue.slice(0);this._processQueue.length=0;for(e=0;e<s.length;e++){var n=s[e];this._processing--,this._process(n[0],n[1],n[2],n[3])}}}},w.prototype._process=function(t,r,s,n){if(i(this instanceof w),i("function"==typeof n),!this.aborted)if(this._processing++,this.paused)this._processQueue.push([t,r,s,n]);else{for(var a,o=0;"string"==typeof t[o];)o++;switch(o){case t.length:return void this._processSimple(t.join("/"),r,n);case 0:a=null;break;default:a=t.slice(0,o).join("/")}var l,h=t.slice(o);null===a?l=".":u(a)||u(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(a&&u(a)||(a="/"+a),l=a):l=a;var c=this._makeAbs(l);if(g(this,l))return n();h[0]===e.GLOBSTAR?this._processGlobStar(a,l,c,h,r,s,n):this._processReaddir(a,l,c,h,r,s,n)}},w.prototype._processReaddir=function(t,e,r,s,n,i,a){var o=this;this._readdir(r,i,(function(l,u){return o._processReaddir2(t,e,r,s,n,i,u,a)}))},w.prototype._processReaddir2=function(t,e,r,s,i,a,o,l){if(!o)return l();for(var u=s[0],h=!!this.minimatch.negate,c=u._glob,d=this.dot||"."===c.charAt(0),p=[],f=0;f<o.length;f++){if("."!==(m=o[f]).charAt(0)||d)(h&&!t?!m.match(u):m.match(u))&&p.push(m)}var g=p.length;if(0===g)return l();if(1===s.length&&!this.mark&&!this.stat){this.matches[i]||(this.matches[i]=Object.create(null));for(f=0;f<g;f++){var m=p[f];t&&(m="/"!==t?t+"/"+m:t+m),"/"!==m.charAt(0)||this.nomount||(m=n.join(this.root,m)),this._emitMatch(i,m)}return l()}s.shift();for(f=0;f<g;f++){m=p[f];t&&(m="/"!==t?t+"/"+m:t+m),this._process([m].concat(s),i,a,l)}l()},w.prototype._emitMatch=function(t,e){if(!this.aborted&&!m(this,e))if(this.paused)this._emitQueue.push([t,e]);else{var r=u(e)?e:this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=r),!this.matches[t][e]){if(this.nodir){var s=this.cache[r];if("DIR"===s||Array.isArray(s))return}this.matches[t][e]=!0;var n=this.statCache[r];n&&this.emit("stat",e,n),this.emit("match",e)}}},w.prototype._readdirInGlobStar=function(t,e){if(!this.aborted){if(this.follow)return this._readdir(t,!1,e);var r=this,s=f("lstat\0"+t,(function(s,n){if(s&&"ENOENT"===s.code)return e();var i=n&&n.isSymbolicLink();r.symlinks[t]=i,i||!n||n.isDirectory()?r._readdir(t,!1,e):(r.cache[t]="FILE",e())}));s&&r.fs.lstat(t,s)}},w.prototype._readdir=function(t,e,r){if(!this.aborted&&(r=f("readdir\0"+t+"\0"+e,r))){if(e&&!p(this.symlinks,t))return this._readdirInGlobStar(t,r);if(p(this.cache,t)){var s=this.cache[t];if(!s||"FILE"===s)return r();if(Array.isArray(s))return r(null,s)}this.fs.readdir(t,function(t,e,r){return function(s,n){s?t._readdirError(e,s,r):t._readdirEntries(e,n,r)}}(this,t,r))}},w.prototype._readdirEntries=function(t,e,r){if(!this.aborted){if(!this.mark&&!this.stat)for(var s=0;s<e.length;s++){var n=e[s];n="/"===t?t+n:t+"/"+n,this.cache[n]=!0}return this.cache[t]=e,r(null,e)}},w.prototype._readdirError=function(t,e,r){if(!this.aborted){switch(e.code){case"ENOTSUP":case"ENOTDIR":var s=this._makeAbs(t);if(this.cache[s]="FILE",s===this.cwdAbs){var n=new Error(e.code+" invalid cwd "+this.cwd);n.path=this.cwd,n.code=e.code,this.emit("error",n),this.abort()}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:this.cache[this._makeAbs(t)]=!1,this.strict&&(this.emit("error",e),this.abort()),this.silent||console.error("glob error",e)}return r()}},w.prototype._processGlobStar=function(t,e,r,s,n,i,a){var o=this;this._readdir(r,i,(function(l,u){o._processGlobStar2(t,e,r,s,n,i,u,a)}))},w.prototype._processGlobStar2=function(t,e,r,s,n,i,a,o){if(!a)return o();var l=s.slice(1),u=t?[t]:[],h=u.concat(l);this._process(h,n,!1,o);var c=this.symlinks[r],d=a.length;if(c&&i)return o();for(var p=0;p<d;p++){if("."!==a[p].charAt(0)||this.dot){var f=u.concat(a[p],l);this._process(f,n,!0,o);var g=u.concat(a[p],s);this._process(g,n,!0,o)}}o()},w.prototype._processSimple=function(t,e,r){var s=this;this._stat(t,(function(n,i){s._processSimple2(t,e,n,i,r)}))},w.prototype._processSimple2=function(t,e,r,s,i){if(this.matches[e]||(this.matches[e]=Object.create(null)),!s)return i();if(t&&u(t)&&!this.nomount){var a=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=n.join(this.root,t):(t=n.resolve(this.root,t),a&&(t+="/"))}"win32"===process.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t),i()},w.prototype._stat=function(t,e){var r=this._makeAbs(t),s="/"===t.slice(-1);if(t.length>this.maxLength)return e();if(!this.stat&&p(this.cache,r)){var n=this.cache[r];if(Array.isArray(n)&&(n="DIR"),!s||"DIR"===n)return e(null,n);if(s&&"FILE"===n)return e()}var i=this.statCache[r];if(void 0!==i){if(!1===i)return e(null,i);var a=i.isDirectory()?"DIR":"FILE";return s&&"FILE"===a?e():e(null,a,i)}var o=this,l=f("stat\0"+r,(function(s,n){if(n&&n.isSymbolicLink())return o.fs.stat(r,(function(s,i){s?o._stat2(t,r,null,n,e):o._stat2(t,r,s,i,e)}));o._stat2(t,r,s,n,e)}));l&&o.fs.lstat(r,l)},w.prototype._stat2=function(t,e,r,s,n){if(r&&("ENOENT"===r.code||"ENOTDIR"===r.code))return this.statCache[e]=!1,n();var i="/"===t.slice(-1);if(this.statCache[e]=s,"/"===e.slice(-1)&&s&&!s.isDirectory())return n(null,!1,s);var a=!0;return s&&(a=s.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||a,i&&"FILE"===a?n():n(null,a,s)},ni}hi();const ci={removeCloakTimeout:1e3};globalThis.Metro=new class{version="5.0.0";status="pre-alpha";plugins={};options={};constructor(t={}){this.options=c({},ci,t),this.info(),this.init(),this.observe()}info(){console.info(`Metro UI - v${this.version}-${this.status}`),console.info("Include: Query, Datetime, String, Html.")}init(){globalThis.Datetime=C,globalThis.datetime=M,globalThis.Str=Rt,globalThis.string=Pt,globalThis.$=Oe,globalThis.Query=ke,globalThis.query=Se,globalThis.html={...Ns},globalThis.__htmlSaver={},globalThis.html.extract=(t=globalThis)=>{for(let e in globalThis.html)globalThis.__htmlSaver[e]=globalThis[e],t[e]=globalThis.html[e]},globalThis.html.restore=(t=globalThis)=>{for(let e in globalThis.__htmlSaver)t[e]=globalThis.__htmlSaver[e]};$("[data-role]").each(((t,e)=>{const r=e.getAttribute("data-role").replace(","," ").split(" ").map((t=>t.trim())).filter((t=>!!t));for(let t of r)this.makePlugin(e,t,{})})),$((()=>{const t=$("body");t.hasClass("cloak")&&(t.addClass("remove-cloak"),setTimeout((()=>{t.removeClass("cloak remove-cloak")}),this.options.removeCloakTimeout))}))}observe(){const t=this;new MutationObserver((function(e){e.map((function(e){const r=e.target,s=$(r);if("attributes"===e.type){const n=e.attributeName,i=s.attr(n),a=e.oldValue;if("data-role"!==e.attributeName){const e=s.attr("data-role");if(e)for(let o of e.split(" "))s.hasAttr(`data-role-${name}`)&&!0===s.attr(`data-role-${name}`)&&t.getPlugin(r,o).updateAttr(n,i,a)}}else if("childList"===e.type&&e.addedNodes.length){const r=e.addedNodes;if(r.length)for(let e of r){const r=$(e);r.hasAttr("data-role")&&t.makePlugin(e,r.attr("data-role"))}}}))})).observe($("html")[0],{childList:!0,attributes:!0,subtree:!0})}getPlugin(t,e){return this.plugins[btoa(`${e}::${JSON.stringify(t)}`)]}makePlugin(t,e,r){const s=btoa(`${e}::${JSON.stringify(t)}`);if($(t).hasAttr(`data-role-${e}`)&&!0===$(t).attr(`data-role-${e}`))return this.plugins[s];const n=u.getClass(e);if(!n)throw new Error(`Can't create component ${e}`);const i=new n(t,r);return this.plugins[s]=i,t.setAttribute(`data-role-${e}`,!0),i}destroyPlugin(t,e){const r=btoa(`${e}::${JSON.stringify(t)}`),s=this.plugins[r];s&&(s.destroy(),s.component.remove(),delete this.plugins[r])}}}(require$$0,require$$4,require$$3,require$$5)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cm81Lm1pbi5qcyIsInNvdXJjZXMiOlsibWV0cm81LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAocmVxdWlyZSQkMCwgcmVxdWlyZSQkNCwgcmVxdWlyZSQkMywgcmVxdWlyZSQkNSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG4gICAgdmFyIHJlcXVpcmUkJDBfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KHJlcXVpcmUkJDApO1xuICAgIHZhciByZXF1aXJlJCQ0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShyZXF1aXJlJCQ0KTtcbiAgICB2YXIgcmVxdWlyZSQkM19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kocmVxdWlyZSQkMyk7XG4gICAgdmFyIHJlcXVpcmUkJDVfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KHJlcXVpcmUkJDUpO1xuXG4gICAgY29uc3QgZGVidWcgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICFhcmdzLmxlbmd0aCA/IGNvbnNvbGUubG9nKCdIaSEnKSA6IGFyZ3MubGVuZ3RoID09PSAxID8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYXJnc1swXSwgbnVsbCwgMikpIDogY29uc29sZS5sb2coLi4uYXJncyk7XHJcbiAgICB9O1xuXG4gICAgZ2xvYmFsVGhpcy5NRVRSTzVfQ09NUE9ORU5UU19SRUdJU1RSWSA9IHt9O1xyXG5cclxuICAgIGNvbnN0IFJlZ2lzdHJ5ID0ge1xyXG4gICAgICAgIHJlZ2lzdGVyKG5hbWUsIF9jbGFzcyl7XHJcbiAgICAgICAgICAgIGlmIChNRVRSTzVfQ09NUE9ORU5UU19SRUdJU1RSWVtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTUVUUk81X0NPTVBPTkVOVFNfUkVHSVNUUllbbmFtZV0gPSBfY2xhc3M7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdW5yZWdpc3RlcihuYW1lLCBfY2xhc3Mpe1xyXG4gICAgICAgICAgICBpZiAoIU1FVFJPNV9DT01QT05FTlRTX1JFR0lTVFJZW25hbWVdIHx8IE1FVFJPNV9DT01QT05FTlRTX1JFR0lTVFJZW25hbWVdICE9PSBfY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSBNRVRSTzVfQ09NUE9ORU5UU19SRUdJU1RSWVtuYW1lXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRDbGFzcyhuYW1lKXtcclxuICAgICAgICAgICAgcmV0dXJuIE1FVFJPNV9DT01QT05FTlRTX1JFR0lTVFJZW25hbWVdXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0UmVnaXN0cnkoKXtcclxuICAgICAgICAgICAgcmV0dXJuIE1FVFJPNV9DT01QT05FTlRTX1JFR0lTVFJZXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZHVtcCgpe1xyXG4gICAgICAgICAgICBkZWJ1ZyhNRVRSTzVfQ09NUE9ORU5UU19SRUdJU1RSWSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IGlzT2JqZWN0ID0gaXRlbSA9PiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaXRlbSkpO1xuXG4gICAgY29uc3QgbWVyZ2UgPSAodGFyZ2V0LCAuLi5zb3VyY2VzKSA9PiB7XHJcbiAgICAgICAgaWYgKCFzb3VyY2VzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgIGlmIChpc09iamVjdCh0YXJnZXQpICYmIGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHt9IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7IFtrZXldOiBzb3VyY2Vba2V5XSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlKHRhcmdldCwgLi4uc291cmNlcyk7XHJcbiAgICB9O1xuXG4gICAgY29uc3QgaXNOdW0gPSB2ID0+ICFpc05hTih2KTtcblxuICAgIGNvbnN0IERFRkFVTFRfRk9STUFUID0gXCJZWVlZLU1NLUREVEhIOm1tOnNzLnNzc1wiO1xyXG4gICAgY29uc3QgSU5WQUxJRF9EQVRFID0gXCJJbnZhbGlkIGRhdGVcIjtcclxuICAgIGNvbnN0IFJFR0VYX0ZPUk1BVCA9IC9cXFsoW15cXF1dKyldfFl7MSw0fXxNezEsNH18RHsxLDJ9fGR7MSw0fXxIezEsMn18bXsxLDJ9fHN7MSwzfS9nO1xyXG4gICAgY29uc3QgUkVHRVhfRk9STUFUX1NUUkZUSU1FID0gLyglW2Etel0pL2dpO1xyXG4gICAgY29uc3QgREVGQVVMVF9GT1JNQVRfU1RSRlRJTUUgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVRJXRcIjtcclxuICAgIGNvbnN0IERFRkFVTFRfTE9DQUxFID0ge1xyXG4gICAgICAgIG1vbnRoczogXCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpLFxyXG4gICAgICAgIG1vbnRoc1Nob3J0OiBcIkphbiBGZWIgTWFyIEFwciBNYXkgSnVuIEp1bCBBdWcgU2VwIE9jdCBOb3YgRGVjXCIuc3BsaXQoXCIgXCIpLFxyXG4gICAgICAgIHdlZWtkYXlzOiBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLFxyXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IFwiU3VuIE1vbiBUdWUgV2VkIFRodSBGcmkgU2F0XCIuc3BsaXQoXCIgXCIpLFxyXG4gICAgICAgIHdlZWtkYXlzTWluOiBcIlN1IE1vIFR1IFdlIFRoIEZyIFNhXCIuc3BsaXQoXCIgXCIpLFxyXG4gICAgICAgIHdlZWtTdGFydDogMFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBNID0ge1xyXG4gICAgICAgIG1zOiBcIk1pbGxpc2Vjb25kc1wiLFxyXG4gICAgICAgIHM6IFwiU2Vjb25kc1wiLFxyXG4gICAgICAgIG06IFwiTWludXRlc1wiLFxyXG4gICAgICAgIGg6IFwiSG91cnNcIixcclxuICAgICAgICBEOiBcIkRhdGVcIixcclxuICAgICAgICBkOiBcIkRheVwiLFxyXG4gICAgICAgIE06IFwiTW9udGhcIixcclxuICAgICAgICBZOiBcIkZ1bGxZZWFyXCIsXHJcbiAgICAgICAgeTogXCJZZWFyXCIsXHJcbiAgICAgICAgdDogXCJUaW1lXCJcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgQyA9IHtcclxuICAgICAgICBtczogXCJtc1wiLFxyXG4gICAgICAgIHM6IFwic2Vjb25kXCIsXHJcbiAgICAgICAgbTogXCJtaW51dGVcIixcclxuICAgICAgICBoOiBcImhvdXJcIixcclxuICAgICAgICBEOiBcImRheVwiLFxyXG4gICAgICAgIFc6IFwid2Vla1wiLFxyXG4gICAgICAgIGQ6IFwid2Vla0RheVwiLFxyXG4gICAgICAgIE06IFwibW9udGhcIixcclxuICAgICAgICBZOiBcInllYXJcIixcclxuICAgICAgICBZMjogXCJ5ZWFyMlwiLFxyXG4gICAgICAgIHQ6IFwidGltZVwiLFxyXG4gICAgICAgIGM6IFwiY2VudHVyeVwiLFxyXG4gICAgICAgIHE6IFwicXVhcnRlclwiXHJcbiAgICB9O1xuXG4gICAgY29uc3QgcmVxdWlyZWQgPSAobSA9ICcnKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBhcmd1bWVudCBpcyByZXF1aXJlZCFcIilcclxuICAgIH07XG5cbiAgICBjb25zdCBpc3NldCA9ICh2LCBudWxsYWJsZSA9IHRydWUpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbGFibGUgPyB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcgOiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcgJiYgdiAhPT0gbnVsbFxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IG5vdCA9IHYgPT4gdHlwZW9mIHYgPT09IFwidW5kZWZpbmVkXCIgfHwgdiA9PT0gbnVsbDtcblxuICAgIGNvbnN0IGxwYWQkMSA9IGZ1bmN0aW9uKHN0ciwgcGFkLCBsZW5ndGgpe1xyXG4gICAgICAgIGxldCBfc3RyID0gXCJcIitzdHI7XHJcbiAgICAgICAgaWYgKGxlbmd0aCAmJiBfc3RyLmxlbmd0aCA+PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBcnJheSgobGVuZ3RoICsgMSkgLSBfc3RyLmxlbmd0aCkuam9pbihwYWQpICsgX3N0cjtcclxuICAgIH07XG5cbiAgICBjbGFzcyBEYXRldGltZSB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KERhdGUsICBbdGhpc10uY29uY2F0KGFyZ3MpICkgKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSBcImVuXCI7XHJcbiAgICAgICAgICAgIHRoaXMud2Vla1N0YXJ0ID0gRGF0ZXRpbWUubG9jYWxlc1tcImVuXCJdLndlZWtTdGFydDtcclxuICAgICAgICAgICAgdGhpcy51dGNNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzTnVtKHRoaXMudmFsdWUuZ2V0VGltZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfREFURSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBsb2NhbGVzID0ge1xyXG4gICAgICAgICAgICBcImVuXCI6IERFRkFVTFRfTE9DQUxFXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaXNEYXRldGltZSh2YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRGF0ZXRpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgbm93KGFzRGF0ZSA9IGZhbHNlKXtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGV0aW1lKClbYXNEYXRlID8gXCJ2YWxcIiA6IFwidGltZVwiXSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHBhcnNlKHN0ciA9IHJlcXVpcmVkKCkpe1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZXRpbWUoRGF0ZS5wYXJzZShzdHIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBzZXRMb2NhbGUobmFtZSA9IHJlcXVpcmVkKCksIGxvY2FsZSA9IHJlcXVpcmVkKCkpe1xyXG4gICAgICAgICAgICBEYXRldGltZS5sb2NhbGVzW25hbWVdID0gbG9jYWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdldExvY2FsZShuYW1lID0gXCJlblwiKXtcclxuICAgICAgICAgICAgcmV0dXJuIGlzc2V0KERhdGV0aW1lLmxvY2FsZXNbbmFtZV0sIGZhbHNlKSA/IERhdGV0aW1lLmxvY2FsZXNbbmFtZV0gOiBEYXRldGltZS5sb2NhbGVzW1wiZW5cIl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgYWxpZ24oZGF0ZSwgYWxpZ24pe1xyXG4gICAgICAgICAgICBsZXQgX2RhdGUgPSBkYXRldGltZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdCwgdGVtcDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWxpZ24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5zOiAgcmVzdWx0ID0gX2RhdGUubXMoMCk7IGJyZWFrOyAvL3NlY29uZFxyXG4gICAgICAgICAgICAgICAgY2FzZSBDLm06ICByZXN1bHQgPSBEYXRldGltZS5hbGlnbihfZGF0ZSwgQy5zKVtDLnNdKDApOyBicmVhazsgLy9taW51dGVcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5oOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ24oX2RhdGUsIEMubSlbQy5tXSgwKTsgYnJlYWs7IC8vaG91clxyXG4gICAgICAgICAgICAgICAgY2FzZSBDLkQ6ICByZXN1bHQgPSBEYXRldGltZS5hbGlnbihfZGF0ZSwgQy5oKVtDLmhdKDApOyBicmVhazsgLy9kYXlcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5NOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ24oX2RhdGUsIEMuRClbQy5EXSgxKTsgYnJlYWs7IC8vbW9udGhcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5ZOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ24oX2RhdGUsIEMuTSlbQy5NXSgwKTsgYnJlYWs7IC8veWVhclxyXG4gICAgICAgICAgICAgICAgY2FzZSBDLlc6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IF9kYXRlLndlZWtEYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBEYXRldGltZS5hbGlnbihkYXRlLCBDLkQpLmFkZERheSgtdGVtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIHdlZWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJlc3VsdCA9IF9kYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgYWxpZ25FbmQoZGF0ZSwgYWxpZ24pe1xyXG4gICAgICAgICAgICBsZXQgX2RhdGUgPSBkYXRldGltZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdCwgdGVtcDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWxpZ24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5tczogcmVzdWx0ID0gX2RhdGUubXMoOTk5KTsgYnJlYWs7IC8vc2Vjb25kXHJcbiAgICAgICAgICAgICAgICBjYXNlIEMuczogIHJlc3VsdCA9IERhdGV0aW1lLmFsaWduRW5kKF9kYXRlLCBDLm1zKTsgYnJlYWs7IC8vc2Vjb25kXHJcbiAgICAgICAgICAgICAgICBjYXNlIEMubTogIHJlc3VsdCA9IERhdGV0aW1lLmFsaWduRW5kKF9kYXRlLCBDLnMpW0Muc10oNTkpOyBicmVhazsgLy9taW51dGVcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5oOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ25FbmQoX2RhdGUsIEMubSlbQy5tXSg1OSk7IGJyZWFrOyAvL2hvdXJcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5EOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ25FbmQoX2RhdGUsIEMuaClbQy5oXSgyMyk7IGJyZWFrOyAvL2RheVxyXG4gICAgICAgICAgICAgICAgY2FzZSBDLk06ICByZXN1bHQgPSBEYXRldGltZS5hbGlnbkVuZChfZGF0ZSwgQy5EKVtDLkRdKDEpLmFkZCgxLCBDLk0pLmFkZCgtMSwgQy5EKTsgYnJlYWs7IC8vbW9udGhcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5ZOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ25FbmQoX2RhdGUsIEMuRClbQy5NXSgxMSlbQy5EXSgzMSk7IGJyZWFrOyAvL3llYXJcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5XOiAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXAgPSBfZGF0ZS53ZWVrRGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ25FbmQoX2RhdGUsICdkYXknKS5hZGREYXkoNiAtIHRlbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyB3ZWVrXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmVzdWx0ID0gZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGltbXV0YWJsZSh2KXtcclxuICAgICAgICAgICAgdGhpcy5tdXRhYmxlID0gIShub3QodikgPyB0cnVlIDogdik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXRjKCl7XHJcbiAgICAgICAgICAgIHRoaXMudXRjTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9jYWwoKXtcclxuICAgICAgICAgICAgdGhpcy51dGNNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXNlTG9jYWxlKHZhbCl7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlID0gIWlzc2V0KERhdGV0aW1lLmxvY2FsZXNbdmFsXSwgZmFsc2UpID8gXCJlblwiIDogdmFsO1xyXG4gICAgICAgICAgICB0aGlzLndlZWtTdGFydCA9IERhdGV0aW1lLmdldExvY2FsZSh0aGlzLmxvY2FsZSkud2Vla1N0YXJ0O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsb25lKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGMgPSBkYXRldGltZSh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgYy5sb2NhbGUgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgYy53ZWVrU3RhcnQgPSB0aGlzLndlZWtTdGFydDtcclxuICAgICAgICAgICAgYy5tdXRhYmxlID0gdGhpcy5tdXRhYmxlO1xyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFsaWduKHRvKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXV0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IERhdGV0aW1lLmFsaWduKHRoaXMsIHRvKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltbXV0YWJsZShmYWxzZSkuYWxpZ24odG8pLmltbXV0YWJsZSghdGhpcy5tdXRhYmxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFsaWduRW5kKHRvKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXV0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IERhdGV0aW1lLmFsaWduRW5kKHRoaXMsIHRvKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltbXV0YWJsZShmYWxzZSkuYWxpZ25FbmQodG8pLmltbXV0YWJsZSghdGhpcy5tdXRhYmxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhbCh2YWwpe1xyXG4gICAgICAgICAgICBpZiAoICEodmFsIGluc3RhbmNlb2YgRGF0ZSkgKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tdXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRldGltZSh2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeWVhcjIoKXtcclxuICAgICAgICAgICAgcmV0dXJuICsoXCJcIit0aGlzLnllYXIoKSkuc3Vic3RyKC0yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIEdldCArIFNldCAqL1xyXG5cclxuICAgICAgICBfc2V0KG0sIHYpe1xyXG4gICAgICAgICAgICBjb25zdCBmbiA9IFwic2V0XCIgKyAodGhpcy51dGNNb2RlICYmIG0gIT09IFwidFwiID8gXCJVVENcIiA6IFwiXCIpICsgTVttXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXV0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZVtmbl0odik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcclxuICAgICAgICAgICAgY2xvbmUudmFsdWVbZm5dKHYpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfZ2V0KG0pe1xyXG4gICAgICAgICAgICBjb25zdCBmbiA9IFwiZ2V0XCIgKyAodGhpcy51dGNNb2RlICYmIG0gIT09IFwidFwiID8gXCJVVENcIiA6IFwiXCIpICsgTVttXTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVbZm5dKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfd29yayhwYXJ0LCB2YWwpe1xyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgKHR5cGVvZiB2YWwgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldChwYXJ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0KHBhcnQsIHZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtcyh2YWwpeyByZXR1cm4gdGhpcy5fd29yayhcIm1zXCIsIHZhbCk7fVxyXG4gICAgICAgIHNlY29uZCh2YWwpe3JldHVybiB0aGlzLl93b3JrKFwic1wiLCB2YWwpO31cclxuICAgICAgICBtaW51dGUodmFsKXtyZXR1cm4gdGhpcy5fd29yayhcIm1cIiwgdmFsKTsgfVxyXG4gICAgICAgIGhvdXIodmFsKXtyZXR1cm4gdGhpcy5fd29yayhcImhcIiwgdmFsKTt9XHJcbiAgICAgICAgZGF5KHZhbCl7cmV0dXJuIHRoaXMuX3dvcmsoXCJEXCIsIHZhbCk7fVxyXG4gICAgICAgIG1vbnRoKHZhbCl7cmV0dXJuIHRoaXMuX3dvcmsoXCJNXCIsIHZhbCk7fVxyXG4gICAgICAgIHllYXIodmFsKXtyZXR1cm4gdGhpcy5fd29yayhcIllcIiwgdmFsKTt9XHJcbiAgICAgICAgdGltZSh2YWwpe3JldHVybiB0aGlzLl93b3JrKFwidFwiLCB2YWwpO31cclxuXHJcbiAgICAgICAgd2Vla0RheSh2YWwpe1xyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgKG5vdCh2YWwpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudXRjTW9kZSA/IHRoaXMudmFsdWUuZ2V0VVRDRGF5KCkgOiB0aGlzLnZhbHVlLmdldERheSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyID0gdGhpcy53ZWVrRGF5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSB2YWwgLSBjdXJyO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kYXkodGhpcy5kYXkoKSArIGRpZmYpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQodW5pdCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpc1t1bml0XSAhPT0gXCJmdW5jdGlvblwiID8gdGhpcyA6IHRoaXNbdW5pdF0oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCh1bml0LCB2YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXNbdW5pdF0gIT09IFwiZnVuY3Rpb25cIiA/IHRoaXMgOiB0aGlzW3VuaXRdKHZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGQodmFsLCB0byl7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodG8pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5oOiByZXR1cm4gdGhpcy50aW1lKHRoaXMudGltZSgpICsgKHZhbCAqIDYwICogNjAgKiAxMDAwKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEMubTogcmV0dXJuIHRoaXMudGltZSh0aGlzLnRpbWUoKSArICh2YWwgKiA2MCAqIDEwMDApKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5zOiByZXR1cm4gdGhpcy50aW1lKHRoaXMudGltZSgpICsgKHZhbCAqIDEwMDApKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5tczogcmV0dXJuIHRoaXMudGltZSh0aGlzLnRpbWUoKSArICh2YWwpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5EOiByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSArIHZhbCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEMuVzogcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgKyB2YWwgKiA3KTtcclxuICAgICAgICAgICAgICAgIGNhc2UgQy5NOiByZXR1cm4gdGhpcy5tb250aCh0aGlzLm1vbnRoKCkgKyB2YWwpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDLlk6IHJldHVybiB0aGlzLnllYXIodGhpcy55ZWFyKCkgKyB2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRIb3VyKHYpe3JldHVybiB0aGlzLmFkZCh2LEMuaCk7fVxyXG4gICAgICAgIGFkZE1pbnV0ZSh2KXtyZXR1cm4gdGhpcy5hZGQodixDLm0pO31cclxuICAgICAgICBhZGRTZWNvbmQodil7cmV0dXJuIHRoaXMuYWRkKHYsIEMucyk7fVxyXG4gICAgICAgIGFkZE1zKHYpe3JldHVybiB0aGlzLmFkZCh2LCBDLm1zKTt9XHJcbiAgICAgICAgYWRkRGF5KHYpe3JldHVybiB0aGlzLmFkZCh2LEMuRCk7fVxyXG4gICAgICAgIGFkZFdlZWsodil7cmV0dXJuIHRoaXMuYWRkKHYsQy5XKTt9XHJcbiAgICAgICAgYWRkTW9udGgodil7cmV0dXJuIHRoaXMuYWRkKHYsIEMuTSk7fVxyXG4gICAgICAgIGFkZFllYXIodil7cmV0dXJuIHRoaXMuYWRkKHYsIEMuWSk7fVxyXG5cclxuICAgICAgICBmb3JtYXQoZm10LCBsb2NhbGUpe1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBmbXQgfHwgREVGQVVMVF9GT1JNQVQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gRGF0ZXRpbWUuZ2V0TG9jYWxlKGxvY2FsZSB8fCB0aGlzLmxvY2FsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLnllYXIoKSwgeWVhcjIgPSB0aGlzLnllYXIyKCksIG1vbnRoID0gdGhpcy5tb250aCgpLCBkYXkgPSB0aGlzLmRheSgpLCB3ZWVrRGF5ID0gdGhpcy53ZWVrRGF5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvdXIgPSB0aGlzLmhvdXIoKSwgbWludXRlID0gdGhpcy5taW51dGUoKSwgc2Vjb25kID0gdGhpcy5zZWNvbmQoKSwgbXMgPSB0aGlzLm1zKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBZWTogeWVhcjIsXHJcbiAgICAgICAgICAgICAgICBZWVlZOiB5ZWFyLFxyXG4gICAgICAgICAgICAgICAgTTogbW9udGggKyAxLFxyXG4gICAgICAgICAgICAgICAgTU06IGxwYWQkMShtb250aCArIDEsIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgTU1NOiBuYW1lcy5tb250aHNTaG9ydFttb250aF0sXHJcbiAgICAgICAgICAgICAgICBNTU1NOiBuYW1lcy5tb250aHNbbW9udGhdLFxyXG4gICAgICAgICAgICAgICAgRDogZGF5LFxyXG4gICAgICAgICAgICAgICAgREQ6IGxwYWQkMShkYXksIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgZDogd2Vla0RheSxcclxuICAgICAgICAgICAgICAgIGRkOiBuYW1lcy53ZWVrZGF5c01pblt3ZWVrRGF5XSxcclxuICAgICAgICAgICAgICAgIGRkZDogbmFtZXMud2Vla2RheXNTaG9ydFt3ZWVrRGF5XSxcclxuICAgICAgICAgICAgICAgIGRkZGQ6IG5hbWVzLndlZWtkYXlzW3dlZWtEYXldLFxyXG4gICAgICAgICAgICAgICAgSDogaG91cixcclxuICAgICAgICAgICAgICAgIEhIOiBscGFkJDEoaG91ciwgMCwgMiksXHJcbiAgICAgICAgICAgICAgICBtOiBtaW51dGUsXHJcbiAgICAgICAgICAgICAgICBtbTogbHBhZCQxKG1pbnV0ZSwwLCAyKSxcclxuICAgICAgICAgICAgICAgIHM6IHNlY29uZCxcclxuICAgICAgICAgICAgICAgIHNzOiBscGFkJDEoc2Vjb25kLDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgc3NzOiBscGFkJDEobXMsMCwgMylcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZShSRUdFWF9GT1JNQVQsIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhbHVlT2YoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudmFsdWVPZigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG9TdHJpbmcoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0ZXRpbWUgPSAoLi4uYXJncykgPT4gYXJncyAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRGF0ZXRpbWUgPyBhcmdzWzBdIDogbmV3IERhdGV0aW1lKC4uLmFyZ3MpO1xuXG4gICAgY29uc3QgZm5Gb3JtYXQkNSA9IERhdGV0aW1lLnByb3RvdHlwZS5mb3JtYXQ7XHJcblxyXG4gICAgY29uc3QgYnVkZGhpc3RNaXhpbiA9IHtcclxuICAgICAgICBidWRkaGlzdCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICsgNTQzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgREVGQVVMVF9GT1JNQVQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBCQjogKHRoaXMuYnVkZGhpc3QoKSArIFwiXCIpLnNsaWNlKC0yKSxcclxuICAgICAgICAgICAgICAgIEJCQkI6IHRoaXMuYnVkZGhpc3QoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm9ybWF0LnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8Qns0fXxCezJ9L2csIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmbkZvcm1hdCQ1LmJpbmQodGhpcykocmVzdWx0LCBsb2NhbGUpXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwgYnVkZGhpc3RNaXhpbik7XG5cbiAgICBjb25zdCBjcmVhdGVDYWxlbmRhciA9IChkYXRlLCBpc28pID0+IHtcclxuICAgICAgICBsZXQgX2RhdGUgPSBkYXRldGltZShkYXRlKTtcclxuICAgICAgICBsZXQgd3MgPSBpc28gPT09IDAgfHwgaXNvID8gaXNvIDogZGF0ZS53ZWVrU3RhcnQ7XHJcbiAgICAgICAgbGV0IHdkID0gd3MgPyBfZGF0ZS5pc29XZWVrRGF5KCkgOiBfZGF0ZS53ZWVrRGF5KCk7XHJcbiAgICAgICAgbGV0IG5hbWVzID0gRGF0ZXRpbWUuZ2V0TG9jYWxlKF9kYXRlLmxvY2FsZSk7XHJcbiAgICAgICAgbGV0IG5vdyA9IGRhdGV0aW1lKCksIGk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdldFdlZWtEYXlzID0gKHdkLCB3cykgPT4ge1xyXG4gICAgICAgICAgICBpZiAod3MgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3ZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3UgPSB3ZFswXTtcclxuICAgICAgICAgICAgcmV0dXJuIHdkLnNsaWNlKDEpLmNvbmNhdChbc3VdKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIG1vbnRoOiBuYW1lcy5tb250aHNbX2RhdGUubW9udGgoKV0sXHJcbiAgICAgICAgICAgIGRheXM6IFtdLFxyXG4gICAgICAgICAgICB3ZWVrc3RhcnQ6IGlzbyA/IDEgOiAwLFxyXG4gICAgICAgICAgICB3ZWVrZGF5czogZ2V0V2Vla0RheXMobmFtZXMud2Vla2RheXNNaW4sd3MpLFxyXG4gICAgICAgICAgICB0b2RheTogbm93LmZvcm1hdChcIllZWVktTU0tRERcIiksXHJcbiAgICAgICAgICAgIHdlZWtlbmRzOiBbXSxcclxuICAgICAgICAgICAgd2VlazogW11cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgX2RhdGUuYWRkRGF5KHdzID8gLXdkKzEgOiAtd2QpO1xyXG5cclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCA0MjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kYXlzLnB1c2goX2RhdGUuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKSk7XHJcbiAgICAgICAgICAgIF9kYXRlLmFkZCgxLCAnZGF5Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXN1bHQud2Vla2VuZHMgPSByZXN1bHQuZGF5cy5maWx0ZXIoZnVuY3Rpb24odiwgaSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZiA9IFswLDYsNywxMywxNCwyMCwyMSwyNywyOCwzNCwzNSw0MV07XHJcbiAgICAgICAgICAgIGNvbnN0IGlzbyA9IFs1LDYsMTIsMTMsMTksMjAsMjYsMjcsMzMsMzQsNDAsNDFdO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHdzID09PSAwID8gZGVmLmluY2x1ZGVzKGkpIDogaXNvLmluY2x1ZGVzKGkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfZGF0ZSA9IG5vdy5jbG9uZSgpO1xyXG4gICAgICAgIHdkID0gd3MgPyBfZGF0ZS5pc29XZWVrRGF5KCkgOiBfZGF0ZS53ZWVrRGF5KCk7XHJcbiAgICAgICAgX2RhdGUuYWRkRGF5KHdzID8gLXdkKzEgOiAtd2QpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LndlZWsucHVzaChfZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuICAgICAgICAgICAgX2RhdGUuYWRkKDEsICdkYXknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgLy8gMSAtIE1vbmRheSwgMCAtIFN1bmRheVxyXG4gICAgICAgIGNhbGVuZGFyKHdlZWtTdGFydCl7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVDYWxlbmRhcih0aGlzLCB3ZWVrU3RhcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgY29uc3QgZm5Gb3JtYXQkNCA9IERhdGV0aW1lLnByb3RvdHlwZS5mb3JtYXQ7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICBjZW50dXJ5KCl7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy55ZWFyKCkvMTAwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmb3JtYXQoZm9ybWF0LCBsb2NhbGUpe1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgREVGQVVMVF9GT1JNQVQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0ge1xyXG4gICAgICAgICAgICAgICAgQzogdGhpcy5jZW50dXJ5KClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmbXQgPSBmb3JtYXQucmVwbGFjZSgvKFxcW1teXFxdXStdKXxDL2csIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmbkZvcm1hdCQ0LmJpbmQodGhpcykoZm10LCBsb2NhbGUpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwge1xyXG4gICAgICAgIHNhbWUoZCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWUoKSA9PT0gZGF0ZXRpbWUoZCkudGltZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBhbGlnbjogeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1zID0gZGVmYXVsdFxyXG4gICAgICAgICogKi9cclxuICAgICAgICBjb21wYXJlKGQsIGFsaWduLCBvcGVyYXRvciA9IFwiPVwiKXtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGRhdGV0aW1lKGQpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyID0gZGF0ZXRpbWUodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCB0MSwgdDI7XHJcblxyXG4gICAgICAgICAgICBvcGVyYXRvciA9IG9wZXJhdG9yIHx8IFwiPVwiO1xyXG5cclxuICAgICAgICAgICAgaWYgKFtcIjxcIiwgXCI+XCIsIFwiPj1cIiwgXCI8PVwiLCBcIj1cIiwgXCIhPVwiXS5pbmNsdWRlcyhvcGVyYXRvcikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVyYXRvciA9IFwiPVwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhbGlnbiA9IChhbGlnbiB8fCBcIm1zXCIpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICB0MSA9IGN1cnIuYWxpZ24oYWxpZ24pLnRpbWUoKTtcclxuICAgICAgICAgICAgdDIgPSBkYXRlLmFsaWduKGFsaWduKS50aW1lKCk7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0MSA8IHQyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIj5cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDEgPiB0MjtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI8PVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0MSA8PSB0MjtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI+PVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0MSA+PSB0MjtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQxID09PSB0MjtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCIhPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0MSAhPT0gdDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBiZXR3ZWVuKGQxLCBkMil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlvdW5nZXIoZDEpICYmIHRoaXMub2xkZXIoZDIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9sZGVyKGRhdGUsIGFsaWduKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShkYXRlLCBhbGlnbiwgXCI8XCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9sZGVyT3JFcXVhbChkYXRlLCBhbGlnbil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUoZGF0ZSwgYWxpZ24sIFwiPD1cIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgeW91bmdlcihkYXRlLCBhbGlnbil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUoZGF0ZSwgYWxpZ24sIFwiPlwiKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB5b3VuZ2VyT3JFcXVhbChkYXRlLCBhbGlnbil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUoZGF0ZSwgYWxpZ24sIFwiPj1cIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZXF1YWwoZGF0ZSwgYWxpZ24pe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKGRhdGUsIGFsaWduLCBcIj1cIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbm90RXF1YWwoZGF0ZSwgYWxpZ24pe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKGRhdGUsIGFsaWduLCBcIiE9XCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRpZmYoZCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBkYXRldGltZShkKTtcclxuICAgICAgICAgICAgY29uc3QgZGlmZiA9IE1hdGguYWJzKHRoaXMudGltZSgpIC0gZGF0ZS50aW1lKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmTW9udGggPSBNYXRoLmFicyh0aGlzLm1vbnRoKCkgLSBkYXRlLm1vbnRoKCkgKyAoMTIgKiAodGhpcy55ZWFyKCkgLSBkYXRlLnllYXIoKSkpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcIm1zXCI6IGRpZmYsXHJcbiAgICAgICAgICAgICAgICBcInNlY29uZFwiOiBNYXRoLmNlaWwoZGlmZiAvIDEwMDApLFxyXG4gICAgICAgICAgICAgICAgXCJtaW51dGVcIjogTWF0aC5jZWlsKGRpZmYgLyAoMTAwMCAqIDYwKSksXHJcbiAgICAgICAgICAgICAgICBcImhvdXJcIjogTWF0aC5jZWlsKGRpZmYgLyAoMTAwMCAqIDYwICogNjApKSxcclxuICAgICAgICAgICAgICAgIFwiZGF5XCI6IE1hdGguY2VpbChkaWZmIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKSxcclxuICAgICAgICAgICAgICAgIFwibW9udGhcIjogZGlmZk1vbnRoLFxyXG4gICAgICAgICAgICAgICAgXCJ5ZWFyXCI6IE1hdGguZmxvb3IoZGlmZk1vbnRoIC8gMTIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkaXN0YW5jZShkLCBhbGlnbil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpZmYoZClbYWxpZ25dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICBpc0xlYXBZZWFyKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLnllYXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICBkYXlPZlllYXIoKXtcclxuICAgICAgICAgICAgY29uc3QgZGF5Q291bnQgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xyXG4gICAgICAgICAgICBjb25zdCBtb250aCA9IHRoaXMubW9udGgoKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5ID0gdGhpcy5kYXkoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRheUNvdW50W21vbnRoXSArIGRheSArICgobW9udGggPiAxICYmIHRoaXMuaXNMZWFwWWVhcigpKSA/IDEgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgZGF5c0luTW9udGgoKXtcclxuICAgICAgICAgICAgY29uc3QgY3VyciA9IGRhdGV0aW1lKHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gY3Vyci5hZGQoMSwgJ21vbnRoJykuZGF5KDEpLmFkZCgtMSwgJ2RheScpLmRheSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRheXNJblllYXIoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNMZWFwWWVhcigpID8gMzY2IDogMzY1O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRheXNJblllYXJNYXAoKXtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnIgPSBkYXRldGltZSh0aGlzLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnIubW9udGgoMCkuZGF5KDEpO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGN1cnIuYWRkKDEsICdtb250aCcpLmFkZCgtMSwgJ2RheScpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3Vyci5kYXkoKSk7XHJcbiAgICAgICAgICAgICAgICBjdXJyLmRheSgxKS5hZGQoMSwgJ21vbnRoJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkYXlzSW5ZZWFyT2JqKGxvY2FsZSwgc2hvcnROYW1lKXtcclxuICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5kYXlzSW5ZZWFyTWFwKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IERhdGV0aW1lLmdldExvY2FsZShsb2NhbGUgfHwgdGhpcy5sb2NhbGUpO1xyXG5cclxuICAgICAgICAgICAgbWFwLmZvckVhY2goKHYsIGkpID0+IHJlc3VsdFtuYW1lc1tzaG9ydE5hbWUgPyAnbW9udGhzU2hvcnQnIDogJ21vbnRocyddW2ldXSA9IHYpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgZGVjYWRlKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMueWVhcigpLzEwKSAqIDEwO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlY2FkZVN0YXJ0KCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY2FkZSA9IHRoaXMuZGVjYWRlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubXV0YWJsZSA/IHRoaXMgOiB0aGlzLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnllYXIoZGVjYWRlKS5tb250aCgwKS5kYXkoMSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVjYWRlRW5kKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY2FkZSA9IHRoaXMuZGVjYWRlKCkgKyA5O1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm11dGFibGUgPyB0aGlzIDogdGhpcy5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC55ZWFyKGRlY2FkZSkubW9udGgoMTEpLmRheSgzMSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVjYWRlT2ZNb250aCgpe1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5jbG9uZSgpLmFkZCgxLCBcIm1vbnRoXCIpLmRheSgxKS5hZGQoLTEsICdkYXknKS5kYXkoKSAvIDM7XHJcbiAgICAgICAgICAgIGNvbnN0IGRheSA9IHRoaXMuZGF5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF5IDw9IHBhcnQpIHJldHVybiAxO1xyXG4gICAgICAgICAgICBpZiAoZGF5IDw9IHBhcnQgKiAyKSByZXR1cm4gMjtcclxuICAgICAgICAgICAgcmV0dXJuIDM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLCB7XHJcbiAgICAgICAgZnJvbShzdHIsIGZvcm1hdCwgbG9jYWxlKXtcclxuICAgICAgICAgICAgbGV0IG5vcm0sIG5vcm1Gb3JtYXQsIGZJdGVtcywgZEl0ZW1zO1xyXG4gICAgICAgICAgICBsZXQgaU1vbnRoLCBpRGF5LCBpWWVhciwgaUhvdXIsIGlNaW51dGUsIGlTZWNvbmQsIGlNcztcclxuICAgICAgICAgICAgbGV0IHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtcztcclxuICAgICAgICAgICAgbGV0IHBhcnNlZE1vbnRoO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ2V0SW5kZXggPSBmdW5jdGlvbih3aGVyZSwgd2hhdCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2hlcmUubWFwKGZ1bmN0aW9uKGVsKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIH0pLmluZGV4T2Yod2hhdC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoTmFtZVRvTnVtYmVyID0gZnVuY3Rpb24obW9udGgpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAtMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gRGF0ZXRpbWUuZ2V0TG9jYWxlKGxvY2FsZSB8fCAnZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobm90KG1vbnRoKSkgcmV0dXJuIC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIGkgPSBnZXRJbmRleChuYW1lcy5tb250aHMsIG1vbnRoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEgJiYgdHlwZW9mIG5hbWVzW1wibW9udGhzUGFyZW50YWxcIl0gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gZ2V0SW5kZXgobmFtZXNbXCJtb250aHNQYXJlbnRhbFwiXSwgbW9udGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoID0gbW9udGguc3Vic3RyKDAsIDMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBnZXRJbmRleChuYW1lcy5tb250aHNTaG9ydCwgbW9udGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBpID09PSAtMSA/IC0xIDogaSArIDE7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnZXRQYXJ0SW5kZXggPSBmdW5jdGlvbihwYXJ0KXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwibW9udGhcIjogW1wiTVwiLCBcIm1tXCIsIFwiJW1cIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJkYXlcIjogW1wiRFwiLCBcImRkXCIsIFwiJWRcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ5ZWFyXCI6IFtcIllZXCIsIFwiWVlZWVwiLCBcInl5XCIsIFwieXl5eVwiLCBcIiV5XCJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaG91clwiOiBbXCJoXCIsIFwiaGhcIiwgXCIlaFwiXSxcclxuICAgICAgICAgICAgICAgICAgICBcIm1pbnV0ZVwiOiBbXCJtXCIsIFwibWlcIiwgXCJpXCIsIFwiaWlcIiwgXCIlaVwiXSxcclxuICAgICAgICAgICAgICAgICAgICBcInNlY29uZFwiOiBbXCJzXCIsIFwic3NcIiwgXCIlc1wiXSxcclxuICAgICAgICAgICAgICAgICAgICBcIm1zXCI6IFtcInNzc1wiXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gLTEsIGtleSwgaW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnRzW3BhcnRdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gcGFydHNbcGFydF1baV07XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBmSXRlbXMuaW5kZXhPZihrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRldGltZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuICAgICAgICAgICAgbm9ybSA9IHN0ci5yZXBsYWNlKC9bXFwvLC46XFxzXS9nLCAnLScpO1xyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuICAgICAgICAgICAgbm9ybUZvcm1hdCA9IGZvcm1hdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16QS1aMC05JV0vZywgJy0nKTtcclxuICAgICAgICAgICAgZkl0ZW1zID0gbm9ybUZvcm1hdC5zcGxpdCgnLScpO1xyXG4gICAgICAgICAgICBkSXRlbXMgPSBub3JtLnNwbGl0KCctJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9ybS5yZXBsYWNlKC8tL2csXCJcIikudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9EQVRFKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaU1vbnRoID0gZ2V0UGFydEluZGV4KFwibW9udGhcIik7XHJcbiAgICAgICAgICAgIGlEYXkgPSBnZXRQYXJ0SW5kZXgoXCJkYXlcIik7XHJcbiAgICAgICAgICAgIGlZZWFyID0gZ2V0UGFydEluZGV4KFwieWVhclwiKTtcclxuICAgICAgICAgICAgaUhvdXIgPSBnZXRQYXJ0SW5kZXgoXCJob3VyXCIpO1xyXG4gICAgICAgICAgICBpTWludXRlID0gZ2V0UGFydEluZGV4KFwibWludXRlXCIpO1xyXG4gICAgICAgICAgICBpU2Vjb25kID0gZ2V0UGFydEluZGV4KFwic2Vjb25kXCIpO1xyXG4gICAgICAgICAgICBpTXMgPSBnZXRQYXJ0SW5kZXgoXCJtc1wiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpTW9udGggPiAtMSAmJiBkSXRlbXNbaU1vbnRoXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KGRJdGVtc1tpTW9udGhdKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkSXRlbXNbaU1vbnRoXSA9IG1vbnRoTmFtZVRvTnVtYmVyKGRJdGVtc1tpTW9udGhdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZEl0ZW1zW2lNb250aF0gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlNb250aCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkTW9udGggPSBwYXJzZUludChkSXRlbXNbaU1vbnRoXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZE1vbnRoIDwgMSB8fCBwYXJzZWRNb250aCA+IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlNb250aCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlNb250aCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB5ZWFyICA9IGlZZWFyID4gLTEgJiYgZEl0ZW1zW2lZZWFyXSA/IGRJdGVtc1tpWWVhcl0gOiAwO1xyXG4gICAgICAgICAgICBtb250aCA9IGlNb250aCA+IC0xICYmIGRJdGVtc1tpTW9udGhdID8gZEl0ZW1zW2lNb250aF0gOiAxO1xyXG4gICAgICAgICAgICBkYXkgICA9IGlEYXkgPiAtMSAmJiBkSXRlbXNbaURheV0gPyBkSXRlbXNbaURheV0gOiAxO1xyXG5cclxuICAgICAgICAgICAgaG91ciAgICA9IGlIb3VyID4gLTEgJiYgZEl0ZW1zW2lIb3VyXSA/IGRJdGVtc1tpSG91cl0gOiAwO1xyXG4gICAgICAgICAgICBtaW51dGUgID0gaU1pbnV0ZSA+IC0xICYmIGRJdGVtc1tpTWludXRlXSA/IGRJdGVtc1tpTWludXRlXSA6IDA7XHJcbiAgICAgICAgICAgIHNlY29uZCAgPSBpU2Vjb25kID4gLTEgJiYgZEl0ZW1zW2lTZWNvbmRdID8gZEl0ZW1zW2lTZWNvbmRdIDogMDtcclxuICAgICAgICAgICAgbXMgID0gaU1zID4gLTEgJiYgZEl0ZW1zW2lNc10gPyBkSXRlbXNbaU1zXSA6IDA7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZXRpbWUoeWVhciwgbW9udGgtMSwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgY29uc3QgZm5Gb3JtYXQkMyA9IERhdGV0aW1lLnByb3RvdHlwZS5mb3JtYXQ7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICBhbXBtKGlzTG93ZXJDYXNlKXtcclxuICAgICAgICAgICAgbGV0IHZhbCA9IHRoaXMuaG91cigpIDwgMTIgPyBcIkFNXCIgOiBcIlBNXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyQ2FzZSA/IHZhbC50b0xvd2VyQ2FzZSgpIDogdmFsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhvdXIxMjogZnVuY3Rpb24oaCwgcCl7XHJcbiAgICAgICAgICAgIGxldCBob3VyID0gaDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ob3VyKCkgJSAxMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcCA9IHAgfHwgJ2FtJztcclxuXHJcbiAgICAgICAgICAgIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IFwicG1cIikge1xyXG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG91cihob3VyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uKGZvcm1hdCwgbG9jYWxlKXtcclxuICAgICAgICAgICAgbGV0IG1hdGNoZXMsIHJlc3VsdCwgaDEyID0gdGhpcy5ob3VyMTIoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCBERUZBVUxUX0ZPUk1BVDtcclxuXHJcbiAgICAgICAgICAgIG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBhOiBcIltcIit0aGlzLmFtcG0odHJ1ZSkrXCJdXCIsXHJcbiAgICAgICAgICAgICAgICBBOiBcIltcIit0aGlzLmFtcG0oZmFsc2UpK1wiXVwiLFxyXG4gICAgICAgICAgICAgICAgaDogaDEyLFxyXG4gICAgICAgICAgICAgICAgaGg6IGxwYWQkMShoMTIsIDAsIDIpXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXN1bHQgPSBmb3JtYXQucmVwbGFjZSgvKFxcW1teXFxdXStdKXxhfEF8aHsxLDJ9L2csIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmbkZvcm1hdCQzLmJpbmQodGhpcykocmVzdWx0LCBsb2NhbGUpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBjb25zdCBmbkZvcm1hdCQyID0gRGF0ZXRpbWUucHJvdG90eXBlLmZvcm1hdDtcclxuICAgIGNvbnN0IGZuQWxpZ24kMSA9IERhdGV0aW1lLmFsaWduO1xyXG4gICAgY29uc3QgZm5BbGlnbkVuZCQxID0gRGF0ZXRpbWUuYWxpZ25FbmQ7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZSwge1xyXG4gICAgICAgIGFsaWduKGQsIGFsaWduKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gZGF0ZXRpbWUoZCksIHJlc3VsdCwgdGVtcDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChhbGlnbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImlzb1dlZWtcIjpcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wID0gZGF0ZS5pc29XZWVrRGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZm5BbGlnbiQxKGRhdGUsICdkYXknKS5hZGREYXkoLXRlbXAgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gaXNvV2Vla1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJlc3VsdCA9IGZuQWxpZ24kMS5hcHBseSh1bmRlZmluZWQsIFtkYXRlLCBhbGlnbl0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFsaWduRW5kIChkLCBhbGlnbikge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZSA9IGRhdGV0aW1lKGQpLCByZXN1bHQsIHRlbXA7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goYWxpZ24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJpc29XZWVrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IGRhdGUuaXNvV2Vla0RheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZuQWxpZ25FbmQkMShkYXRlLCAnZGF5JykuYWRkRGF5KDcgLSB0ZW1wKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gaXNvV2Vla1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJlc3VsdCA9IGZuQWxpZ25FbmQkMS5hcHBseSh1bmRlZmluZWQsIFtkYXRlLCBhbGlnbl0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgaXNvV2Vla0RheSh2YWwpe1xyXG4gICAgICAgICAgICBsZXQgd2QgPSAodGhpcy53ZWVrRGF5KCkgKyA2KSAlIDcgKyAxO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoIHx8IChub3QodmFsKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3ZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkRGF5KHZhbCAtIHdkKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmb3JtYXQoZm9ybWF0LCBsb2NhbGUpe1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgREVGQVVMVF9GT1JNQVQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBJOiB0aGlzLmlzb1dlZWtEYXkoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm9ybWF0LnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8SXsxLDJ9L2csIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZuRm9ybWF0JDIuYmluZCh0aGlzKShyZXN1bHQsIGxvY2FsZSlcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUsIHtcclxuICAgICAgICBtYXgoKXtcclxuICAgICAgICAgICAgbGV0IGFyciA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFyci5tYXAoKGVsKSA9PiBkYXRldGltZShlbCkpLnNvcnQoKGEsIGIpID0+IGIudGltZSgpIC0gYS50aW1lKCkpWzBdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgbWF4KCl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRldGltZS5tYXguYXBwbHkodGhpcywgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUsIHtcclxuICAgICAgICBtaW4oKXtcclxuICAgICAgICAgICAgbGV0IGFyciA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFyci5tYXAoKGVsKSA9PiBkYXRldGltZShlbCkpLnNvcnQoKGEsIGIpID0+IGEudGltZSgpIC0gYi50aW1lKCkpWzBdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgbWluKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRldGltZS5taW4uYXBwbHkodGhpcywgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIGNvbnN0IGZuQWxpZ24gPSBEYXRldGltZS5hbGlnbjtcclxuICAgIGNvbnN0IGZuQWxpZ25FbmQgPSBEYXRldGltZS5hbGlnbkVuZDtcclxuICAgIGNvbnN0IGZuQWRkID0gRGF0ZXRpbWUucHJvdG90eXBlLmFkZDtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLCB7XHJcbiAgICAgICAgYWxpZ24oZCwgYWxpZ24pe1xyXG4gICAgICAgICAgICBsZXQgZGF0ZSA9IGRhdGV0aW1lKGQpLCByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goYWxpZ24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJxdWFydGVyXCI6ICByZXN1bHQgPSBEYXRldGltZS5hbGlnbihkYXRlLCAnZGF5JykuZGF5KDEpLm1vbnRoKGRhdGUucXVhcnRlcigpICogMyAtIDMpOyBicmVhazsgLy9xdWFydGVyXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXN1bHQgPSBmbkFsaWduLmFwcGx5KHRoaXMsIFtkYXRlLCBhbGlnbl0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFsaWduRW5kKGQsIGFsaWduKXtcclxuICAgICAgICAgICAgbGV0IGRhdGUgPSBkYXRldGltZShkKSwgcmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoKGFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicXVhcnRlclwiOiAgcmVzdWx0ID0gRGF0ZXRpbWUuYWxpZ24oZGF0ZSwgJ3F1YXJ0ZXInKS5hZGQoMywgJ21vbnRoJykuYWRkKC0xLCAnbXMnKTsgYnJlYWs7IC8vcXVhcnRlclxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmVzdWx0ID0gZm5BbGlnbkVuZC5hcHBseSh0aGlzLCBbZGF0ZSwgYWxpZ25dKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwge1xyXG4gICAgICAgIHF1YXJ0ZXIoKXtcclxuICAgICAgICAgICAgY29uc3QgbW9udGggPSB0aGlzLm1vbnRoKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobW9udGggPD0gMikgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGlmIChtb250aCA8PSA1KSByZXR1cm4gMjtcclxuICAgICAgICAgICAgaWYgKG1vbnRoIDw9IDgpIHJldHVybiAzO1xyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGQodmFsLCB0byl7XHJcbiAgICAgICAgICAgIGlmICh0byA9PT0gXCJxdWFydGVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vbnRoKHRoaXMubW9udGgoKSArIHZhbCAqIDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmbkFkZC5iaW5kKHRoaXMpKHZhbCwgdG8pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZFF1YXJ0ZXIodil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZCh2LCBcInF1YXJ0ZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLCB7XHJcbiAgICAgICAgc29ydChhcnIsIG9wdCl7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQsIF9hcnI7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBvcHQgIT09IFwib2JqZWN0XCIgfHwgbm90KG9wdCkpIHtcclxuICAgICAgICAgICAgICAgIG8uZm9ybWF0ID0gREVGQVVMVF9GT1JNQVQ7XHJcbiAgICAgICAgICAgICAgICBvLmRpciA9IG9wdCAmJiBvcHQudG9VcHBlckNhc2UoKSA9PT0gXCJERVNDXCIgPyBcIkRFU0NcIiA6IFwiQVNDXCI7XHJcbiAgICAgICAgICAgICAgICBvLnJldHVybkFzID0gXCJkYXRldGltZVwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgby5mb3JtYXQgPSBvcHQuZm9ybWF0IHx8IERFRkFVTFRfRk9STUFUO1xyXG4gICAgICAgICAgICAgICAgby5kaXIgPSAob3B0LmRpciB8fCBcIkFTQ1wiKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgby5yZXR1cm5BcyA9IG9wdC5mb3JtYXQgPyBcInN0cmluZ1wiIDogb3B0LnJldHVybkFzIHx8IFwiZGF0ZXRpbWVcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FyciA9ICBhcnIubWFwKChlbCkgPT4gZGF0ZXRpbWUoZWwpKS5zb3J0KChhLCBiKSA9PiBhLnZhbHVlT2YoKSAtIGIudmFsdWVPZigpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvLmRpciA9PT0gXCJERVNDXCIpIHtcclxuICAgICAgICAgICAgICAgIF9hcnIucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKG8ucmV0dXJuQXMpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYXJyLm1hcCgoZWwpID0+IGVsLmZvcm1hdChvLmZvcm1hdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRhdGVcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYXJyLm1hcCgoZWwpID0+IGVsLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXN1bHQgPSBfYXJyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgY29uc3QgZm5Gb3JtYXQkMSA9IERhdGV0aW1lLnByb3RvdHlwZS5mb3JtYXQ7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICB1dGNPZmZzZXQoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0aW1lem9uZSgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1RpbWVTdHJpbmcoKS5yZXBsYWNlKC8uK0dNVChbKy1dKShcXGR7Mn0pKFxcZHsyfSkuKy8sICckMSQyOiQzJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdGltZXpvbmVOYW1lKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvVGltZVN0cmluZygpLnJlcGxhY2UoLy4rXFwoKC4rPylcXCkkLywgJyQxJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZm9ybWF0KGZvcm1hdCwgbG9jYWxlKXtcclxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8IERFRkFVTFRfRk9STUFUO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHtcclxuICAgICAgICAgICAgICAgIFo6IHRoaXMudXRjTW9kZSA/IFwiWlwiIDogdGhpcy50aW1lem9uZSgpLFxyXG4gICAgICAgICAgICAgICAgWlo6IHRoaXMudGltZXpvbmUoKS5yZXBsYWNlKFwiOlwiLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgIFpaWjogXCJbR01UXVwiK3RoaXMudGltZXpvbmUoKSxcclxuICAgICAgICAgICAgICAgIHo6IHRoaXMudGltZXpvbmVOYW1lKClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBmb3JtYXQucmVwbGFjZSgvKFxcW1teXFxdXStdKXxaezEsM318ei9nLCAobWF0Y2gsICQxKSA9PiAkMSB8fCBtYXRjaGVzW21hdGNoXSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZm5Gb3JtYXQkMS5iaW5kKHRoaXMpKHJlc3VsdCwgbG9jYWxlKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgY29uc3QgZm5Gb3JtYXQgPSBEYXRldGltZS5wcm90b3R5cGUuZm9ybWF0O1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgLy8gVE9ETyBOZWVkIG9wdGltaXNhdGlvblxyXG4gICAgICAgIHdlZWtOdW1iZXIgKHdlZWtTdGFydCkge1xyXG4gICAgICAgICAgICBsZXQgblllYXIsIG5kYXksIG5ld1llYXIsIGRheSwgZGF5bnVtLCB3ZWVrbnVtO1xyXG5cclxuICAgICAgICAgICAgd2Vla1N0YXJ0ID0gK3dlZWtTdGFydCB8fCAwO1xyXG4gICAgICAgICAgICBuZXdZZWFyID0gZGF0ZXRpbWUodGhpcy55ZWFyKCksIDAsIDEpO1xyXG4gICAgICAgICAgICBkYXkgPSBuZXdZZWFyLndlZWtEYXkoKSAtIHdlZWtTdGFydDtcclxuICAgICAgICAgICAgZGF5ID0gKGRheSA+PSAwID8gZGF5IDogZGF5ICsgNyk7XHJcbiAgICAgICAgICAgIGRheW51bSA9IE1hdGguZmxvb3IoXHJcbiAgICAgICAgICAgICAgICAodGhpcy50aW1lKCkgLSBuZXdZZWFyLnRpbWUoKSAtICh0aGlzLnV0Y09mZnNldCgpIC0gbmV3WWVhci51dGNPZmZzZXQoKSkgKiA2MDAwMCkgLyA4NjQwMDAwMFxyXG4gICAgICAgICAgICApICsgMTtcclxuXHJcbiAgICAgICAgICAgIGlmKGRheSA8IDQpIHtcclxuICAgICAgICAgICAgICAgIHdlZWtudW0gPSBNYXRoLmZsb29yKChkYXludW0gKyBkYXkgLSAxKSAvIDcpICsgMTtcclxuICAgICAgICAgICAgICAgIGlmKHdlZWtudW0gPiA1Mikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ZZWFyID0gZGF0ZXRpbWUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBuZGF5ID0gblllYXIud2Vla0RheSgpIC0gd2Vla1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIG5kYXkgPSBuZGF5ID49IDAgPyBuZGF5IDogbmRheSArIDc7XHJcbiAgICAgICAgICAgICAgICAgICAgd2Vla251bSA9IG5kYXkgPCA0ID8gMSA6IDUzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2Vla251bSA9IE1hdGguZmxvb3IoKGRheW51bSArIGRheSAtIDEpIC8gNyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdlZWtudW07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNvV2Vla051bWJlcigpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWVrTnVtYmVyKDEpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdlZWtzSW5ZZWFyKHdlZWtTdGFydCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnIgPSBkYXRldGltZSh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnIubW9udGgoMTEpLmRheSgzMSkud2Vla051bWJlcih3ZWVrU3RhcnQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24oZm9ybWF0LCBsb2NhbGUpe1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hlcywgcmVzdWx0LCB3biA9IHRoaXMud2Vla051bWJlcigpLCB3bmkgPSB0aGlzLmlzb1dlZWtOdW1iZXIoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCBERUZBVUxUX0ZPUk1BVDtcclxuXHJcbiAgICAgICAgICAgIG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBXOiB3bixcclxuICAgICAgICAgICAgICAgIFdXOiBscGFkJDEod24sIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgV1dXOiB3bmksXHJcbiAgICAgICAgICAgICAgICBXV1dXOiBscGFkJDEod25pLCAwLCAyKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0gZm9ybWF0LnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8V3sxLDR9L2csIChtYXRjaCwgJDEpID0+ICQxIHx8IG1hdGNoZXNbbWF0Y2hdKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmbkZvcm1hdC5iaW5kKHRoaXMpKHJlc3VsdCwgbG9jYWxlKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZS5wcm90b3R5cGUsIHtcclxuICAgICAgICBzdHJmdGltZShmbXQsIGxvY2FsZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IGZtdCB8fCBERUZBVUxUX0ZPUk1BVF9TVFJGVElNRTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBEYXRldGltZS5nZXRMb2NhbGUobG9jYWxlIHx8IHRoaXMubG9jYWxlKTtcclxuICAgICAgICAgICAgY29uc3QgeWVhciA9IHRoaXMueWVhcigpLCB5ZWFyMiA9IHRoaXMueWVhcjIoKSwgbW9udGggPSB0aGlzLm1vbnRoKCksIGRheSA9IHRoaXMuZGF5KCksIHdlZWtEYXkgPSB0aGlzLndlZWtEYXkoKTtcclxuICAgICAgICAgICAgY29uc3QgaG91ciA9IHRoaXMuaG91cigpLCBob3VyMTIgPSB0aGlzLmhvdXIxMigpLCBtaW51dGUgPSB0aGlzLm1pbnV0ZSgpLCBzZWNvbmQgPSB0aGlzLnNlY29uZCgpLCBtcyA9IHRoaXMubXMoKSwgdGltZSA9IHRoaXMudGltZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBhRGF5ID0gbHBhZCQxKGRheSwgMCwgMiksXHJcbiAgICAgICAgICAgICAgICBhTW9udGggPSBscGFkJDEobW9udGggKyAxLCAwLCAyKSxcclxuICAgICAgICAgICAgICAgIGFIb3VyID0gbHBhZCQxKGhvdXIsIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgYUhvdXIxMiA9IGxwYWQkMShob3VyMTIsIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgYU1pbnV0ZSA9IGxwYWQkMShtaW51dGUsIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgYVNlY29uZCA9IGxwYWQkMShzZWNvbmQsIDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgYU1zID0gbHBhZCQxKG1zLCAwLCAzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGh1cnNkYXkgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGV0aW1lKHRoYXQudmFsdWUpLmRheSh0aGF0LmRheSgpIC0gKCh0aGF0LndlZWtEYXkoKSArIDYpICUgNykgKyAzKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSB7XHJcbiAgICAgICAgICAgICAgICAnJWEnOiBuYW1lcy53ZWVrZGF5c1Nob3J0W3dlZWtEYXldLFxyXG4gICAgICAgICAgICAgICAgJyVBJzogbmFtZXMud2Vla2RheXNbd2Vla0RheV0sXHJcbiAgICAgICAgICAgICAgICAnJWInOiBuYW1lcy5tb250aHNTaG9ydFttb250aF0sXHJcbiAgICAgICAgICAgICAgICAnJWgnOiBuYW1lcy5tb250aHNTaG9ydFttb250aF0sXHJcbiAgICAgICAgICAgICAgICAnJUInOiBuYW1lcy5tb250aHNbbW9udGhdLFxyXG4gICAgICAgICAgICAgICAgJyVjJzogdGhpcy50b1N0cmluZygpLnN1YnN0cmluZygwLCB0aGlzLnRvU3RyaW5nKCkuaW5kZXhPZihcIiAoXCIpKSxcclxuICAgICAgICAgICAgICAgICclQyc6IHRoaXMuY2VudHVyeSgpLFxyXG4gICAgICAgICAgICAgICAgJyVkJzogYURheSxcclxuICAgICAgICAgICAgICAgICclRCc6IFthRGF5LCBhTW9udGgsIHllYXJdLmpvaW4oXCIvXCIpLFxyXG4gICAgICAgICAgICAgICAgJyVlJzogZGF5LFxyXG4gICAgICAgICAgICAgICAgJyVGJzogW3llYXIsIGFNb250aCwgYURheV0uam9pbihcIi1cIiksXHJcbiAgICAgICAgICAgICAgICAnJUcnOiB0aHVyc2RheSgpLnllYXIoKSxcclxuICAgICAgICAgICAgICAgICclZyc6IChcIlwiK3RodXJzZGF5KCkueWVhcigpKS5zbGljZSgyKSxcclxuICAgICAgICAgICAgICAgICclSCc6IGFIb3VyLFxyXG4gICAgICAgICAgICAgICAgJyVJJzogYUhvdXIxMixcclxuICAgICAgICAgICAgICAgICclaic6IGxwYWQkMSh0aGlzLmRheU9mWWVhcigpLCAwLCAzKSxcclxuICAgICAgICAgICAgICAgICclayc6IGFIb3VyLFxyXG4gICAgICAgICAgICAgICAgJyVsJzogYUhvdXIxMixcclxuICAgICAgICAgICAgICAgICclbSc6IGFNb250aCxcclxuICAgICAgICAgICAgICAgICclbic6IG1vbnRoICsgMSxcclxuICAgICAgICAgICAgICAgICclTSc6IGFNaW51dGUsXHJcbiAgICAgICAgICAgICAgICAnJXAnOiB0aGlzLmFtcG0oKSxcclxuICAgICAgICAgICAgICAgICclUCc6IHRoaXMuYW1wbSh0cnVlKSxcclxuICAgICAgICAgICAgICAgICclcyc6IE1hdGgucm91bmQodGltZSAvIDEwMDApLFxyXG4gICAgICAgICAgICAgICAgJyVTJzogYVNlY29uZCxcclxuICAgICAgICAgICAgICAgICcldSc6IHRoaXMuaXNvV2Vla0RheSgpLFxyXG4gICAgICAgICAgICAgICAgJyVWJzogdGhpcy5pc29XZWVrTnVtYmVyKCksXHJcbiAgICAgICAgICAgICAgICAnJXcnOiB3ZWVrRGF5LFxyXG4gICAgICAgICAgICAgICAgJyV4JzogdGhpcy50b0xvY2FsZURhdGVTdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICclWCc6IHRoaXMudG9Mb2NhbGVUaW1lU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAnJXknOiB5ZWFyMixcclxuICAgICAgICAgICAgICAgICclWSc6IHllYXIsXHJcbiAgICAgICAgICAgICAgICAnJXonOiB0aGlzLnRpbWV6b25lKCkucmVwbGFjZShcIjpcIiwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICAnJVonOiB0aGlzLnRpbWV6b25lTmFtZSgpLFxyXG4gICAgICAgICAgICAgICAgJyVyJzogW2FIb3VyMTIsIGFNaW51dGUsIGFTZWNvbmRdLmpvaW4oXCI6XCIpICsgXCIgXCIgKyB0aGlzLmFtcG0oKSxcclxuICAgICAgICAgICAgICAgICclUic6IFthSG91ciwgYU1pbnV0ZV0uam9pbihcIjpcIiksXHJcbiAgICAgICAgICAgICAgICBcIiVUXCI6IFthSG91ciwgYU1pbnV0ZSwgYVNlY29uZF0uam9pbihcIjpcIiksXHJcbiAgICAgICAgICAgICAgICBcIiVRXCI6IGFNcyxcclxuICAgICAgICAgICAgICAgIFwiJXFcIjogbXMsXHJcbiAgICAgICAgICAgICAgICBcIiV0XCI6IHRoaXMudGltZXpvbmUoKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgUkVHRVhfRk9STUFUX1NUUkZUSU1FLFxyXG4gICAgICAgICAgICAgICAgKG1hdGNoKSA9PiAobWF0Y2hlc1ttYXRjaF0gPT09IDAgfHwgbWF0Y2hlc1ttYXRjaF0gPyBtYXRjaGVzW21hdGNoXSA6IG1hdGNoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZSwge1xyXG4gICAgICAgIGlzVG9kYXkoZGF0ZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkYXRldGltZShkYXRlKS5hbGlnbihcImRheVwiKTtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGRhdGV0aW1lKCkuYWxpZ24oJ2RheScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGQudGltZSgpID09PSBjLnRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwge1xyXG4gICAgICAgIGlzVG9kYXkoKXtcclxuICAgICAgICAgICAgcmV0dXJuIERhdGV0aW1lLmlzVG9kYXkodGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9kYXkoKXtcclxuICAgICAgICAgICAgY29uc3Qgbm93ID0gZGF0ZXRpbWUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tdXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm93O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbChub3cudmFsKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZSwge1xyXG4gICAgICAgIGlzVG9tb3Jyb3coZGF0ZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkYXRldGltZShkYXRlKS5hbGlnbihcImRheVwiKTtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGRhdGV0aW1lKCkuYWxpZ24oJ2RheScpLmFkZCgxLCAnZGF5Jyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZC50aW1lKCkgPT09IGMudGltZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgaXNUb21vcnJvdygpe1xyXG4gICAgICAgICAgICByZXR1cm4gRGF0ZXRpbWUuaXNUb21vcnJvdyh0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b21vcnJvdygpe1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubXV0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbW11dGFibGUoZmFsc2UpLmFkZCgxLCAnZGF5JykuaW1tdXRhYmxlKCF0aGlzLm11dGFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZCgxLCAnZGF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwge1xyXG4gICAgICAgIHRvRGF0ZVN0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0RhdGVTdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0lTT1N0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvSlNPTigpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0pTT04oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0dNVFN0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0dNVFN0cmluZygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvTG9jYWxlRGF0ZVN0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0xvY2FsZVN0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvTG9jYWxlVGltZVN0cmluZygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b1RpbWVTdHJpbmcoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9UaW1lU3RyaW5nKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9VVENTdHJpbmcoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9VVENTdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0RhdGUoKXtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZSwge1xyXG4gICAgICAgIHRpbWVzdGFtcCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgdW5peCh2YWwpIHtcclxuICAgICAgICAgICAgbGV0IF92YWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgKG5vdCh2YWwpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdmFsID0gdmFsICogMTAwMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm11dGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWUoX3ZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRldGltZSh0aGlzLnZhbHVlKS50aW1lKF92YWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRpbWVzdGFtcCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bml4KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLCB7XHJcbiAgICAgICAgaXNZZXN0ZXJkYXkoZGF0ZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkYXRldGltZShkYXRlKS5hbGlnbihcImRheVwiKTtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGRhdGV0aW1lKCkuYWxpZ24oJ2RheScpLmFkZCgtMSwgJ2RheScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGQudGltZSgpID09PSBjLnRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLnByb3RvdHlwZSwge1xyXG4gICAgICAgIGlzWWVzdGVyZGF5KCl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRldGltZS5pc1llc3RlcmRheSh0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB5ZXN0ZXJkYXkoKXtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm11dGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1tdXRhYmxlKGZhbHNlKS5hZGQoLTEsICdkYXknKS5pbW11dGFibGUoIXRoaXMubXV0YWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKC0xLCAnZGF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZXRSZXN1bHQgPSAodmFsKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlcztcclxuICAgICAgICBsZXQgc2Vjb25kcyA9IE1hdGguZmxvb3IodmFsIC8gMTAwMCksXHJcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCksXHJcbiAgICAgICAgICAgIGhvdXJzID0gTWF0aC5mbG9vcihtaW51dGVzIC8gNjApLFxyXG4gICAgICAgICAgICBkYXlzID0gTWF0aC5mbG9vcihob3VycyAvIDI0KSxcclxuICAgICAgICAgICAgbW9udGhzID0gTWF0aC5mbG9vcihkYXlzIC8gMzApLFxyXG4gICAgICAgICAgICB5ZWFycyA9IE1hdGguZmxvb3IobW9udGhzIC8gMTIpO1xyXG5cclxuICAgICAgICBpZiAoeWVhcnMgPj0gMSkgcmVzID0gIGAke3llYXJzfSB5ZWFyYDtcclxuICAgICAgICBpZiAobW9udGhzID49IDEgJiYgeWVhcnMgPCAxKSByZXMgPSAgYCR7bW9udGhzfSBtb25gO1xyXG4gICAgICAgIGlmIChkYXlzID49IDEgJiYgZGF5cyA8PSAzMCkgcmVzID0gIGAke2RheXN9IGRheXNgO1xyXG4gICAgICAgIGlmIChob3VycyAmJiBob3VycyA8IDI0KSByZXMgPSAgYCR7aG91cnN9IGhvdXJgO1xyXG4gICAgICAgIGlmIChtaW51dGVzICYmIChtaW51dGVzID49IDQwICYmIG1pbnV0ZXMgPCA2MCkpIHJlcyA9ICBcImxlc3MgYSBob3VyXCI7XHJcbiAgICAgICAgaWYgKG1pbnV0ZXMgJiYgbWludXRlcyA8IDQwKSByZXMgPSAgYCR7bWludXRlc30gbWluYDtcclxuICAgICAgICBpZiAoc2Vjb25kcyAmJiBzZWNvbmRzID49IDMwICYmIHNlY29uZHMgPCA2MCkgcmVzID0gIGAke3NlY29uZHN9IHNlY2A7XHJcbiAgICAgICAgaWYgKHNlY29uZHMgPCAzMCkgcmVzID0gIGBmZXcgc2VjYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc1xyXG4gICAgfTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKERhdGV0aW1lLCB7XHJcbiAgICAgICAgdGltZUxhcHNlKGQpIHtcclxuICAgICAgICAgICAgbGV0IG9sZCA9IGRhdGV0aW1lKGQpLFxyXG4gICAgICAgICAgICAgICAgbm93ID0gZGF0ZXRpbWUoKSxcclxuICAgICAgICAgICAgICAgIHZhbCA9IG5vdyAtIG9sZDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBnZXRSZXN1bHQodmFsKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oRGF0ZXRpbWUucHJvdG90eXBlLCB7XHJcbiAgICAgICAgdGltZUxhcHNlKCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsID0gZGF0ZXRpbWUoKSAtICt0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0UmVzdWx0KHZhbClcclxuICAgICAgICB9XHJcbiAgICB9KTtcblxuICAgIGNvbnN0IFBhcnNlVGltZU1peGluID0ge1xyXG4gICAgICAgIHBhcnNlVGltZSAodCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKHQpKSByZXR1cm4gTWF0aC5hYnMoK3QpXHJcbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSAvKFswLTldK2QpfChbMC05XXsxLDJ9aCl8KFswLTldezEsMn1tKXwoWzAtOV17MSwyfXMpL2dtO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHQubWF0Y2gocGF0dGVybik7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaC5yZWR1Y2UoIChhY2MsIHZhbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlcztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsLmluY2x1ZGVzKCdkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogcGFyc2VJbnQodmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsLmluY2x1ZGVzKCdoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSAxMDAwICogNjAgKiA2MCAqIHBhcnNlSW50KHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbC5pbmNsdWRlcygnbScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gMTAwMCAqIDYwICogcGFyc2VJbnQodmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsLmluY2x1ZGVzKCdzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSAxMDAwICogcGFyc2VJbnQodmFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgcmVzXHJcbiAgICAgICAgICAgIH0sIDAgKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihEYXRldGltZSwgUGFyc2VUaW1lTWl4aW4pO1xuXG4gICAgLyoqXHJcbiAgICAgKiBBIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcgbWF0Y2hpbmcgZGlnaXRzXHJcbiAgICAgKi9cbiAgICBjb25zdCBkaWdpdCA9ICdcXFxcZCc7XG4gICAgLyoqXHJcbiAgICAgKiBBIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcgbWF0Y2hpbmcgd2hpdGVzcGFjZVxyXG4gICAgICovXG5cbiAgICBjb25zdCB3aGl0ZXNwYWNlID0gJ1xcXFxzXFxcXHVGRUZGXFxcXHhBMCc7XG4gICAgLyoqXHJcbiAgICAgKiBBIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcgbWF0Y2hpbmcgZGlhY3JpdGljYWwgbWFya1xyXG4gICAgICovXG5cbiAgICBjb25zdCBkaWFjcml0aWNhbE1hcmsgPSAnXFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MUFCMC1cXFxcdTFBRkZcXFxcdTFEQzAtXFxcXHUxREZGXFxcXHUyMEQwLVxcXFx1MjBGRlxcXFx1RkUyMC1cXFxcdUZFMkYnO1xuICAgIC8qKlxyXG4gICAgICogQSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIEdlbmVyYWwgUHVuY3R1YXRpb24gVW5pY29kZSBibG9ja1xyXG4gICAgICovXG5cbiAgICBjb25zdCBnZW5lcmFsUHVuY3R1YXRpb25CbG9jayA9ICdcXFxcdTIwMDAtXFxcXHUyMDZGJztcbiAgICAvKipcclxuICAgICAqIEEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIG5vbiBjaGFyYWN0ZXJzIGZyb20gZnJvbSBCYXNpYyBMYXRpbiBhbmQgTGF0aW4tMSBTdXBwbGVtZW50IFVuaWNvZGUgYmxvY2tzXHJcbiAgICAgKi9cblxuICAgIGNvbnN0IG5vbkNoYXJhY3RlciA9ICdcXFxceDAwLVxcXFx4MkZcXFxceDNBLVxcXFx4NDBcXFxceDVCLVxcXFx4NjBcXFxceDdiLVxcXFx4QkZcXFxceEQ3XFxcXHhGNyc7XG4gICAgLyoqXHJcbiAgICAgKiBBIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgZGluZ2JhdCBVbmljb2RlIGJsb2NrXHJcbiAgICAgKi9cblxuICAgIGNvbnN0IGRpbmdiYXRCbG9jayA9ICdcXFxcdTI3MDAtXFxcXHUyN0JGJztcbiAgICAvKipcclxuICAgICAqIEEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZyB0aGF0IG1hdGNoZXMgbG93ZXIgY2FzZSBsZXR0ZXJzOiBMQVRJTlxyXG4gICAgICovXG5cbiAgICBjb25zdCBsb3dlckNhc2VMZXR0ZXIgPSAnYS16XFxcXHhCNVxcXFx4REYtXFxcXHhGNlxcXFx4RjgtXFxcXHhGRlxcXFx1MDEwMVxcXFx1MDEwM1xcXFx1MDEwNVxcXFx1MDEwN1xcXFx1MDEwOVxcXFx1MDEwQlxcXFx1MDEwRFxcXFx1MDEwRlxcXFx1MDExMVxcXFx1MDExM1xcXFx1MDExNVxcXFx1MDExN1xcXFx1MDExOVxcXFx1MDExQlxcXFx1MDExRFxcXFx1MDExRlxcXFx1MDEyMVxcXFx1MDEyM1xcXFx1MDEyNVxcXFx1MDEyN1xcXFx1MDEyOVxcXFx1MDEyQlxcXFx1MDEyRFxcXFx1MDEyRlxcXFx1MDEzMVxcXFx1MDEzM1xcXFx1MDEzNVxcXFx1MDEzN1xcXFx1MDEzOFxcXFx1MDEzQVxcXFx1MDEzQ1xcXFx1MDEzRVxcXFx1MDE0MFxcXFx1MDE0MlxcXFx1MDE0NFxcXFx1MDE0NlxcXFx1MDE0OFxcXFx1MDE0OVxcXFx1MDE0QlxcXFx1MDE0RFxcXFx1MDE0RlxcXFx1MDE1MVxcXFx1MDE1M1xcXFx1MDE1NVxcXFx1MDE1N1xcXFx1MDE1OVxcXFx1MDE1QlxcXFx1MDE1RFxcXFx1MDE1RlxcXFx1MDE2MVxcXFx1MDE2M1xcXFx1MDE2NVxcXFx1MDE2N1xcXFx1MDE2OVxcXFx1MDE2QlxcXFx1MDE2RFxcXFx1MDE2RlxcXFx1MDE3MVxcXFx1MDE3M1xcXFx1MDE3NVxcXFx1MDE3N1xcXFx1MDE3QVxcXFx1MDE3Q1xcXFx1MDE3RS1cXFxcdTAxODBcXFxcdTAxODNcXFxcdTAxODVcXFxcdTAxODhcXFxcdTAxOENcXFxcdTAxOERcXFxcdTAxOTJcXFxcdTAxOTVcXFxcdTAxOTktXFxcXHUwMTlCXFxcXHUwMTlFXFxcXHUwMUExXFxcXHUwMUEzXFxcXHUwMUE1XFxcXHUwMUE4XFxcXHUwMUFBXFxcXHUwMUFCXFxcXHUwMUFEXFxcXHUwMUIwXFxcXHUwMUI0XFxcXHUwMUI2XFxcXHUwMUI5XFxcXHUwMUJBXFxcXHUwMUJELVxcXFx1MDFCRlxcXFx1MDFDNlxcXFx1MDFDOVxcXFx1MDFDQ1xcXFx1MDFDRVxcXFx1MDFEMFxcXFx1MDFEMlxcXFx1MDFENFxcXFx1MDFENlxcXFx1MDFEOFxcXFx1MDFEQVxcXFx1MDFEQ1xcXFx1MDFERFxcXFx1MDFERlxcXFx1MDFFMVxcXFx1MDFFM1xcXFx1MDFFNVxcXFx1MDFFN1xcXFx1MDFFOVxcXFx1MDFFQlxcXFx1MDFFRFxcXFx1MDFFRlxcXFx1MDFGMFxcXFx1MDFGM1xcXFx1MDFGNVxcXFx1MDFGOVxcXFx1MDFGQlxcXFx1MDFGRFxcXFx1MDFGRlxcXFx1MDIwMVxcXFx1MDIwM1xcXFx1MDIwNVxcXFx1MDIwN1xcXFx1MDIwOVxcXFx1MDIwQlxcXFx1MDIwRFxcXFx1MDIwRlxcXFx1MDIxMVxcXFx1MDIxM1xcXFx1MDIxNVxcXFx1MDIxN1xcXFx1MDIxOVxcXFx1MDIxQlxcXFx1MDIxRFxcXFx1MDIxRlxcXFx1MDIyMVxcXFx1MDIyM1xcXFx1MDIyNVxcXFx1MDIyN1xcXFx1MDIyOVxcXFx1MDIyQlxcXFx1MDIyRFxcXFx1MDIyRlxcXFx1MDIzMVxcXFx1MDIzMy1cXFxcdTAyMzlcXFxcdTAyM0NcXFxcdTAyM0ZcXFxcdTAyNDBcXFxcdTAyNDJcXFxcdTAyNDdcXFxcdTAyNDlcXFxcdTAyNEJcXFxcdTAyNERcXFxcdTAyNEYnO1xuICAgIC8qKlxyXG4gICAgICogQSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nIHRoYXQgbWF0Y2hlcyB1cHBlciBjYXNlIGxldHRlcnM6IExBVElOXHJcbiAgICAgKi9cblxuICAgIGNvbnN0IHVwcGVyQ2FzZUxldHRlciA9ICdcXFxceDQxLVxcXFx4NWFcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVcXFxcdTAxMDBcXFxcdTAxMDJcXFxcdTAxMDRcXFxcdTAxMDZcXFxcdTAxMDhcXFxcdTAxMGFcXFxcdTAxMGNcXFxcdTAxMGVcXFxcdTAxMTBcXFxcdTAxMTJcXFxcdTAxMTRcXFxcdTAxMTZcXFxcdTAxMThcXFxcdTAxMWFcXFxcdTAxMWNcXFxcdTAxMWVcXFxcdTAxMjBcXFxcdTAxMjJcXFxcdTAxMjRcXFxcdTAxMjZcXFxcdTAxMjhcXFxcdTAxMmFcXFxcdTAxMmNcXFxcdTAxMmVcXFxcdTAxMzBcXFxcdTAxMzJcXFxcdTAxMzRcXFxcdTAxMzZcXFxcdTAxMzlcXFxcdTAxM2JcXFxcdTAxM2RcXFxcdTAxM2ZcXFxcdTAxNDFcXFxcdTAxNDNcXFxcdTAxNDVcXFxcdTAxNDdcXFxcdTAxNGFcXFxcdTAxNGNcXFxcdTAxNGVcXFxcdTAxNTBcXFxcdTAxNTJcXFxcdTAxNTRcXFxcdTAxNTZcXFxcdTAxNThcXFxcdTAxNWFcXFxcdTAxNWNcXFxcdTAxNWVcXFxcdTAxNjBcXFxcdTAxNjJcXFxcdTAxNjRcXFxcdTAxNjZcXFxcdTAxNjhcXFxcdTAxNmFcXFxcdTAxNmNcXFxcdTAxNmVcXFxcdTAxNzBcXFxcdTAxNzJcXFxcdTAxNzRcXFxcdTAxNzZcXFxcdTAxNzhcXFxcdTAxNzlcXFxcdTAxN2JcXFxcdTAxN2RcXFxcdTAxODFcXFxcdTAxODJcXFxcdTAxODRcXFxcdTAxODZcXFxcdTAxODdcXFxcdTAxODktXFxcXHUwMThiXFxcXHUwMThlLVxcXFx1MDE5MVxcXFx1MDE5M1xcXFx1MDE5NFxcXFx1MDE5Ni1cXFxcdTAxOThcXFxcdTAxOWNcXFxcdTAxOWRcXFxcdTAxOWZcXFxcdTAxYTBcXFxcdTAxYTJcXFxcdTAxYTRcXFxcdTAxYTZcXFxcdTAxYTdcXFxcdTAxYTlcXFxcdTAxYWNcXFxcdTAxYWVcXFxcdTAxYWZcXFxcdTAxYjEtXFxcXHUwMWIzXFxcXHUwMWI1XFxcXHUwMWI3XFxcXHUwMWI4XFxcXHUwMWJjXFxcXHUwMWM0XFxcXHUwMWM1XFxcXHUwMWM3XFxcXHUwMWM4XFxcXHUwMWNhXFxcXHUwMWNiXFxcXHUwMWNkXFxcXHUwMWNmXFxcXHUwMWQxXFxcXHUwMWQzXFxcXHUwMWQ1XFxcXHUwMWQ3XFxcXHUwMWQ5XFxcXHUwMWRiXFxcXHUwMWRlXFxcXHUwMWUwXFxcXHUwMWUyXFxcXHUwMWU0XFxcXHUwMWU2XFxcXHUwMWU4XFxcXHUwMWVhXFxcXHUwMWVjXFxcXHUwMWVlXFxcXHUwMWYxXFxcXHUwMWYyXFxcXHUwMWY0XFxcXHUwMWY2LVxcXFx1MDFmOFxcXFx1MDFmYVxcXFx1MDFmY1xcXFx1MDFmZVxcXFx1MDIwMFxcXFx1MDIwMlxcXFx1MDIwNFxcXFx1MDIwNlxcXFx1MDIwOFxcXFx1MDIwYVxcXFx1MDIwY1xcXFx1MDIwZVxcXFx1MDIxMFxcXFx1MDIxMlxcXFx1MDIxNFxcXFx1MDIxNlxcXFx1MDIxOFxcXFx1MDIxYVxcXFx1MDIxY1xcXFx1MDIxZVxcXFx1MDIyMFxcXFx1MDIyMlxcXFx1MDIyNFxcXFx1MDIyNlxcXFx1MDIyOFxcXFx1MDIyYVxcXFx1MDIyY1xcXFx1MDIyZVxcXFx1MDIzMFxcXFx1MDIzMlxcXFx1MDIzYVxcXFx1MDIzYlxcXFx1MDIzZFxcXFx1MDIzZVxcXFx1MDI0MVxcXFx1MDI0My1cXFxcdTAyNDZcXFxcdTAyNDhcXFxcdTAyNGFcXFxcdTAyNGNcXFxcdTAyNGUnO1xuXG4gICAgLyoqXHJcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggd2hpdGVzcGFjZXMgZnJvbSB0aGUgbGVmdCBzaWRlXHJcbiAgICAgKi9cblxuICAgIGNvbnN0IFJFR0VYUF9UUklNX0xFRlQgPSBuZXcgUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlICsgJ10rJyk7XG4gICAgLyoqXHJcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggd2hpdGVzcGFjZXMgZnJvbSB0aGUgcmlnaHQgc2lkZVxyXG4gICAgICovXG5cbiAgICBjb25zdCBSRUdFWFBfVFJJTV9SSUdIVCA9IG5ldyBSZWdFeHAoJ1snICsgd2hpdGVzcGFjZSArICddKyQnKTtcbiAgICAvKipcclxuICAgICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBkaWdpdCBjaGFyYWN0ZXJzXHJcbiAgICAgKi9cblxuICAgIGNvbnN0IFJFR0VYUF9ESUdJVCA9IG5ldyBSZWdFeHAoJ14nICsgZGlnaXQgKyAnKyQnKTtcbiAgICAvKipcclxuICAgICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBIVE1MIHNwZWNpYWwgY2hhcmFjdGVycy5cclxuICAgICAqL1xuXG4gICAgY29uc3QgUkVHRVhQX0hUTUxfU1BFQ0lBTF9DSEFSQUNURVJTID0gL1s8PiZcIidgXS9nO1xuICAgIGNvbnN0IFJFR0VYUF9UQUdTID0gLyg8KFtePl0rKT4pL2lnO1xuICAgIC8qKlxyXG4gICAgICogUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIFVuaWNvZGUgd29yZHNcclxuICAgICAqL1xuXG4gICAgY29uc3QgUkVHRVhQX1dPUkQgPSBuZXcgUmVnRXhwKCcoPzpbJyArIHVwcGVyQ2FzZUxldHRlciArICddWycgKyBkaWFjcml0aWNhbE1hcmsgKyAnXSopPyg/OlsnICsgbG93ZXJDYXNlTGV0dGVyICsgJ11bJyArIGRpYWNyaXRpY2FsTWFyayArICddKikrfFxcXHJcbig/OlsnICsgdXBwZXJDYXNlTGV0dGVyICsgJ11bJyArIGRpYWNyaXRpY2FsTWFyayArICddKikrKD8hWycgKyBsb3dlckNhc2VMZXR0ZXIgKyAnXSl8XFxcclxuWycgKyBkaWdpdCArICddK3xcXFxyXG5bJyArIGRpbmdiYXRCbG9jayArICddfFxcXHJcblteJyArIG5vbkNoYXJhY3RlciArIGdlbmVyYWxQdW5jdHVhdGlvbkJsb2NrICsgd2hpdGVzcGFjZSArICddKycsICdnJyk7XG4gICAgLyoqXHJcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggd29yZHMgZnJvbSBCYXNpYyBMYXRpbiBhbmQgTGF0aW4tMSBTdXBwbGVtZW50IGJsb2Nrc1xyXG4gICAgICovXG5cbiAgICBjb25zdCBSRUdFWFBfTEFUSU5fV09SRCA9IC9bQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERV0/W2EtelxceERGLVxceEY2XFx4RjgtXFx4RkZdK3xbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERV0rKD8hW2EtelxceERGLVxceEY2XFx4RjgtXFx4RkZdKXxcXGQrL2c7XG4gICAgLyoqXHJcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWxwaGEgY2hhcmFjdGVyc1xyXG4gICAgICovXG5cbiAgICBjb25zdCBSRUdFWFBfQUxQSEEgPSBuZXcgUmVnRXhwKCdeKD86WycgKyBsb3dlckNhc2VMZXR0ZXIgKyB1cHBlckNhc2VMZXR0ZXIgKyAnXVsnICsgZGlhY3JpdGljYWxNYXJrICsgJ10qKSskJyk7XG4gICAgLyoqXHJcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWxwaGEgYW5kIGRpZ2l0IGNoYXJhY3RlcnNcclxuICAgICAqL1xuXG4gICAgY29uc3QgUkVHRVhQX0FMUEhBX0RJR0lUID0gbmV3IFJlZ0V4cCgnXigoPzpbJyArIGxvd2VyQ2FzZUxldHRlciArIHVwcGVyQ2FzZUxldHRlciArICddWycgKyBkaWFjcml0aWNhbE1hcmsgKyAnXSopfFsnICsgZGlnaXQgKyAnXSkrJCcpO1xuICAgIC8qKlxyXG4gICAgICogUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIEV4dGVuZGVkIEFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gdGhlIGZpcnN0IDI1NVxyXG4gICAgICovXG5cbiAgICBjb25zdCBSRUdFWFBfRVhURU5ERURfQVNDSUkgPSAvXltcXHgwMS1cXHhGRl0qJC87XG5cbiAgICBjb25zdCB0b1N0ciA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGxldCBkZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFwiXCI7XG4gICAgICBpZiAoIXZhbCkgcmV0dXJuIGRlZjtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKSByZXR1cm4gdmFsO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbC5qb2luKFwiXCIpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG52bCQxID0gKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBhID09PSBudWxsID8gYiA6IGE7XG4gICAgfTtcblxuICAgIC8qXHJcbiAgICAqIFNwbGl0IHN0cmluZyB0byB3b3Jkcy4gWW91IGNhbiBzZXQgc3BlY2lmaWVkIHBhdHRlciB0byBzcGxpdFxyXG4gICAgKiAqL1xuXG4gICAgY29uc3Qgd29yZHMgPSAocywgcGF0dGVybiwgZmxhZ3MpID0+IHtcbiAgICAgIGxldCByZWdleHA7XG5cbiAgICAgIGlmICghcGF0dGVybikge1xuICAgICAgICByZWdleHAgPSBSRUdFWFBfRVhURU5ERURfQVNDSUkudGVzdChzKSA/IFJFR0VYUF9MQVRJTl9XT1JEIDogUkVHRVhQX1dPUkQ7XG4gICAgICB9IGVsc2UgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmVnZXhwID0gcGF0dGVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAocGF0dGVybiwgbnZsJDEoZmxhZ3MsICcnKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudmwkMSh0b1N0cihzKS5tYXRjaChyZWdleHApLCBbXSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNhcGl0YWxpemUgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHN0cm9uZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGxldCBfcyA9IHRvU3RyKHMpO1xuXG4gICAgICBsZXQgbGFzdCA9IF9zLnN1YnN0cigxKTtcblxuICAgICAgcmV0dXJuIF9zLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgKHN0cm9uZyA/IGxhc3QudG9Mb3dlckNhc2UoKSA6IGxhc3QpO1xuICAgIH07XG5cbiAgICBjb25zdCBjYW1lbENhc2UkMSA9IHMgPT4ge1xuICAgICAgcmV0dXJuIHdvcmRzKHRvU3RyKHMpKS5tYXAoKGVsLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBpID09PSAwID8gZWwudG9Mb3dlckNhc2UoKSA6IGNhcGl0YWxpemUoZWwpO1xuICAgICAgfSkuam9pbihcIlwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZGFzaGVkTmFtZSQxID0gcyA9PiB3b3Jkcyh0b1N0cihzKSkubWFwKGVsID0+IGVsLnRvTG93ZXJDYXNlKCkpLmpvaW4oXCItXCIpO1xuXG4gICAgY29uc3QgZGVjYXBpdGFsaXplID0gcyA9PiB7XG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgcmV0dXJuIF9zLnN1YnN0cigwLCAxKS50b0xvd2VyQ2FzZSgpICsgX3Muc3Vic3RyKDEpO1xuICAgIH07XG5cbiAgICBjb25zdCBrZWJhYiA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICBsZXQgam9pbldpdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICctJztcbiAgICAgIHJldHVybiB3b3Jkcyh0b1N0cihzKSkubWFwKGVsID0+IGVsLnRvTG93ZXJDYXNlKCkpLmpvaW4oam9pbldpdGgpO1xuICAgIH07XG5cbiAgICBjb25zdCBsb3dlciA9IHMgPT4gdG9TdHIocykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8qXHJcbiAgICAqIFNwbGl0IHN0cmluZyB0byBjaGFycyBhcnJheSB3aXRoIGlnbm9yZXNcclxuICAgICogKi9cblxuICAgIGNvbnN0IGNoYXJzJDEgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IGlnbm9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gICAgICByZXR1cm4gdG9TdHIocykuc3BsaXQoXCJcIikuZmlsdGVyKGVsID0+ICFpZ25vcmUuaW5jbHVkZXMoZWwpKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmV2ZXJzZSA9IChzLCBpZ25vcmUpID0+IGNoYXJzJDEodG9TdHIocyksIGlnbm9yZSkucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG5cbiAgICBjb25zdCBzaHVmZmxlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICBsZXQgX2EgPSBbLi4uYV07XG4gICAgICBsZXQgaSA9IF9hLmxlbmd0aCxcbiAgICAgICAgICB0LFxuICAgICAgICAgIHI7XG5cbiAgICAgIHdoaWxlICgwICE9PSBpKSB7XG4gICAgICAgIHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKTtcbiAgICAgICAgaSAtPSAxO1xuICAgICAgICB0ID0gX2FbaV07XG4gICAgICAgIF9hW2ldID0gX2Fbcl07XG4gICAgICAgIF9hW3JdID0gdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9hO1xuICAgIH07XG5cbiAgICBjb25zdCBzaHVmZmxlID0gcyA9PiBzaHVmZmxlQXJyYXkodG9TdHIocykuc3BsaXQoXCJcIikpLmpvaW4oXCJcIik7XG5cbiAgICBjb25zdCBzbmFrZSA9IHMgPT4gd29yZHModG9TdHIocykpLm1hcChlbCA9PiBlbC50b0xvd2VyQ2FzZSgpKS5qb2luKFwiX1wiKTtcblxuICAgIGNvbnN0IF9zd2FwID0gKHN3YXBwZWQsIGNoYXIpID0+IHtcbiAgICAgIGNvbnN0IGxjID0gY2hhci50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgdWMgPSBjaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICByZXR1cm4gc3dhcHBlZCArIChjaGFyID09PSBsYyA/IHVjIDogbGMpO1xuICAgIH07XG5cbiAgICBjb25zdCBzd2FwID0gcyA9PiB0b1N0cihzKS5zcGxpdChcIlwiKS5yZWR1Y2UoX3N3YXAsICcnKTtcblxuICAgIGNvbnN0IHRpdGxlJDEgPSBmdW5jdGlvbiAocywgbm9TcGxpdCkge1xuICAgICAgbGV0IHNlcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogXCJcIjtcblxuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGNvbnN0IHJlZ2V4cCA9IFJFR0VYUF9FWFRFTkRFRF9BU0NJSS50ZXN0KF9zKSA/IFJFR0VYUF9MQVRJTl9XT1JEIDogUkVHRVhQX1dPUkQ7XG4gICAgICBjb25zdCBub1NwbGl0QXJyYXkgPSBBcnJheS5pc0FycmF5KG5vU3BsaXQpID8gbm9TcGxpdCA6IHR5cGVvZiBub1NwbGl0ICE9PSBcInN0cmluZ1wiID8gW10gOiBub1NwbGl0LnNwbGl0KHNlcCk7XG4gICAgICByZXR1cm4gcy5yZXBsYWNlKHJlZ2V4cCwgKHcsIGkpID0+IHtcbiAgICAgICAgY29uc3QgaXNOb1NwbGl0ID0gaSAmJiBub1NwbGl0QXJyYXkuaW5jbHVkZXMoX3NbaSAtIDFdKTtcbiAgICAgICAgcmV0dXJuIGlzTm9TcGxpdCA/IGxvd2VyKHcpIDogY2FwaXRhbGl6ZSh3KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cHBlciA9IHMgPT4gdG9TdHIocykudG9VcHBlckNhc2UoKTtcblxuICAgIC8qXHJcbiAgICAqIEdldCBzdHJpbmcgbGVuZ3RoXHJcbiAgICAqICovXG5cbiAgICBjb25zdCBjb3VudCA9IHMgPT4gdG9TdHIocykubGVuZ3RoO1xuXG4gICAgY29uc3QgdW5pcXVlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICBsZXQgX2EgPSBbLi4uYV07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX2EubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgX2EubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICBpZiAoX2FbaV0gPT09IF9hW2pdKSBfYS5zcGxpY2Uoai0tLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2E7XG4gICAgfTtcblxuICAgIGNvbnN0IGNvdW50Q2hhcnMgPSAocywgaWdub3JlKSA9PiBjaGFycyQxKHMsIGlnbm9yZSkubGVuZ3RoO1xuICAgIGNvbnN0IGNvdW50VW5pcXVlQ2hhcnMgPSAocywgaWdub3JlKSA9PiB1bmlxdWVBcnJheShjaGFycyQxKHMsIGlnbm9yZSkpLmxlbmd0aDtcblxuICAgIGNvbnN0IGNvdW50U3Vic3RyID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCBzdWIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFwiXCI7XG5cbiAgICAgIGxldCBfcyA9IHRvU3RyKHMpO1xuXG4gICAgICBsZXQgX3N1YiA9IHRvU3RyKHN1Yik7XG5cbiAgICAgIHJldHVybiBfcyA9PT0gJycgfHwgX3N1YiA9PT0gJycgPyAwIDogX3Muc3BsaXQoX3N1YikubGVuZ3RoIC0gMTtcbiAgICB9O1xuXG4gICAgY29uc3QgY291bnRXb3JkcyA9IChzLCBwYXR0ZXJuLCBmbGFncykgPT4gd29yZHMocywgcGF0dGVybiwgZmxhZ3MpLmxlbmd0aDtcbiAgICBjb25zdCBjb3VudFVuaXF1ZVdvcmRzID0gKHMsIHBhdHRlcm4sIGZsYWdzKSA9PiB1bmlxdWVBcnJheSh3b3JkcyhzLCBwYXR0ZXJuLCBmbGFncykpLmxlbmd0aDtcblxuICAgIGNvbnN0IGVzY2FwZUNoYXJhY3RlcnNNYXAgPSB7XG4gICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICc+JzogJyZndDsnLFxuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICBcIidcIjogJyYjeDI3OycsXG4gICAgICAnYCc6ICcmI3g2MDsnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VTcGVjaWFsQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGVzY2FwZUNoYXJhY3RlcnNNYXBbY2hhcmFjdGVyXTtcbiAgICB9XG5cbiAgICBjb25zdCBlc2NhcGVIdG1sID0gcyA9PiB0b1N0cihzKS5yZXBsYWNlKFJFR0VYUF9IVE1MX1NQRUNJQUxfQ0hBUkFDVEVSUywgcmVwbGFjZVNwZWNpYWxDaGFyYWN0ZXIpO1xuXG4gICAgY29uc3QgdW5lc2NhcGVDaGFyc01hcCA9IHtcbiAgICAgICc8JzogLygmbHQ7KXwoJiN4MCozYzspfCgmIzAqNjA7KS9naSxcbiAgICAgICc+JzogLygmZ3Q7KXwoJiN4MCozZTspfCgmIzAqNjI7KS9naSxcbiAgICAgICcmJzogLygmYW1wOyl8KCYjeDAqMjY7KXwoJiMwKjM4OykvZ2ksXG4gICAgICAnXCInOiAvKCZxdW90Oyl8KCYjeDAqMjI7KXwoJiMwKjM0OykvZ2ksXG4gICAgICBcIidcIjogLygmI3gwKjI3Oyl8KCYjMCozOTspL2dpLFxuICAgICAgJ2AnOiAvKCYjeDAqNjA7KXwoJiMwKjk2OykvZ2lcbiAgICB9O1xuICAgIGNvbnN0IGNoYXJzID0gT2JqZWN0LmtleXModW5lc2NhcGVDaGFyc01hcCk7XG5cbiAgICBmdW5jdGlvbiByZWR1Y2VVbmVzY2FwZWRTdHJpbmcoc3RyaW5nLCBrZXkpIHtcbiAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSh1bmVzY2FwZUNoYXJzTWFwW2tleV0sIGtleSk7XG4gICAgfVxuXG4gICAgY29uc3QgdW5lc2NhcGVIdG1sID0gcyA9PiBjaGFycy5yZWR1Y2UocmVkdWNlVW5lc2NhcGVkU3RyaW5nLCB0b1N0cihzKSk7XG5cbiAgICBjb25zdCB1bmlxdWUgPSAocywgaWdub3JlKSA9PiB1bmlxdWVBcnJheShjaGFycyQxKHMsIGlnbm9yZSkpLmpvaW4oXCJcIik7XG5cbiAgICBjb25zdCB1bmlxdWVXb3JkcyA9IChzLCBwYXR0ZXJuLCBmbGFncykgPT4gdW5pcXVlQXJyYXkod29yZHMocywgcGF0dGVybiwgZmxhZ3MpKS5qb2luKFwiXCIpO1xuXG4gICAgLypcclxuICAgICogR2V0IHN1YnN0cmluZyBmcm9tIHN0cmluZy5cclxuICAgICogKi9cblxuICAgIGNvbnN0IHN1YnN0ciA9IChzLCBzdGFydCwgbGVuKSA9PiB0b1N0cihzKS5zdWJzdHIoc3RhcnQsIGxlbik7XG5cbiAgICAvKlxyXG4gICAgKiBHZXQgTiBmaXJzdCBjaGFycyBmcm9tIHN0cmluZy5cclxuICAgICogKi9cblxuICAgIGNvbnN0IGZpcnN0ID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICByZXR1cm4gc3Vic3RyKHRvU3RyKHMpLCAwLCBsZW4pO1xuICAgIH07XG5cbiAgICAvKlxyXG4gICAgKiBHZXQgTiBsYXN0IGNoYXJzIGZyb20gc3RyaW5nLlxyXG4gICAgKiAqL1xuXG4gICAgY29uc3QgbGFzdCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICBsZXQgbGVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgcmV0dXJuIF9zID8gc3Vic3RyKF9zLCBfcy5sZW5ndGggLSBsZW4pIDogJyc7XG4gICAgfTtcblxuICAgIGNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmO1xuICAgIGNvbnN0IEJZVEVfT1JERVJfTUFSSyA9ICdcXHVGRUZGJztcblxuICAgIGNvbnN0IGNsaXAgPSBmdW5jdGlvbiAodmFsLCBtaW4pIHtcbiAgICAgIGxldCBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICBpZiAodmFsIDwgbWluKSByZXR1cm4gbWluO1xuICAgICAgaWYgKHZhbCA+IG1heCkgcmV0dXJuIG1heDtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcblxuICAgIGNvbnN0IHRvSW50ID0gdmFsID0+IHtcbiAgICAgIGlmICh2YWwgPT09IEluZmluaXR5KSByZXR1cm4gTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgIGlmICh2YWwgPT09IC1JbmZpbml0eSkgcmV0dXJuIC1NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgcmV0dXJuIH5+dmFsO1xuICAgIH07XG5cbiAgICAvKlxyXG4gICAgKiBUcnVuY2F0ZXMgYHN1YmplY3RgIHRvIGEgbmV3IGBsZW5ndGhgIHdpdGggc3BlY2lmaWVkIGVuZGluZy5cclxuICAgICogKi9cblxuICAgIGNvbnN0IHRydW5jYXRlID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICBsZXQgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLi4uJztcblxuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGxldCBfbGVuID0gIWxlbiA/IF9zLmxlbmd0aCA6IGNsaXAodG9JbnQobGVuKSwgMCwgTUFYX1NBRkVfSU5URUdFUik7XG5cbiAgICAgIHJldHVybiBzdWJzdHIoX3MsIDAsIF9sZW4pICsgKF9zLmxlbmd0aCA9PT0gX2xlbiA/ICcnIDogZW5kKTtcbiAgICB9O1xuXG4gICAgLypcclxuICAgICogU2xpY2Ugc3RyaW5nIHRvIE4gcGFydHMuXHJcbiAgICAqICovXG5cbiAgICBjb25zdCBzbGljZSQxID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCBwYXJ0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcblxuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgIGxldCBsZW4gPSBNYXRoLnJvdW5kKF9zLmxlbmd0aCAvIHBhcnRzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0czsgaSsrKSB7XG4gICAgICAgIHJlcy5wdXNoKHN1YnN0cihfcywgaSAqIGxlbiwgbGVuKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiBUcnVuY2F0ZXMgYHN1YmplY3RgIHRvIGEgbmV3IGBsZW5ndGhgIGFuZCBkb2VzIG5vdCBicmVhayB0aGUgd29yZHMgd2l0aCBzcGVjaWZpZWQgZW5kaW5nLlxuICAgICogKi9cblxuICAgIGNvbnN0IHBydW5lID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICBsZXQgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcIlwiO1xuXG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgbGV0IF9sZW4gPSAhbGVuID8gX3MubGVuZ3RoIDogY2xpcCh0b0ludChsZW4pLCAwLCBNQVhfU0FGRV9JTlRFR0VSKTtcblxuICAgICAgbGV0IF90cnVuY2F0ZWRMZW4gPSAwO1xuICAgICAgY29uc3QgcGF0dGVybiA9IFJFR0VYUF9FWFRFTkRFRF9BU0NJSS50ZXN0KF9zKSA/IFJFR0VYUF9MQVRJTl9XT1JEIDogUkVHRVhQX1dPUkQ7XG5cbiAgICAgIF9zLnJlcGxhY2UocGF0dGVybiwgKHdvcmQsIG9mZnNldCkgPT4ge1xuICAgICAgICBjb25zdCB3b3JkTGVuZ3RoID0gb2Zmc2V0ICsgd29yZC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHdvcmRMZW5ndGggPD0gX2xlbiAtIGVuZC5sZW5ndGgpIHtcbiAgICAgICAgICBfdHJ1bmNhdGVkTGVuID0gd29yZExlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfcy5zdWJzdHIoMCwgX3RydW5jYXRlZExlbikgKyBlbmQ7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlcGVhdCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICBsZXQgdGltZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIGxldCBfcyA9IHRvU3RyKHMpO1xuXG4gICAgICBsZXQgX3RpbWVzID0gIXRpbWVzID8gX3MubGVuZ3RoIDogY2xpcCh0b0ludCh0aW1lcyksIDAsIE1BWF9TQUZFX0lOVEVHRVIpO1xuXG4gICAgICBjb25zdCBfb3JpZ2luID0gX3M7XG5cbiAgICAgIGlmICh0aW1lcyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfdGltZXMgLSAxOyBpKyspIHtcbiAgICAgICAgX3MgKz0gX29yaWdpbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9zO1xuICAgIH07XG5cbiAgICBjb25zdCBwYWRCdWlsZGVyID0gZnVuY3Rpb24gKHBhZCkge1xuICAgICAgbGV0IGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICAgIGNvbnN0IHBhZExlbmd0aCA9IHBhZC5sZW5ndGg7XG4gICAgICBjb25zdCBsZW5ndGggPSBsZW4gLSBwYWRMZW5ndGg7XG4gICAgICByZXR1cm4gcmVwZWF0KHBhZCwgbGVuZ3RoICsgMSkuc3Vic3RyKDAsIGxlbik7XG4gICAgfTtcblxuICAgIGNvbnN0IF9wYWQgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHBhZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJcIjtcbiAgICAgIGxldCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gICAgICBsZXQgbGVmdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgICAgIGxldCBfcyA9IHRvU3RyKHMpO1xuXG4gICAgICBsZXQgX2xlbiA9ICFsZW4gPyBfcy5sZW5ndGggOiBjbGlwKHRvSW50KGxlbiksIDAsIE1BWF9TQUZFX0lOVEVHRVIpO1xuXG4gICAgICBsZXQgX3BhZExlbiA9IHBhZC5sZW5ndGg7XG5cbiAgICAgIGxldCBfcGFkZGluZ0xlbiA9IF9sZW4gLSBfcy5sZW5ndGg7XG5cbiAgICAgIGxldCBfc2lkZUxlbiA9IF9wYWRkaW5nTGVuO1xuXG4gICAgICBpZiAoX3BhZGRpbmdMZW4gPD0gMCB8fCBfcGFkTGVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBfcztcbiAgICAgIH1cblxuICAgICAgbGV0IHBhZHMgPSBwYWRCdWlsZGVyKHBhZCwgX3NpZGVMZW4pO1xuICAgICAgcmV0dXJuIGxlZnQgPyBwYWRzICsgX3MgOiBfcyArIHBhZHM7XG4gICAgfTtcblxuICAgIGNvbnN0IGxwYWQgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHBhZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyAnO1xuICAgICAgbGV0IGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgIHJldHVybiBfcGFkKHMsIGxlbiwgcGFkLCB0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJwYWQgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHBhZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyAnO1xuICAgICAgbGV0IGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgIHJldHVybiBfcGFkKHMsIGxlbiwgcGFkLCBmYWxzZSk7XG4gICAgfTtcbiAgICBjb25zdCBwYWQgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHBhZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgICBsZXQgbGVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuXG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgbGV0IF9sZW4gPSAhbGVuID8gX3MubGVuZ3RoIDogY2xpcCh0b0ludChsZW4pLCAwLCBNQVhfU0FGRV9JTlRFR0VSKTtcblxuICAgICAgbGV0IF9wYWRMZW4gPSBwYWQubGVuZ3RoO1xuXG4gICAgICBsZXQgX3BhZGRpbmdMZW4gPSBfbGVuIC0gX3MubGVuZ3RoO1xuXG4gICAgICBsZXQgX3NpZGVMZW4gPSB0b0ludChfcGFkZGluZ0xlbiAvIDIpOyAvLz9cblxuXG4gICAgICBsZXQgX3JlbWFpbmluZ0xlbiA9IF9wYWRkaW5nTGVuICUgMjsgLy8/XG5cblxuICAgICAgaWYgKF9wYWRkaW5nTGVuIDw9IDAgfHwgX3BhZExlbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gX3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYWRCdWlsZGVyKHBhZCwgX3NpZGVMZW4pICsgX3MgKyBwYWRCdWlsZGVyKHBhZCwgX3NpZGVMZW4gKyBfcmVtYWluaW5nTGVuKTsgLy8/XG4gICAgfTtcblxuICAgIGNvbnN0IGluc2VydCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICBsZXQgc2JqID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICAgIGxldCBwb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG5cbiAgICAgIGxldCBfcyA9IHRvU3RyKHMpO1xuXG4gICAgICByZXR1cm4gX3Muc3Vic3RyKDAsIHBvcykgKyBzYmogKyBfcy5zdWJzdHIocG9zKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVkdWNlID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZTtcbiAgICBjb25zdCByZWR1Y2VSaWdodCA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodDtcbiAgICBjb25zdCB0cmltID0gKHMsIHdzKSA9PiBsdHJpbShydHJpbShzLCB3cyksIHdzKTtcbiAgICBjb25zdCBsdHJpbSA9IChzLCB3cykgPT4ge1xuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGlmICghd3MpIHtcbiAgICAgICAgcmV0dXJuIF9zLnJlcGxhY2UoUkVHRVhQX1RSSU1fTEVGVCwgJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAod3MgPT09ICcnIHx8IF9zID09PSAnJykge1xuICAgICAgICByZXR1cm4gX3M7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygd3MgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgd3MgPSAnJztcbiAgICAgIH1cblxuICAgICAgbGV0IG1hdGNoID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZWR1Y2UuY2FsbChfcywgKHRyaW1tZWQsIGNoYXIpID0+IHtcbiAgICAgICAgaWYgKG1hdGNoICYmIHdzLmluY2x1ZGVzKGNoYXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaW1tZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRjaCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJpbW1lZCArIGNoYXI7XG4gICAgICB9LCAnJyk7XG4gICAgfTtcbiAgICBjb25zdCBydHJpbSA9IChzLCB3cykgPT4ge1xuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGlmICghd3MpIHtcbiAgICAgICAgcmV0dXJuIF9zLnJlcGxhY2UoUkVHRVhQX1RSSU1fUklHSFQsICcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdzID09PSAnJyB8fCBfcyA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIF9zO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHdzICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHdzID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGxldCBtYXRjaCA9IHRydWU7XG4gICAgICByZXR1cm4gcmVkdWNlUmlnaHQuY2FsbChfcywgKHRyaW1tZWQsIGNoYXIpID0+IHtcbiAgICAgICAgaWYgKG1hdGNoICYmIHdzLmluY2x1ZGVzKGNoYXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaW1tZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRjaCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY2hhciArIHRyaW1tZWQ7XG4gICAgICB9LCAnJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IGVuZHNXaXRoID0gKHMsIGVuZCwgcG9zKSA9PiB0b1N0cihzKS5lbmRzV2l0aChlbmQsIHBvcyk7XG5cbiAgICBjb25zdCBpc0FscGhhID0gcyA9PiBSRUdFWFBfQUxQSEEudGVzdCh0b1N0cihzKSk7XG5cbiAgICBjb25zdCBpc0FscGhhRGlnaXQgPSBzID0+IFJFR0VYUF9BTFBIQV9ESUdJVC50ZXN0KHRvU3RyKHMpKTtcblxuICAgIGNvbnN0IGlzRGlnaXQgPSBzID0+IFJFR0VYUF9ESUdJVC50ZXN0KHRvU3RyKHMpKTtcblxuICAgIGNvbnN0IGlzQmxhbmsgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHN0cm9uZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgIHJldHVybiBzdHJvbmcgPyB0b1N0cihzKS5sZW5ndGggPT09IDAgOiB0cmltKHMpLmxlbmd0aCA9PT0gMDtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNFbXB0eSA9IHMgPT4gdHJpbShzKS5sZW5ndGggPT09IDA7XG5cbiAgICBjb25zdCBpc0xvd2VyID0gcyA9PiBsb3dlcihzKSA9PT0gcztcblxuICAgIGNvbnN0IGlzVXBwZXIgPSBzID0+IHVwcGVyKHMpID09PSBzO1xuXG4gICAgY29uc3Qgc3RhcnRXaXRoID0gKHMsIHN0YXJ0LCBwb3MpID0+IHRvU3RyKHMpLnN0YXJ0c1dpdGgoc3RhcnQsIHBvcyk7XG5cbiAgICBjb25zdCBzdHJpcFRhZ3NBbGwgPSBzID0+IHRvU3RyKHMpLnJlcGxhY2UoUkVHRVhQX1RBR1MsICcnKTtcbiAgICBjb25zdCBzdHJpcFRhZ3MgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IGFsbG93ZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgbGV0IHRhZ3MgPSAvPFxcLz8oW2Etel1bYS16MC05XSopXFxiW14+XSo+L2dpO1xuICAgICAgcmV0dXJuIF9zLnJlcGxhY2UodGFncywgKCQwLCAkMSkgPT4ge1xuICAgICAgICByZXR1cm4gYWxsb3dlZC5pbmNsdWRlcygkMSkgPyAkMCA6ICcnO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qXHJcbiAgICAqIE9yaWdpbmFsIGNvZGVcclxuICAgICogY29weXJpZ2h0IChjKSAyMDA3LXByZXNlbnQgYnkgQWxleGFuZHJ1IE3Eg3LEg8iZdGVhbnUgPGhlbGxvQGFsZXhlaS5ybz5cclxuICAgICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vYWxleGVpL3NwcmludGYuanNcclxuICAgICogTGljZW5zZTogQlNELTMtQ2xhdXNlIExpY2Vuc2VcclxuICAgICogKi9cbiAgICBjb25zdCByZSA9IHtcbiAgICAgIG5vdF9zdHJpbmc6IC9bXnNdLyxcbiAgICAgIG5vdF9ib29sOiAvW150XS8sXG4gICAgICBub3RfdHlwZTogL1teVF0vLFxuICAgICAgbm90X3ByaW1pdGl2ZTogL1tedl0vLFxuICAgICAgbnVtYmVyOiAvW2RpZWZnXS8sXG4gICAgICBudW1lcmljX2FyZzogL1tiY2RpZWZndXhYXS8sXG4gICAgICBqc29uOiAvW2pdLyxcbiAgICAgIG5vdF9qc29uOiAvW15qXS8sXG4gICAgICB0ZXh0OiAvXlteXFx4MjVdKy8sXG4gICAgICBtb2R1bG86IC9eXFx4MjV7Mn0vLFxuICAgICAgcGxhY2Vob2xkZXI6IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW14pXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1naWpvc3RUdXZ4WF0pLyxcbiAgICAgIGtleTogL14oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgIGtleV9hY2Nlc3M6IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICBpbmRleF9hY2Nlc3M6IC9eXFxbKFxcZCspXFxdLyxcbiAgICAgIHNpZ246IC9eWystXS9cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9mb3JtYXQocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgbGV0IGN1cnNvciA9IDEsXG4gICAgICAgICAgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCxcbiAgICAgICAgICBhcmcsXG4gICAgICAgICAgb3V0cHV0ID0gJycsXG4gICAgICAgICAgcGgsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIHBhZF9jaGFyYWN0ZXIsXG4gICAgICAgICAgcGFkX2xlbmd0aCxcbiAgICAgICAgICBpc19wb3NpdGl2ZSxcbiAgICAgICAgICBzaWduO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG91dHB1dCArPSBwYXJzZV90cmVlW2ldO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHBoID0gcGFyc2VfdHJlZVtpXTsgLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seVxuXG4gICAgICAgICAgaWYgKHBoLmtleXMpIHtcbiAgICAgICAgICAgIC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwaC5rZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBDYW5ub3QgYWNjZXNzIHByb3BlcnR5IFwiJXNcIiBvZiB1bmRlZmluZWQgdmFsdWUgXCIlc1wiJywgcGgua2V5c1trXSwgcGgua2V5c1trIC0gMV0pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGFyZyA9IGFyZ1twaC5rZXlzW2tdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHBoLnBhcmFtX25vKSB7XG4gICAgICAgICAgICAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbcGgucGFyYW1fbm9dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChpbXBsaWNpdClcbiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yKytdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZS5ub3RfdHlwZS50ZXN0KHBoLnR5cGUpICYmIHJlLm5vdF9wcmltaXRpdmUudGVzdChwaC50eXBlKSAmJiBhcmcgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgYXJnID0gYXJnKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlLm51bWVyaWNfYXJnLnRlc3QocGgudHlwZSkgJiYgdHlwZW9mIGFyZyAhPT0gJ251bWJlcicgJiYgaXNOYU4oYXJnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJVQnKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICBpc19wb3NpdGl2ZSA9IGFyZyA+PSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXRjaCAocGgudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApLnRvU3RyaW5nKDIpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgIGFyZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYXJnLCAxMCkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdqJzpcbiAgICAgICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCBwaC53aWR0aCA/IHBhcnNlSW50KHBoLndpZHRoKSA6IDApO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbCgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gU3RyaW5nKE51bWJlcihhcmcudG9QcmVjaXNpb24ocGgucHJlY2lzaW9uKSkpIDogcGFyc2VGbG9hdChhcmcpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoOCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKGFyZyk7XG4gICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoISFhcmcpO1xuICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgICAgYXJnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKSA+Pj4gMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICBhcmcgPSBhcmcudmFsdWVPZigpO1xuICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlLmpzb24udGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGFyZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpICYmICghaXNfcG9zaXRpdmUgfHwgcGguc2lnbikpIHtcbiAgICAgICAgICAgICAgc2lnbiA9IGlzX3Bvc2l0aXZlID8gJysnIDogJy0nO1xuICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoKS5yZXBsYWNlKHJlLnNpZ24sICcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNpZ24gPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFkX2NoYXJhY3RlciA9IHBoLnBhZF9jaGFyID8gcGgucGFkX2NoYXIgPT09ICcwJyA/ICcwJyA6IHBoLnBhZF9jaGFyLmNoYXJBdCgxKSA6ICcgJztcbiAgICAgICAgICAgIHBhZF9sZW5ndGggPSBwaC53aWR0aCAtIChzaWduICsgYXJnKS5sZW5ndGg7XG4gICAgICAgICAgICBwYWQgPSBwaC53aWR0aCA/IHBhZF9sZW5ndGggPiAwID8gcGFkX2NoYXJhY3Rlci5yZXBlYXQocGFkX2xlbmd0aCkgOiAnJyA6ICcnO1xuICAgICAgICAgICAgb3V0cHV0ICs9IHBoLmFsaWduID8gc2lnbiArIGFyZyArIHBhZCA6IHBhZF9jaGFyYWN0ZXIgPT09ICcwJyA/IHNpZ24gKyBwYWQgKyBhcmcgOiBwYWQgKyBzaWduICsgYXJnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIGNvbnN0IHNwcmludGZfY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9wYXJzZShmbXQpIHtcbiAgICAgIGlmIChzcHJpbnRmX2NhY2hlW2ZtdF0pIHtcbiAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XTtcbiAgICAgIH1cblxuICAgICAgbGV0IF9mbXQgPSBmbXQsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcGFyc2VfdHJlZSA9IFtdLFxuICAgICAgICAgIGFyZ19uYW1lcyA9IDA7XG5cbiAgICAgIHdoaWxlIChfZm10KSB7XG4gICAgICAgIGlmICgobWF0Y2ggPSByZS50ZXh0LmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSByZS5tb2R1bG8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICBwYXJzZV90cmVlLnB1c2goJyUnKTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSByZS5wbGFjZWhvbGRlci5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgYXJnX25hbWVzIHw9IDE7XG4gICAgICAgICAgICBsZXQgZmllbGRfbGlzdCA9IFtdLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50X2ZpZWxkID0gbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgZmllbGRfbWF0Y2ggPSBbXTtcblxuICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleS5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKTtcblxuICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXlfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmluZGV4X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcmdfbmFtZXMgfD0gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJzZV90cmVlLnB1c2goe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hdGNoWzBdLFxuICAgICAgICAgICAgcGFyYW1fbm86IG1hdGNoWzFdLFxuICAgICAgICAgICAga2V5czogbWF0Y2hbMl0sXG4gICAgICAgICAgICBzaWduOiBtYXRjaFszXSxcbiAgICAgICAgICAgIHBhZF9jaGFyOiBtYXRjaFs0XSxcbiAgICAgICAgICAgIGFsaWduOiBtYXRjaFs1XSxcbiAgICAgICAgICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICAgICAgICAgIHByZWNpc2lvbjogbWF0Y2hbN10sXG4gICAgICAgICAgICB0eXBlOiBtYXRjaFs4XVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdID0gcGFyc2VfdHJlZTtcbiAgICB9XG5cbiAgICBjb25zdCBzcHJpbnRmID0ga2V5ID0+IHNwcmludGZfZm9ybWF0KHNwcmludGZfcGFyc2Uoa2V5KSwgYXJndW1lbnRzKTtcbiAgICBjb25zdCB2c3ByaW50ZiA9IChmbXQsIGFyZ3YpID0+IHNwcmludGYuYXBwbHkobnVsbCwgW2ZtdF0uY29uY2F0KGFyZ3YgfHwgW10pKTtcblxuICAgIGNvbnN0IGluY2x1ZGVzID0gKHMsIHN1YiwgcG9zKSA9PiB0b1N0cihzKS5pbmNsdWRlcyhzdWIsIHBvcyk7XG5cbiAgICBjb25zdCBzcGxpdCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIGxldCBzZXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICAgIGxldCBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgbGV0IHRyaW0gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7XG4gICAgICByZXR1cm4gdG9TdHIoc3RyKS5zcGxpdChzZXAsIGxpbWl0KS5tYXAoZWwgPT4gdHJpbSA/IGVsLnRyaW0oKSA6IGVsKS5maWx0ZXIoZWwgPT4gdHJpbSA/ICFpc0VtcHR5KGVsKSA6IHRydWUpO1xuICAgIH07XG5cbiAgICBjb25zdCBzdHJpcCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIGxldCB3aGF0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgbGV0IHJlcGxhY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFwiXCI7XG5cbiAgICAgIGxldCBfc3RyID0gdG9TdHIoc3RyKTtcblxuICAgICAgbGV0IHJlZ2V4cDtcbiAgICAgIGlmICghd2hhdCkgcmV0dXJuIF9zdHI7XG4gICAgICByZWdleHAgPSBuZXcgUmVnRXhwKHdoYXQsIFwiZ1wiKTtcbiAgICAgIHJldHVybiBfc3RyLnJlcGxhY2UocmVnZXhwLCByZXBsYWNlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgd3JhcFRhZyA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICBsZXQgdGFnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcImRpdlwiO1xuICAgICAgcmV0dXJuIGA8JHt0YWd9PiR7dG9TdHIocyl9PC8ke3RhZ30+YDtcbiAgICB9O1xuICAgIGNvbnN0IHdyYXAgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IGJlZm9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJcIjtcbiAgICAgIGxldCBhZnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogXCJcIjtcbiAgICAgIHJldHVybiBiZWZvcmUgKyB0b1N0cihzKSArIGFmdGVyO1xuICAgIH07XG5cbiAgICBjb25zdCBpc1N0cmluZyA9IHMgPT4gdHlwZW9mIHMgPT09IFwic3RyaW5nXCI7XG5cbiAgICBjb25zdCBtYXRjaGVzJDEgPSBmdW5jdGlvbiAocywgcGF0dGVybikge1xuICAgICAgbGV0IGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcblxuICAgICAgbGV0IF9zID0gdG9TdHIocyk7XG5cbiAgICAgIGxldCBwYXR0ZXJuU3RyO1xuXG4gICAgICBpZiAoIShwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICBwYXR0ZXJuU3RyID0gcGF0dGVybiA/IHRyaW0odG9TdHIocGF0dGVybikpIDogJyc7XG5cbiAgICAgICAgaWYgKCFwYXR0ZXJuU3RyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAocGF0dGVyblN0ciwgZmxhZ3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KF9zKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYXBwZW5kID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGxldCB3aGF0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICAgIGxldCB0aW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHJldHVybiB0b1N0cihzKSArIHJlcGVhdCh3aGF0LCB0aW1lcyk7XG4gICAgfTtcblxuICAgIGNvbnN0IHByZXBlbmQgPSBmdW5jdGlvbiAocykge1xuICAgICAgbGV0IHdoYXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAgICAgbGV0IHRpbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICAgICAgcmV0dXJuIHJlcGVhdCh3aGF0LCB0aW1lcykgKyB0b1N0cihzKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RyaXBCb29tID0gcyA9PiB7XG4gICAgICBsZXQgX3MgPSB0b1N0cihzKTtcblxuICAgICAgaWYgKF9zID09PSAnJykgcmV0dXJuIF9zO1xuICAgICAgcmV0dXJuIF9zWzBdID09PSBCWVRFX09SREVSX01BUksgPyBfcy5zdWJzdHIoMSkgOiBfcztcbiAgICB9O1xuXG4gICAgY29uc3Qgc2hvcnRlbiA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICBsZXQgbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTtcbiAgICAgIGxldCBkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLi4uJztcbiAgICAgIHJldHVybiAhdiA/IHYgOiBgJHt2LnN1YnN0cmluZygwLCBsKX0ke2R9JHt2LnN1YnN0cmluZyh2Lmxlbmd0aCAtIGwpfWA7XG4gICAgfTtcblxuICAgIHZhciBmID0ge1xuICAgICAgY2FtZWxDYXNlOiBjYW1lbENhc2UkMSxcbiAgICAgIGNhcGl0YWxpemUsXG4gICAgICBjaGFyczogY2hhcnMkMSxcbiAgICAgIGNvdW50LFxuICAgICAgY291bnRDaGFycyxcbiAgICAgIGNvdW50VW5pcXVlQ2hhcnMsXG4gICAgICBjb3VudFN1YnN0cixcbiAgICAgIGNvdW50V29yZHMsXG4gICAgICBjb3VudFVuaXF1ZVdvcmRzLFxuICAgICAgZGFzaGVkTmFtZTogZGFzaGVkTmFtZSQxLFxuICAgICAgZGVjYXBpdGFsaXplLFxuICAgICAga2ViYWIsXG4gICAgICBsb3dlcixcbiAgICAgIHJldmVyc2UsXG4gICAgICBzaHVmZmxlLFxuICAgICAgc25ha2UsXG4gICAgICBzd2FwLFxuICAgICAgdGl0bGU6IHRpdGxlJDEsXG4gICAgICB1cHBlcixcbiAgICAgIHdvcmRzLFxuICAgICAgd3JhcCxcbiAgICAgIHdyYXBUYWcsXG4gICAgICBlc2NhcGVIdG1sLFxuICAgICAgdW5lc2NhcGVIdG1sLFxuICAgICAgdW5pcXVlLFxuICAgICAgdW5pcXVlV29yZHMsXG4gICAgICBzdWJzdHIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3QsXG4gICAgICB0cnVuY2F0ZSxcbiAgICAgIHNsaWNlOiBzbGljZSQxLFxuICAgICAgcHJ1bmUsXG4gICAgICByZXBlYXQsXG4gICAgICBwYWQsXG4gICAgICBscGFkLFxuICAgICAgcnBhZCxcbiAgICAgIGluc2VydCxcbiAgICAgIHRyaW0sXG4gICAgICBsdHJpbSxcbiAgICAgIHJ0cmltLFxuICAgICAgZW5kc1dpdGgsXG4gICAgICBpc0FscGhhLFxuICAgICAgaXNBbHBoYURpZ2l0LFxuICAgICAgaXNEaWdpdCxcbiAgICAgIGlzQmxhbmssXG4gICAgICBpc0VtcHR5LFxuICAgICAgaXNMb3dlcixcbiAgICAgIGlzVXBwZXIsXG4gICAgICBzdGFydFdpdGgsXG4gICAgICBzdHJpcFRhZ3MsXG4gICAgICBzdHJpcFRhZ3NBbGwsXG4gICAgICBzcHJpbnRmLFxuICAgICAgdnNwcmludGYsXG4gICAgICBpbmNsdWRlcyxcbiAgICAgIHNwbGl0LFxuICAgICAgc3RyaXAsXG4gICAgICBpc1N0cmluZyxcbiAgICAgIG1hdGNoZXM6IG1hdGNoZXMkMSxcbiAgICAgIGFwcGVuZCxcbiAgICAgIHByZXBlbmQsXG4gICAgICBzdHJpcEJvb20sXG4gICAgICBzaG9ydGVuXG4gICAgfTtcblxuICAgIGNsYXNzIFN0ciB7XG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbGV0IHYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiXCI7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgbXV0YWJsZSA9IHRydWVcbiAgICAgICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgIHRoaXMudmFsdWUgPSB2LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMubXV0YWJsZSA9IG11dGFibGU7XG4gICAgICB9XG5cbiAgICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKGhpbnQpIHtcbiAgICAgICAgaWYgKGhpbnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICByZXR1cm4gK3RoaXMudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gXCJTdHJcIjtcbiAgICAgIH1cblxuICAgICAgdmFsKHYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ID09PSBcInVuZGVmaW5lZFwiIHx8IHYgPT09IG51bGwpIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdi50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpbW11dGFibGUoKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICAgICAgdGhpcy5tdXRhYmxlID0gIXN0YXRlO1xuICAgICAgfVxuXG4gICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIF9yZXN1bHQodikge1xuICAgICAgICBpZiAoIXRoaXMubXV0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBzdHIodik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZhbHVlID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGNhbWVsQ2FzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLmNhbWVsQ2FzZSh0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIGNhcGl0YWxpemUoc3Ryb25nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5jYXBpdGFsaXplKHRoaXMudmFsdWUsIHN0cm9uZykpO1xuICAgICAgfVxuXG4gICAgICBjaGFycyhpZ25vcmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLmNoYXJzKHRoaXMudmFsdWUsIGlnbm9yZSkpO1xuICAgICAgfVxuXG4gICAgICBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGYuY291bnQodGhpcy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGNvdW50Q2hhcnMoaWdub3JlKSB7XG4gICAgICAgIHJldHVybiBmLmNvdW50Q2hhcnModGhpcy52YWx1ZSwgaWdub3JlKTtcbiAgICAgIH1cblxuICAgICAgY291bnRVbmlxdWVDaGFycyhpZ25vcmUpIHtcbiAgICAgICAgcmV0dXJuIGYuY291bnRVbmlxdWVDaGFycyh0aGlzLnZhbHVlLCBpZ25vcmUpO1xuICAgICAgfVxuXG4gICAgICBjb3VudFN1YnN0cihzdWIpIHtcbiAgICAgICAgcmV0dXJuIGYuY291bnRTdWJzdHIodGhpcy52YWx1ZSwgc3ViKTtcbiAgICAgIH1cblxuICAgICAgY291bnRXb3JkcyhwYXR0ZXJuLCBmbGFncykge1xuICAgICAgICByZXR1cm4gZi5jb3VudENoYXJzKHRoaXMudmFsdWUsIHBhdHRlcm4sIGZsYWdzKTtcbiAgICAgIH1cblxuICAgICAgY291bnRVbmlxdWVXb3JkcyhwYXR0ZXJuLCBmbGFncykge1xuICAgICAgICByZXR1cm4gZi5jb3VudFVuaXF1ZUNoYXJzKHRoaXMudmFsdWUsIHBhdHRlcm4sIGZsYWdzKTtcbiAgICAgIH1cblxuICAgICAgZGFzaGVkTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLmRhc2hlZE5hbWUodGhpcy52YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICBkZWNhcGl0YWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5kZWNhcGl0YWxpemUodGhpcy52YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICBlbmRzV2l0aChzdHIsIHBvcykge1xuICAgICAgICByZXR1cm4gZi5lbmRzV2l0aCh0aGlzLnZhbHVlLCBzdHIsIHBvcyk7XG4gICAgICB9XG5cbiAgICAgIGVzY2FwZUh0bWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5lc2NhcGVIdG1sKHRoaXMudmFsdWUpKTtcbiAgICAgIH1cblxuICAgICAgZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5maXJzdCh0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIGluY2x1ZGVzKHN1YiwgcG9zKSB7XG4gICAgICAgIHJldHVybiBmLmluY2x1ZGVzKHRoaXMudmFsdWUsIHN1YiwgcG9zKTtcbiAgICAgIH1cblxuICAgICAgaW5zZXJ0KHN0ciwgcG9zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5pbnNlcnQodGhpcy52YWx1ZSwgc3RyLCBwb3MpKTtcbiAgICAgIH1cblxuICAgICAgaXNBbHBoYSgpIHtcbiAgICAgICAgcmV0dXJuIGYuaXNBbHBoYSh0aGlzLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaXNBbHBoYURpZ2l0KCkge1xuICAgICAgICByZXR1cm4gZi5pc0FscGhhRGlnaXQodGhpcy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlzQmxhbmsoc3Ryb25nKSB7XG4gICAgICAgIHJldHVybiBmLmlzQmxhbmsodGhpcy52YWx1ZSwgc3Ryb25nKTtcbiAgICAgIH1cblxuICAgICAgaXNEaWdpdCgpIHtcbiAgICAgICAgcmV0dXJuIGYuaXNEaWdpdCh0aGlzLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIGYuaXNFbXB0eSh0aGlzLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaXNMb3dlcigpIHtcbiAgICAgICAgcmV0dXJuIGYuaXNMb3dlcih0aGlzLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgc3RhdGljIGlzU3RyaW5nKHYpIHtcbiAgICAgICAgcmV0dXJuIGYuaXNTdHJpbmcodik7XG4gICAgICB9XG5cbiAgICAgIGlzVXBwZXIoKSB7XG4gICAgICAgIHJldHVybiBmLmlzVXBwZXIodGhpcy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGtlYmFiKGpvaW5XaXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5rZWJhYih0aGlzLnZhbHVlLCBqb2luV2l0aCkpO1xuICAgICAgfVxuXG4gICAgICBsYXN0KGxlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYubGFzdCh0aGlzLnZhbHVlLCBsZW4pKTtcbiAgICAgIH1cblxuICAgICAgbG93ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5sb3dlcih0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIG1hdGNoZXMocGF0dGVybiwgZmxhZ3MpIHtcbiAgICAgICAgcmV0dXJuIGYubWF0Y2hlcyh0aGlzLnZhbHVlLCBwYXR0ZXJuLCBmbGFncyk7XG4gICAgICB9XG5cbiAgICAgIHBhZChwYWQsIGxlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYucGFkKHRoaXMudmFsdWUsIHBhZCwgbGVuKSk7XG4gICAgICB9XG5cbiAgICAgIGxwYWQocGFkLCBsZW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLmxwYWQodGhpcy52YWx1ZSwgcGFkLCBsZW4pKTtcbiAgICAgIH1cblxuICAgICAgcnBhZChwYWQsIGxlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYucnBhZCh0aGlzLnZhbHVlLCBwYWQsIGxlbikpO1xuICAgICAgfVxuXG4gICAgICBwcnVuZShsZW4sIGVuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYucHJ1bmUodGhpcy52YWx1ZSwgbGVuLCBlbmQpKTtcbiAgICAgIH1cblxuICAgICAgcmVwZWF0KHRpbWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5yZXBlYXQodGhpcy52YWx1ZSwgdGltZXMpKTtcbiAgICAgIH1cblxuICAgICAgYXBwZW5kKHN0ciwgdGltZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLmFwcGVuZCh0aGlzLnZhbHVlLCBzdHIsIHRpbWVzKSk7XG4gICAgICB9XG5cbiAgICAgIHByZXBlbmQoc3RyLCB0aW1lcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYucHJlcGVuZCh0aGlzLnZhbHVlLCBzdHIsIHRpbWVzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldmVyc2UoaWdub3JlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5yZXZlcnNlKHRoaXMudmFsdWUsIGlnbm9yZSkpO1xuICAgICAgfVxuXG4gICAgICBzaHVmZmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYuc2h1ZmZsZSh0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIHNsaWNlKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5zbGljZSh0aGlzLnZhbHVlLCBwYXJ0cykpO1xuICAgICAgfVxuXG4gICAgICBzbmFrZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnNuYWtlKHRoaXMudmFsdWUpKTtcbiAgICAgIH1cblxuICAgICAgc3BsaXQoc2VwLCBsaW1pdCwgdHJpbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYuc3BsaXQodGhpcy52YWx1ZSwgc2VwLCBsaW1pdCwgdHJpbSkpO1xuICAgICAgfVxuXG4gICAgICBzcHJpbnRmKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnNwcmludGYodGhpcy52YWx1ZSwgLi4uYXJncykpO1xuICAgICAgfVxuXG4gICAgICB2c3ByaW50ZigpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnZzcHJpbnRmKHRoaXMudmFsdWUsIC4uLmFyZ3MpKTtcbiAgICAgIH1cblxuICAgICAgc3RhcnRXaXRoKHN0ciwgcG9zKSB7XG4gICAgICAgIHJldHVybiBmLnN0YXJ0V2l0aCh0aGlzLnZhbHVlLCBzdHIsIHBvcyk7XG4gICAgICB9XG5cbiAgICAgIHN0cmlwQm9vbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnN0cmlwQm9vbSh0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIHN0cmlwVGFncyhhbGxvd2VkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5zdHJpcFRhZ3ModGhpcy52YWx1ZSwgYWxsb3dlZCkpO1xuICAgICAgfVxuXG4gICAgICBzdHJpcFRhZ3NBbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5zdHJpcFRhZ3NBbGwodGhpcy52YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICBzdHJpcChzdHIsIHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnN0cmlwKHRoaXMudmFsdWUsIHN0ciwgcmVwbGFjZSkpO1xuICAgICAgfVxuXG4gICAgICBzdWJzdHIoc3RhcnQsIGxlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYuc3Vic3RyKHRoaXMudmFsdWUsIHN0YXJ0LCBsZW4pKTtcbiAgICAgIH1cblxuICAgICAgc3dhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnN3YXAodGhpcy52YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICB0aXRsZShub1NwbGl0LCBzZXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnRpdGxlKHRoaXMudmFsdWUsIG5vU3BsaXQsIHNlcCkpO1xuICAgICAgfVxuXG4gICAgICB0cmltKHdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi50cmltKHRoaXMudmFsdWUsIHdzKSk7XG4gICAgICB9XG5cbiAgICAgIGx0cmltKHdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi5sdHJpbSh0aGlzLnZhbHVlLCB3cykpO1xuICAgICAgfVxuXG4gICAgICBydHJpbSh3cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYucnRyaW0odGhpcy52YWx1ZSwgd3MpKTtcbiAgICAgIH1cblxuICAgICAgdHJ1bmNhdGUobGVuLCBlbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnRydW5jYXRlKHRoaXMudmFsdWUsIGxlbiwgZW5kKSk7XG4gICAgICB9XG5cbiAgICAgIHVuZXNjYXBlSHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnVuZXNjYXBlSHRtbCh0aGlzLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIHVuaXF1ZShpZ25vcmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnVuaXF1ZSh0aGlzLnZhbHVlLCBpZ25vcmUpKTtcbiAgICAgIH1cblxuICAgICAgdW5pcXVlV29yZHMocGF0dGVybiwgZmxhZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnVuaXF1ZVdvcmRzKHRoaXMudmFsdWUsIHBhdHRlcm4sIGZsYWdzKSk7XG4gICAgICB9XG5cbiAgICAgIHVwcGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYudXBwZXIodGhpcy52YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICB3b3JkcyhwYXR0ZXJuLCBmbGFncykge1xuICAgICAgICByZXR1cm4gZi53b3Jkcyh0aGlzLnZhbHVlLCBwYXR0ZXJuLCBmbGFncyk7XG4gICAgICB9XG5cbiAgICAgIHdyYXAoYmVmb3JlLCBhZnRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0KGYud3JhcCh0aGlzLnZhbHVlLCBiZWZvcmUsIGFmdGVyKSk7XG4gICAgICB9XG5cbiAgICAgIHdyYXBUYWcodGFnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQoZi53cmFwVGFnKHRoaXMudmFsdWUsIHRhZykpO1xuICAgICAgfVxuXG4gICAgICBzaG9ydGVuKGwsIGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdChmLnNob3J0ZW4odGhpcy52YWx1ZSwgbCwgZCkpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihTdHIsIGYpO1xuXG4gICAgY29uc3Qgc3RyID0gdiA9PiBuZXcgU3RyKHYpO1xuXG4gICAgY29uc3QgaXNBcnJheUxpa2UgPSBvYmogPT4gb2JqICYmIChBcnJheS5pc0FycmF5KG9iaikgfHwgdHlwZW9mIG9iai5sZW5ndGggPT09IFwibnVtYmVyXCIpO1xuXG4gICAgY29uc3QgZWFjaCA9IChjdHgsIGNiKSA9PiB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoY3R4KSkge1xyXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoY3R4LCBmdW5jdGlvbih2YWwsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgY2IuYXBwbHkodmFsLCBba2V5LCB2YWwsIGluZGV4KytdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yKGxldCBrZXkgaW4gY3R4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3R4Lmhhc093blByb3BlcnR5KGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgY2IuYXBwbHkoY3R4W2tleV0sIFtrZXksIGN0eFtrZXldLCBpbmRleCsrXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjdHhcclxuICAgIH07XG5cbiAgICBjb25zdCBNQVhfVUlEID0gMV8wMDBfMDAwO1xyXG5cclxuICAgIGNvbnN0IHVpZCA9IHByZWZpeCA9PiB7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBwcmVmaXggKz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7XHJcbiAgICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHByZWZpeFxyXG4gICAgfTtcblxuICAgIGNvbnN0IG1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8IEVsZW1lbnQucHJvdG90eXBlW1wibWF0Y2hlc1NlbGVjdG9yXCJdIHx8IEVsZW1lbnQucHJvdG90eXBlW1wid2Via2l0TWF0Y2hlc1NlbGVjdG9yXCJdIHx8IEVsZW1lbnQucHJvdG90eXBlW1wibW96TWF0Y2hlc1NlbGVjdG9yXCJdIHx8IEVsZW1lbnQucHJvdG90eXBlW1wibXNNYXRjaGVzU2VsZWN0b3JcIl0gfHwgRWxlbWVudC5wcm90b3R5cGVbXCJvTWF0Y2hlc1NlbGVjdG9yXCJdO1xuXG4gICAgY29uc3QgaXNMb2NhbGhvc3QgPSBob3N0ID0+IHtcclxuICAgICAgICBjb25zdCBob3N0bmFtZSA9IGhvc3QgfHwgZ2xvYmFsVGhpcy5sb2NhdGlvbi5ob3N0bmFtZTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICBob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIiB8fFxyXG4gICAgICAgICAgICBob3N0bmFtZSA9PT0gXCIxMjcuMC4wLjFcIiB8fFxyXG4gICAgICAgICAgICBob3N0bmFtZSA9PT0gXCJbOjoxXVwiIHx8XHJcbiAgICAgICAgICAgIGhvc3RuYW1lID09PSBcIlwiIHx8XHJcbiAgICAgICAgICAgIGhvc3RuYW1lLm1hdGNoKC9eMTI3KD86XFwuKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSl7M30kLykgIT09IG51bGxcclxuICAgICAgICApXHJcbiAgICB9O1xuXG4gICAgY29uc3QgaXNUb3VjaGFibGUgPSAoKSA9PiAoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApIHx8IChuYXZpZ2F0b3JbXCJtc01heFRvdWNoUG9pbnRzXCJdID4gMCkpO1xuXG4gICAgY29uc3QgZXhlYyA9IChmbiwgYXJncywgY29udGV4dCkgPT4ge1xyXG4gICAgICAgIGxldCBmdW5jO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgZnVuYyA9IGZuO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgIGlmICgvXlthLXpdK1tcXHcuXSpbXFx3XSQvaS50ZXN0KGZuKSkge1xyXG4gICAgICAgICAgICBjb25zdCBucyA9IGZuLnNwbGl0KFwiLlwiKTtcclxuICAgICAgICAgICAgZnVuYyA9IGdsb2JhbFRoaXM7XHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZ1bmMgPSBmdW5jW25zW2ldXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZ1bmMgPSBuZXcgRnVuY3Rpb24oXCJhXCIsIGZuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpXHJcbiAgICB9O1xuXG4gICAgY29uc3QgaXNQcml2YXRlQWRkcmVzcyA9IChsb2MgPSBnbG9iYWxUaGlzLmxvY2F0aW9uLmhvc3RuYW1lKSA9PiAvKF5sb2NhbGhvc3QpfCheMTI3XFwuKXwoXjE5MlxcLjE2OFxcLil8KF4xMFxcLil8KF4xNzJcXC4xWzYtOV1cXC4pfCheMTcyXFwuMlxcZFxcLil8KF4xNzJcXC4zWzAtMV1cXC4pfCheOjoxJCl8KF5bZkZdW2NDZERdKS8udGVzdCggbG9jICk7XG5cbiAgICBjb25zdCBpc1Zpc2libGUgPSAoZWxlbSkgPT4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xuXG4gICAgY29uc3QgaXNIaWRkZW4gPSBlbGVtID0+IHtcclxuICAgICAgICBjb25zdCBzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcclxuICAgICAgICByZXR1cm4gIWlzVmlzaWJsZShlbGVtKSB8fCArc1snb3BhY2l0eSddID09PSAwIHx8IGVsZW0uaGlkZGVuIHx8IHNbJ3Zpc2liaWxpdHknXSA9PT0gXCJoaWRkZW5cIjtcclxuICAgIH07XG5cbiAgICBjb25zdCBpblZpZXdwb3J0ID0gZWwgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgcmVjdC50b3AgPj0gMCAmJlxyXG4gICAgICAgICAgICByZWN0LmxlZnQgPj0gMCAmJlxyXG4gICAgICAgICAgICByZWN0LmJvdHRvbSA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmXHJcbiAgICAgICAgICAgIHJlY3QucmlnaHQgPD0gKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aClcclxuICAgICAgICApXHJcbiAgICB9O1xuXG4gICAgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxyXG5cclxuICAgIGNvbnN0IHRvVHlwZSA9IG9iaiA9PiAoe30pLnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcblxuICAgIGNvbnN0IHF1ZXJ5Q2hlY2sgPSBzID0+IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5xdWVyeVNlbGVjdG9yKHMpO1xyXG5cclxuICAgIGNvbnN0IGlzU2VsZWN0b3IgPSBzZWxlY3RvciA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcXVlcnlDaGVjayhzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9O1xuXG4gICAgY29uc3QgbnZsID0gKHZhbCwgaWZOdWxsVmFsdWUpID0+ICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpID8gaWZOdWxsVmFsdWUgOiB2YWw7XG5cbiAgICBjb25zdCBpaWYgPSAoY29uZCwgdHJ1ZVZhbCwgZmFsc2VWYWwpID0+IGNvbmQgPyB0cnVlVmFsIDogZmFsc2VWYWw7XG5cbiAgICBjb25zdCB1bmRlZiA9IHZhbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsO1xyXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNvYWxlc2NlICgpIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gWy4uLmFyZ3VtZW50c107XHJcbiAgICAgICAgZm9yKGxldCBhcmcgb2YgYXJncykge1xyXG4gICAgICAgICAgICBpZiAoIXVuZGVmKGFyZykpIHJldHVybiBhcmdcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cblxuICAgIGNvbnN0IGlzUGxhaW5PYmplY3QgPSBvYmogPT4ge1xyXG4gICAgICAgIGxldCBwcm90bztcclxuICAgICAgICBpZiAoICFvYmogfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RvID0gb2JqLnByb3RvdHlwZSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICggIXByb3RvICkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvdG8uY29uc3RydWN0b3IgJiYgdHlwZW9mIHByb3RvLmNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCJcclxuICAgIH07XG5cbiAgICBjb25zdCBzdHIyYXJyYXkgPSAoc3RyLCBkZWwgPSBcIiBcIikgPT4gKFwiXCIrc3RyKS5zcGxpdChkZWwpLm1hcChzID0+IChzLnRyaW0oKSkpO1xuXG4gICAgY29uc3QgQXR0ciA9IHtcclxuICAgICAgICBhdHRyKG5hbWUsIHZhbCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHRoaXNbMF0uYXR0cmlidXRlcywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW3RoaXMubm9kZU5hbWVdID0gdGhpcy5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggJiYgdGhpc1swXS5ub2RlVHlwZSA9PT0gMSAmJiB0aGlzWzBdLmhhc0F0dHJpYnV0ZShuYW1lKSA/IHRoaXNbMF0uZ2V0QXR0cmlidXRlKG5hbWUpIDogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChuYW1lLCBmdW5jdGlvbihrLCB2KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGssIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWwgPyBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsKSA6IGVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoYXNBdHRyKG5hbWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gISF0aGlzLmF0dHIobmFtZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoYXNBdHRycyhuYW1lcyl7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IobGV0IG5hbWUgb2YgbmFtZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdHRyKG5hbWUpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbihuYW1lKXtcclxuICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodW5kZWYobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChlbC5hdHRyaWJ1dGVzLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzID0gdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgPyBzdHIyYXJyYXkobmFtZSwgXCIsXCIpIDogbmFtZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKHRoaXMpKSBlbC5yZW1vdmVBdHRyaWJ1dGUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b2dnbGVBdHRyOiBmdW5jdGlvbihuYW1lLCB2YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHVuZGVmKHZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShuYW1lLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlkOiBmdW5jdGlvbih2YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPyB2YWwgPyB0aGlzWzBdLnNldEF0dHJpYnV0ZShcImlkXCIsIHZhbCkgOiB0aGlzWzBdLmdldEF0dHJpYnV0ZShcImlkXCIpIDogdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IENsYXNzID0ge1xyXG4gICAgICAgIGFkZENsYXNzKCl7fSxcclxuICAgICAgICByZW1vdmVDbGFzcygpe30sXHJcbiAgICAgICAgdG9nZ2xlQ2xhc3MoKXt9LFxyXG4gICAgICAgIGNvbnRhaW5zQ2xhc3MoKXt9LFxyXG4gICAgICAgIGl0ZW1DbGFzcygpe30sXHJcblxyXG4gICAgICAgIGhhc0NsYXNzKGNscyl7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY2xzIHx8IHR5cGVvZiBjbHMgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHN0cjJhcnJheShjbHMpLCAoXywgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0ICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xlYXJDbGFzc2VzKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGFzc2VzKGluZGV4ID0gMCwgYXNBcnJheSA9IHRydWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBhc0FycmF5ID8gc3RyMmFycmF5KHRoaXNbaW5kZXhdLmNsYXNzTmFtZSkgOiB0aGlzW2luZGV4XS5jbGFzc05hbWVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGFzc2VzQ291bnQoaW5kZXggPSAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogdGhpc1tpbmRleF0uY2xhc3NMaXN0Lmxlbmd0aFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUNsYXNzQnkobWFzayl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHN0cjJhcnJheShlbC5jbGFzc05hbWUpLCAoXywgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmluY2x1ZGVzKG1hc2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBtZXRob2RzID0gWydhZGQnLCAncmVtb3ZlJywgJ3RvZ2dsZScsICdjb250YWlucycsICdpdGVtJ107XHJcblxyXG4gICAgZWFjaChtZXRob2RzLCAoXywgbSkgPT4ge1xyXG4gICAgICAgIENsYXNzW2Ake219Q2xhc3NgXSA9IGZ1bmN0aW9uKGNscykge1xyXG4gICAgICAgICAgICBpZiAoIWNscy50cmltKCkpIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzQ2xhc3NMaXN0ID0gdHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gXCJ1bmRlZmluZWRcIjtcclxuICAgICAgICAgICAgICAgIGVhY2goc3RyMmFycmF5KGNscyksKF8sIGMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3NMaXN0KSBlbC5jbGFzc0xpc3RbbV0oYyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG4gICAgfSk7XG5cbiAgICBjb25zdCBDb250YWlucyA9IHtcclxuICAgICAgICBpbmRleChzZWwsIGdsb2JhbCA9IGZhbHNlKXtcclxuICAgICAgICAgICAgbGV0IGVsLCBfaW5kZXggPSAtMTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pbmRleFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodW5kZWYoc2VsKSkge1xyXG4gICAgICAgICAgICAgICAgZWwgPSB0aGlzWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKHNlbCkpIHtcclxuICAgICAgICAgICAgICAgIGVsID0gc2VsWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWwgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGVsID0gJChzZWwpWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh1bmRlZihlbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfaW5kZXhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGdsb2JhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLnBhcmVudE5vZGUpIGVhY2goZWwucGFyZW50Tm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24oaSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9pbmRleFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldChpKXtcclxuICAgICAgICAgICAgaWYgKHVuZGVmKGkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpIDwgMCA/IHRoaXNbIGkgKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgaSBdXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZXEoaSl7XHJcbiAgICAgICAgICAgIHJldHVybiAhdW5kZWYoaSkgJiYgdGhpcy5sZW5ndGggPiAwID8gJCh0aGlzLmdldChpKSwgdW5kZWZpbmVkLHtwcmV2T2JqOiB0aGlzfSkgOiB0aGlzXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXMocyl7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5TGlrZShzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2gocywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsID09PSBzZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2VcclxuXHJcbiAgICAgICAgICAgIGlmIChzID09PSBcIjpzZWxlY3RlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCAmJiB0aGlzLnNlbGVjdGVkKSByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG5cclxuICAgICAgICAgICAgaWYgKHMgPT09IFwiOmNoZWNrZWRcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgJiYgdGhpcy5jaGVja2VkKSByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG5cclxuICAgICAgICAgICAgaWYgKHMgPT09IFwiOnZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgJiYgaXNWaXNpYmxlKHRoaXMpKSByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG5cclxuICAgICAgICAgICAgaWYgKHMgPT09IFwiOmhpZGRlblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ2hpZGRlbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5oaWRkZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc3R5bGVzWydkaXNwbGF5J10gPT09ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBzdHlsZXNbJ3Zpc2liaWxpdHknXSA9PT0gJ2hpZGRlbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgcGFyc2VJbnQoc3R5bGVzWydvcGFjaXR5J10pID09PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAgcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMuY2FsbCh0aGlzLCBzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2VcclxuXHJcbiAgICAgICAgICAgIGlmIChzLm5vZGVUeXBlICYmIHMubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICAodGhpcyA9PT0gcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2FtZShvKXtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IF9vID0gJChvKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gX28ubGVuZ3RoKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX28ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChfb1tpXSAhPT0gdGhpc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBsYXN0KCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKHRoaXMubGVuZ3RoIC0gMSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaXJzdCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcSgwKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbHRlcihmbil7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZWwgPSBmbjtcclxuICAgICAgICAgICAgICAgIGZuID0gZWwgPT4gbWF0Y2hlcy5jYWxsKGVsLCBzZWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChbXS5maWx0ZXIuY2FsbCh0aGlzLCBmbiksIHVuZGVmaW5lZCx7cHJldk9iajogdGhpc30pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb2RkKHMpe1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5maWx0ZXIoKF8sIGkpID0+IGkgJSAyID09PSAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKGVsID0+IG1hdGNoZXMuY2FsbChlbCwgcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXN1bHQsIHVuZGVmaW5lZCwge3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGV2ZW4ocyl7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmZpbHRlcigoXywgaSkgPT4gaSAlIDIgIT09IDApO1xyXG5cclxuICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKGVsKSA9PiBtYXRjaGVzLmNhbGwoZWwsIHMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzdWx0LCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbmQocyl7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBbXSwgcmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzOyAvLyBtYXliZSBuZWVkIHJldHVybiB1bmRlZmluZWQgPz8/XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQoW10uc2xpY2UuY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKHMpKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICQocmVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzdWx0LCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNvbnRhaW5zKHMpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kKHMpLmxlbmd0aCA+IDBcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGlsZHJlbihzKXtcclxuICAgICAgICAgICAgbGV0IGksIHJlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBlbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5jaGlsZHJlbltpXS5ub2RlVHlwZSA9PT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goZWwuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJlcyA9IHMgPyByZXMuZmlsdGVyKGVsID0+IG1hdGNoZXMuY2FsbChlbCwgcykpIDogcmVzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzLCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBhcmVudChzKXtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy5pbmNsdWRlcyh0aGlzLnBhcmVudE5vZGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJlcyA9IHMgPyByZXMuZmlsdGVyKGVsID0+IG1hdGNoZXMuY2FsbChlbCwgcykpIDogcmVzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzLCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBhcmVudHMocyl7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhciA9IHRoaXMucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChwYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyLm5vZGVUeXBlID09PSAxICYmICFyZXMuaW5jbHVkZXMocGFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMuY2FsbChwYXIsIHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gocGFyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHBhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyID0gcGFyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzLCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNpYmxpbmdzKHMpe1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChlbC5wYXJlbnROb2RlLmNoaWxkcmVuLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwgIT09IHRoaXMpIHJlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSByZXMuZmlsdGVyKGVsID0+IG1hdGNoZXMuY2FsbChlbCwgcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMsIHVuZGVmaW5lZCx7cHJldk9iajogdGhpc30pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NpYmxpbmdBbGwoZGlyLCBzKXtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBlbFtkaXJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwpIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSByZXMuZmlsdGVyKGVsID0+IG1hdGNoZXMuY2FsbChlbCwgcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMsIHVuZGVmaW5lZCx7cHJldk9iajogdGhpc30pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NpYmxpbmcoZGlyLCBzKXtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbZGlyXTtcclxuICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLmZpbHRlcihlbCA9PiBtYXRjaGVzLmNhbGwoZWwsIHMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICQocmVzLCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHByZXYocyl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaWJsaW5nKCdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJywgcylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBuZXh0KHMpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2libGluZygnbmV4dEVsZW1lbnRTaWJsaW5nJywgcylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmV2QWxsKHMpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2libGluZ0FsbCgncHJldmlvdXNFbGVtZW50U2libGluZycsIHMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dEFsbChzKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpYmxpbmdBbGwoJ25leHRFbGVtZW50U2libGluZycsIHMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xvc2VzdChzKXtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudChzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGxldCBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVsKSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzLmNhbGwoZWwsIHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMucmV2ZXJzZSgpLCB1bmRlZmluZWQse3ByZXZPYmo6IHRoaXN9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhhcyhzKXtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gJChlbCkuY2hpbGRyZW4ocyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAkKHJlcywgdW5kZWZpbmVkLHtwcmV2T2JqOiB0aGlzfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBiYWNrKHRvX3N0YXJ0ID0gZmFsc2Upe1xyXG4gICAgICAgICAgICBsZXQgcmV0O1xyXG4gICAgICAgICAgICBpZiAodG9fc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMucHJldk9iajtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChyZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJldC5wcmV2T2JqKSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IHJldC5wcmV2T2JqO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5wcmV2T2JqID8gdGhpcy5wcmV2T2JqIDogdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0XHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IFNjcm9sbCA9IHtcclxuICAgICAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIGlmICh1bmRlZih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiB0aGlzWzBdID09PSB3aW5kb3cgPyBzY3JvbGxZIDogdGhpc1swXS5zY3JvbGxUb3BcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSB2YWw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsTGVmdDogZnVuY3Rpb24odmFsKXtcclxuICAgICAgICAgICAgaWYgKHVuZGVmKHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHRoaXNbMF0gPT09IHdpbmRvdyA/IHNjcm9sbFggOiB0aGlzWzBdLnNjcm9sbExlZnRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0gdmFsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH07XG5cbiAgICBjb25zdCBjYW1lbENhc2UgPSBzdHIgPT4gc3RyLnJlcGxhY2UoLy0oW2Etel0pL2csIGcgPT4gZ1sxXS50b1VwcGVyQ2FzZSgpKTtcblxuICAgIGNvbnN0IENzcyA9IHtcclxuICAgICAgICBfc2V0U3R5bGVQcm9wKGVsLCBrZXksIHZhbCl7XHJcbiAgICAgICAgICAgIGtleSA9IGNhbWVsQ2FzZShrZXkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFtcInNjcm9sbExlZnRcIiwgXCJzY3JvbGxUb3BcIl0uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgZWxba2V5XSA9IChwYXJzZUludCh2YWwpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlW2tleV0gPSBpc05hTih2YWwpIHx8IFsnb3BhY2l0eScsICd6SW5kZXgnXS5pbmNsdWRlcyhrZXkpID8gdmFsIDogdmFsICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRTdHlsZShlbCwgcHJvcCwgcHNldWRvKXtcclxuICAgICAgICAgICAgcmV0dXJuIFtcInNjcm9sbExlZnRcIiwgXCJzY3JvbGxUb3BcIl0uaW5jbHVkZXMocHJvcCkgPyAkKGVsKVtwcm9wXSgpIDogZ2V0Q29tcHV0ZWRTdHlsZShlbCwgcHNldWRvKVtwcm9wXVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0eWxlOiBmdW5jdGlvbihuYW1lLCBwc2V1ZG8pe1xyXG4gICAgICAgICAgICBsZXQgZWw7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiB0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsID0gdGhpc1swXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1bmRlZihuYW1lKSB8fCBuYW1lID09PSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCwgcHNldWRvKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge30sIG5hbWVzID0gc3RyMmFycmF5KG5hbWUsIFwiLFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZXMubGVuZ3RoID09PSAxKSAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTdHlsZShlbCwgbmFtZXNbMF0sIHBzZXVkbylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChuYW1lcywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gdGhhdC5fZ2V0U3R5bGUoZWwsIHByb3AsIHBzZXVkbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlU3R5bGU6IGZ1bmN0aW9uKG5hbWUpe1xyXG4gICAgICAgICAgICBpZiAodW5kZWYobmFtZSkgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzXHJcblxyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IHN0cjJhcnJheShuYW1lKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGVhY2gobmFtZXMsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjc3M6IGZ1bmN0aW9uKGtleSwgdmFsKXtcclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBrZXkgPSBrZXkgfHwgJ2FsbCc7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiAmJiAhdmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIHRoaXMuc3R5bGUoa2V5KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goa2V5LCBmdW5jdGlvbihrZXksIHZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3NldFN0eWxlUHJvcChlbCwga2V5LCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2V0U3R5bGVQcm9wKGVsLCBrZXksIHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IGlzRW1wdHlPYmplY3QgPSBvYmogPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiIHx8IG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIG9iaiApIHtcclxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XG5cbiAgICBjb25zdCBub3JtYWxpemVFdmVudE5hbWUgPSBuYW1lID0+IHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiID8gdW5kZWZpbmVkIDogbmFtZS5yZXBsYWNlKC9cXC0vZywgXCJcIikudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICBjb25zdCBvdmVycmlkZGVuU3RvcCA9ICBFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uO1xyXG4gICAgY29uc3Qgb3ZlcnJpZGRlblByZXZlbnQgPSAgRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0O1xyXG5cclxuICAgIEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIG92ZXJyaWRkZW5TdG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdGhpcy5pc1ByZXZlbnRlZERlZmF1bHQgPSB0cnVlO1xyXG4gICAgICAgIG92ZXJyaWRkZW5QcmV2ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oaW1tZWRpYXRlKXtcclxuICAgICAgICByZXR1cm4gaW1tZWRpYXRlID8gdGhpcy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSA6IHRoaXMuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgRG9sbGFyRXZlbnRzID0ge1xyXG4gICAgICAgIGV2ZW50czogW10sXHJcbiAgICAgICAgZXZlbnRIb29rczoge30sXHJcbiAgICAgICAgZXZlbnRVSUQ6IC0xLFxyXG5cclxuICAgICAgICByZWFkeShmbiwgb3AgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIHJldHVybiAkKGZuLCBvcClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBsb2FkKGZuLCBvcCA9IGZhbHNlKXtcclxuICAgICAgICAgICAgcmV0dXJuICQod2luZG93KS5vbihcImxvYWRcIiwgZm4sIG9wKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVubG9hZChmbiwgb3AgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIHJldHVybiAkKHdpbmRvdykub24oXCJ1bmxvYWRcIiwgZm4sIG9wKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJlZm9yZXVubG9hZChmbiwgb3AgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkKHdpbmRvdykub24oXCJiZWZvcmV1bmxvYWRcIiwgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZuO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmblxyXG4gICAgICAgICAgICAgICAgfSwgb3ApXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLm9uKFwiYmVmb3JldW5sb2FkXCIsIGZuLCBvcClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldEV2ZW50SGFuZGxlcjogZnVuY3Rpb24oe2VsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBzZWxlY3RvciwgbnMsIGlkLCBvcHRpb25zfSA9IGFyZ3Mpe1xyXG4gICAgICAgICAgICBsZXQgaSwgZnJlZUluZGV4ID0gLTEsIGV2ZW50T2JqLCByZXN1bHRJbmRleDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IHRoaXMuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzW2ldLmhhbmRsZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJlZUluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50T2JqID0ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yLFxyXG4gICAgICAgICAgICAgICAgbnMsXHJcbiAgICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmVlSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKGV2ZW50T2JqKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEluZGV4ID0gdGhpcy5ldmVudHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzW2ZyZWVJbmRleF0gPSBldmVudE9iajtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEluZGV4ID0gZnJlZUluZGV4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0SW5kZXhcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFdmVudEhhbmRsZXI6IGZ1bmN0aW9uKGluZGV4KXtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5ldmVudHM7XHJcbiAgICAgICAgICAgIGxldCBoYW5kbGVyO1xyXG5cclxuICAgICAgICAgICAgaWYgKHVuZGVmKGV2ZW50c1tpbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhbmRsZXIgPSBldmVudHNbaW5kZXhdLmhhbmRsZXI7XHJcbiAgICAgICAgICAgIGV2ZW50c1tpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlclxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9mZjogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhpcy5lYWNoKHRoaXMuZXZlbnRzLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudCwgdGhpcy5oYW5kbGVyLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHMgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFdmVudHM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50c1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEV2ZW50SG9va3M6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50SG9va3NcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudEhvb2s6IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyLCB0eXBlID0gXCJiZWZvcmVcIil7XHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChzdHIyYXJyYXkoZXZlbnQpLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudEhvb2tzW2NhbWVsQ2FzZSh0eXBlK1wiLVwiK3RoaXMpXSA9IGhhbmRsZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUV2ZW50SG9vazogZnVuY3Rpb24oZXZlbnQsIHR5cGUgPSBcImJlZm9yZVwiKXtcclxuICAgICAgICAgICAgdGhpcy5lYWNoKHN0cjJhcnJheShldmVudCksIChrLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudEhvb2tzW2NhbWVsQ2FzZSh0eXBlK1wiLVwiK3YpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRXZlbnRIb29rczogZnVuY3Rpb24oZXZlbnQsIHR5cGUgPSBcImJlZm9yZVwiKXtcclxuICAgICAgICAgICAgaWYgKHVuZGVmKGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudEhvb2tzID0ge307XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goc3RyMmFycmF5KGV2ZW50KSwgKGssIHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudEhvb2tzW2NhbWVsQ2FzZSh0eXBlK1wiLVwiK3YpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBFdmVudHMgPSB7XHJcbiAgICAgICAgbG9hZDogZnVuY3Rpb24oZm4sIG9wKXtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmxlbmd0aCA9PT0gMCB8fCB0aGlzWzBdWydzZWxmJ10gIT09IHdpbmRvdykgPyB1bmRlZmluZWQgOiBEb2xsYXJFdmVudHMubG9hZChmbiwgb3ApXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdW5sb2FkOiBmdW5jdGlvbihmbiwgb3Ape1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMubGVuZ3RoID09PSAwIHx8IHRoaXNbMF1bJ3NlbGYnXSAhPT0gd2luZG93KSA/IHVuZGVmaW5lZCA6IERvbGxhckV2ZW50cy51bmxvYWQoZm4sIG9wKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJlZm9yZXVubG9hZDogZnVuY3Rpb24oZm4sIG9wKXtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmxlbmd0aCA9PT0gMCB8fCB0aGlzWzBdWydzZWxmJ10gIT09IHdpbmRvdykgPyB1bmRlZmluZWQgOiBEb2xsYXJFdmVudHMuYmVmb3JldW5sb2FkKGZuLCBvcClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZWFkeTogZnVuY3Rpb24oZm4sIG9wKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIHRoaXNbMF0gPT09IGRvY3VtZW50ICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERvbGxhckV2ZW50cy5yZWFkeShmbiwgb3ApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbjogZnVuY3Rpb24oZXZlbnRzTGlzdCwgc2VsLCBoYW5kbGVyLCBvcHRpb25zKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gaGFuZGxlcjtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBzZWw7XHJcbiAgICAgICAgICAgICAgICBzZWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghaXNQbGFpbk9iamVjdChvcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHN0cjJhcnJheShldmVudHNMaXN0KSwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaCwgaW5kZXgsIG9yaWdpbkV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ID0gdGhpcywgZXZlbnQgPSBldi5zcGxpdChcIi5cIiksIG5hbWUgPSBub3JtYWxpemVFdmVudE5hbWUoZXZlbnRbMF0pLCBucyA9IG9wdGlvbnMubnMgPyBvcHRpb25zLm5zIDogZXZlbnRbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIERvbGxhckV2ZW50cy5ldmVudFVJRCsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBoID0gZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlSG9vayA9IERvbGxhckV2ZW50cy5ldmVudEhvb2tzW2NhbWVsQ2FzZShcImJlZm9yZS1cIituYW1lKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVySG9vayA9IERvbGxhckV2ZW50cy5ldmVudEhvb2tzW2NhbWVsQ2FzZShcImFmdGVyLVwiK25hbWUpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVmb3JlSG9vayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVIb29rLmNhbGwodGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbChlbCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKHRhcmdldCwgc2VsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXNQcm9wYWdhdGlvblN0b3BwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFmdGVySG9vayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlckhvb2suY2FsbCh0YXJnZXQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICskKGVsKS5kYXRhKCBcImV2ZW50LVwiK2UudHlwZSsoc2VsID8gXCI6XCIrc2VsOlwiXCIpKyhucyA/IFwiOlwiK25zOlwiXCIpICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGluZGV4KSkgRG9sbGFyRXZlbnRzLmV2ZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGgsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoYW5kbGVyLm5hbWUgJiYgaGFuZGxlci5uYW1lICE9PSBcIlwiID8gaGFuZGxlci5uYW1lIDogXCJmdW5jX2V2ZW50X1wiK25hbWUrXCJfXCIrRG9sbGFyRXZlbnRzLmV2ZW50VUlEXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbkV2ZW50ID0gbmFtZSsoc2VsID8gXCI6XCIrc2VsOlwiXCIpKyhucyA/IFwiOlwiK25zOlwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGgsICFpc0VtcHR5T2JqZWN0KG9wdGlvbnMpID8gb3B0aW9ucyA6IGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBEb2xsYXJFdmVudHMuc2V0RXZlbnRIYW5kbGVyKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IHNlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnM6IG5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogRG9sbGFyRXZlbnRzLmV2ZW50VUlELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiAhaXNFbXB0eU9iamVjdChvcHRpb25zKSA/IG9wdGlvbnMgOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWwpLmRhdGEoJ2V2ZW50LScrb3JpZ2luRXZlbnQsIGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uZTogZnVuY3Rpb24oZXZlbnRzLCBzZWwsIGhhbmRsZXIsIG9wdGlvbnMpe1xyXG4gICAgICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5vbmNlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW1wib25cIl0uYXBwbHkodGhpcywgW2V2ZW50cywgc2VsLCBoYW5kbGVyLCBvcHRpb25zXSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50c0xpc3QsIHNlbCwgb3B0aW9ucyl7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzZWwpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gc2VsO1xyXG4gICAgICAgICAgICAgICAgc2VsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZXZlbnRzTGlzdCB8fCBldmVudHNMaXN0LnRvTG93ZXJDYXNlKCkgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goRG9sbGFyRXZlbnRzLmV2ZW50cywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmVsZW1lbnQgPT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGUuZXZlbnQsIGUuaGFuZGxlciwgZS5vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsKS5kYXRhKFwiZXZlbnQtXCIrbmFtZSsoZS5zZWxlY3RvciA/IFwiOlwiK2Uuc2VsZWN0b3I6XCJcIikrKGUubnMgPyBcIjpcIitlLm5zOlwiXCIpLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgZWFjaChzdHIyYXJyYXkoZXZlbnRzTGlzdCksIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZNYXAgPSB0aGlzLnNwbGl0KFwiLlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZUV2ZW50TmFtZShldk1hcFswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zID0gb3B0aW9ucy5ucyA/IG9wdGlvbnMubnMgOiBldk1hcFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luRXZlbnQsIGluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5FdmVudCA9IFwiZXZlbnQtXCIrbmFtZSsoc2VsID8gXCI6XCIrc2VsOlwiXCIpKyhucyA/IFwiOlwiK25zOlwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gKyQoZWwpLmRhdGEob3JpZ2luRXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBEb2xsYXJFdmVudHMuZXZlbnRzW2luZGV4XS5oYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgRG9sbGFyRXZlbnRzLmV2ZW50c1tpbmRleF0uaGFuZGxlciwgRG9sbGFyRXZlbnRzLmV2ZW50c1tpbmRleF0ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERvbGxhckV2ZW50cy5ldmVudHNbaW5kZXhdLmhhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChlbCkuZGF0YShvcmlnaW5FdmVudCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lLCBkYXRhKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuYW1lLCBkYXRhKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpcmU6IGZ1bmN0aW9uKG5hbWUsIGRhdGEpe1xyXG4gICAgICAgICAgICBjb25zdCBfbmFtZSA9IG5vcm1hbGl6ZUV2ZW50TmFtZShuYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoWydmb2N1cycsICdibHVyJ10uaW5kZXhPZihfbmFtZSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpc1swXVtfbmFtZV0oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoX25hbWUsIHtcclxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsOiBkYXRhXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCwgb3B0aW9ucyApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oXCJtb3VzZWVudGVyXCIsIGZuT3Zlciwgb3B0aW9ucyApLm9uKFwibW91c2VsZWF2ZVwiLCBmbk91dCB8fCBmbk92ZXIsIG9wdGlvbnMgKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZXZlbnRNYXAgPSBbXHJcbiAgICAgICAgXCJibHVyXCIsIFwiZm9jdXNcIiwgXCJyZXNpemVcIiwgXCJzY3JvbGxcIixcclxuICAgICAgICBcImNsaWNrXCIsIFwiZGJsY2xpY2tcIixcclxuICAgICAgICBcIm1vdXNlZG93blwiLCBcIm1vdXNldXBcIiwgXCJtb3VzZW1vdmVcIiwgXCJtb3VzZWVudGVyXCIsIFwibW91c2VsZWF2ZVwiLCBcIm1vdXNlb3ZlclwiLFxyXG4gICAgICAgIFwidG91Y2hzdGFydFwiLCBcInRvdWNoZW5kXCIsIFwidG91Y2htb3ZlXCIsIFwidG91Y2hjYW5jZWxcIixcclxuICAgICAgICBcImNoYW5nZVwiLCBcInNlbGVjdFwiLCBcInN1Ym1pdFwiLFxyXG4gICAgICAgIFwia2V5dXBcIiwgXCJrZXlkb3duXCIsIFwia2V5cHJlc3NcIixcclxuICAgICAgICBcImNvbnRleHRtZW51XCJcclxuICAgIF07XHJcblxyXG4gICAgZXZlbnRNYXAuZm9yRWFjaChmdW5jdGlvbiggbmFtZSApIHtcclxuICAgICAgICBFdmVudHNbIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWwsIGZuLCBvcHQgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKCBuYW1lLCBzZWwsIGZuLCBvcHQgKSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoIG5hbWUsIG9wdC5kZXRhaWwgKVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcblxuICAgIGNsYXNzIERhdGFTZXQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhc2V0ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0KGVsZW1lbnQsIGtleSwgZGF0YSl7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGF0YXNldC5oYXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFzZXQuc2V0KGVsZW1lbnQsIG5ldyBNYXAoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlTWFwID0gdGhpcy5fZGF0YXNldC5nZXQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlTWFwLmhhcyhrZXkpICYmIGluc3RhbmNlTWFwLnNpemUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFF1ZXJ5IGRvZXNuJ3QgYWxsb3cgbW9yZSB0aGFuIG9uZSBpbnN0YW5jZSBwZXIgZWxlbWVudC4gQm91bmQgaW5zdGFuY2U6ICR7QXJyYXkuZnJvbShpbnN0YW5jZU1hcC5rZXlzKCkpWzBdfS5gKTtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnN0YW5jZU1hcC5zZXQoa2V5LCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldChlbGVtZW50LCBrZXksIGRlZmF1bHRWYWx1ZSA9IG51bGwpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGF0YXNldC5oYXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnREYXRhID0gdGhpcy5fZGF0YXNldC5nZXQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5ID8gZWxlbWVudERhdGEuZ2V0KGtleSkgfHwgZGVmYXVsdFZhbHVlIDogZWxlbWVudERhdGFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbW92ZShlbGVtZW50LCBrZXkpe1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RhdGFzZXQuaGFzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VNYXAgPSB0aGlzLl9kYXRhc2V0LmdldChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlTWFwLmRlbGV0ZShrZXkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlTWFwLnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFzZXQuZGVsZXRlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW1vdmVBbGwoZWxlbWVudCl7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGF0YXNldC5oYXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFzZXQuZGVsZXRlKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXR0cihlbGVtLCBrZXksIGRhdGEpe1xyXG4gICAgICAgICAgICBpZiAoZWxlbS5ub2RlVHlwZSAhPT0gMSB8fCAha2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoL1tBLVpdL2csIFwiLSQmXCIpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGRhdGEgKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgSlNPTi5zdHJpbmdpZnkoIGRhdGEgKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxuXG4gICAgY29uc3QgYXBwZW5kU2NyaXB0ID0gKGVsLCBjb250ZXh0ID0gZG9jdW1lbnQuYm9keSkgPT4ge1xyXG4gICAgICAgIGlmICghY29udGV4dCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSAkKGVsKTtcclxuXHJcbiAgICAgICAgZWFjaChlbGVtZW50cywgKF8sIHNjcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2NyLnRhZ05hbWUgJiYgc2NyLnRhZ05hbWUgPT09IFwiU0NSSVBUXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgICAgIHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjci5zcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnNyYyA9IHNjci5zcmM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHMudGV4dENvbnRlbnQgPSBzY3IuaW5uZXJUZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5hcHBlbmRDaGlsZChzKTtcclxuICAgICAgICAgICAgICAgIGlmIChzY3IucGFyZW50Tm9kZSlcclxuICAgICAgICAgICAgICAgICAgICBzY3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBTY3JpcHQkMSA9IHtcclxuICAgICAgICBzY3JpcHQoY29udGV4dCl7XHJcbiAgICAgICAgICAgIGFwcGVuZFNjcmlwdCh0aGlzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcbiAgICB9O1xuXG4gICAgY29uc3QgcGFyc2VIVE1MID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICBjb25zdCByZWdleHBTaW5nbGVUYWcgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtcclxuICAgICAgICBsZXQgYmFzZSwgc2luZ2xlVGFnLCByZXN1bHQgPSBbXSwgZG9jO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGh0bWwgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIik7XHJcbiAgICAgICAgYmFzZSA9IGRvYy5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xyXG4gICAgICAgIGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcclxuXHJcbiAgICAgICAgc2luZ2xlVGFnID0gcmVnZXhwU2luZ2xlVGFnLmV4ZWMoaHRtbCk7XHJcblxyXG4gICAgICAgIGlmIChzaW5nbGVUYWcpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzaW5nbGVUYWdbMV0pKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2MuYm9keS5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZG9jLmJvZHkuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9jLmJvZHkuY2hpbGROb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH07XG5cbiAgICBjb25zdCBhcmdzJDEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgZWxlbWVudHMgPSBbXSwgX2FyZ3MgPSBbLi4uYXJndW1lbnRzXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgYXJnIG9mIF9hcmdzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzID0gW10uY29uY2F0KGVsZW1lbnRzLCBub3JtYWxpemVFbGVtZW50cyhhcmcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50c1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBub3JtYWxpemVFbGVtZW50cyA9IGZ1bmN0aW9uKHMpe1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgcyA9PT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgcmVzdWx0ID0gaXNTZWxlY3RvcihzKSA/ICQocykgOiBwYXJzZUhUTUwocyk7XHJcbiAgICAgICAgZWxzZSBpZiAocy5ub2RlVHlwZSAmJiBzLm5vZGVUeXBlID09PSAxKVxyXG4gICAgICAgICAgICByZXN1bHQgPSBbc107XHJcbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UocykpXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHM7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgTWFuaXB1bGF0aW9ucyA9IHtcclxuICAgICAgICBhcHBlbmRUZXh0KHRleHQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKChfLCBlbCkgPT4gZWwuaW5uZXJIVE1MICs9IHRleHQpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJlcGVuZFRleHQodGV4dCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiBlbC5pbm5lckhUTUwgPSB0ZXh0ICsgZWwuaW5uZXJIVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhcHBlbmQoKXtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnRzID0gYXJncyQxKC4uLmFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKCAoaW5kZXgsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKGVsZW1lbnRzLCAoXywgY2gpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgPT09IGNoKSByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGluZGV4ID09PSAwID8gY2ggOiBjaC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnRhZ05hbWUgJiYgY2hpbGQudGFnTmFtZSAhPT0gXCJTQ1JJUFRcIikgZWwuYXBwZW5kKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRTY3JpcHQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYXBwZW5kVG8oKXtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnRzID0gYXJncyQxKC4uLmFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKChpbmRleCwgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGVhY2goZWxlbWVudHMsIChwYXJJbmRleCwgcGFyZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsID09PSBwYXJlbnQpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICQocGFyZW50KS5hcHBlbmQocGFySW5kZXggPT09IDAgPyBlbCA6IGVsLmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmVwZW5kKCl7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50cyA9IGFyZ3MkMSguLi5hcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCggKGVsSW5kZXgsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKGVsZW1lbnRzLCAoXywgY2gpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgPT09IGNoKSByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGVsSW5kZXggPT09IDAgPyBjaCA6IGNoLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudGFnTmFtZSAmJiBjaGlsZC50YWdOYW1lICE9PSBcIlNDUklQVFwiKSBlbC5wcmVwZW5kKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRTY3JpcHQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJlcGVuZFRvKCl7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50cyA9IGFyZ3MkMSguLi5hcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKGVsZW1lbnRzLCAocGFySW5kZXgsIHBhcmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gcGFyZW50KSByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAkKHBhcmVudCkucHJlcGVuZChwYXJJbmRleCA9PT0gMCA/IGVsIDogZWwuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluc2VydEJlZm9yZSgpe1xyXG4gICAgICAgICAgICBsZXQgZWxlbWVudHMgPSBhcmdzJDEoLi4uYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZWxlbWVudHNcIiwgZWxlbWVudHMsIC4uLmFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKChpbmRleCwgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGVhY2goZWxlbWVudHMsIChlbEluZGV4LCBjaCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gY2gpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsSW5kZXggPT09IDAgPyBlbCA6IGVsLmNsb25lTm9kZSh0cnVlKSwgY2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluc2VydEFmdGVyKCl7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50cyA9IGFyZ3MkMSguLi5hcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKGVsZW1lbnRzLCAoZWxJbmRleCwgY2gpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgPT09IGNoKSByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2gucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbEluZGV4ID09PSAwID8gZWwgOiBlbC5jbG9uZU5vZGUodHJ1ZSksIGNoLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZnRlcihodG1sKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKGh0bWwpLmluc2VydEFmdGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBiZWZvcmUoaHRtbCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlYmVnaW4nLCBodG1sKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChodG1sKS5pbnNlcnRCZWZvcmUoZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsb25lKGRlZXAgPSBmYWxzZSwgd2l0aERhdGEgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9ICQoZWwuY2xvbmVOb2RlKGRlZXApKTtcclxuICAgICAgICAgICAgICAgIGlmICh3aXRoRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAkLmRhdGFzZXQuZ2V0KGVsKTtcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKGRhdGEsIGZ1bmN0aW9uKGssIHYpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGFzZXQuc2V0KGNsb25lLCBrLCB2KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGNsb25lKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW1wb3J0KGRlZXAgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmVhY2goKF8sIGVsKSA9PiByZXMucHVzaChkb2N1bWVudC5pbXBvcnROb2RlKGVsLCBkZWVwKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRvcHQoKXtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZWFjaCgoXywgZWwpID0+IHJlcy5wdXNoKGRvY3VtZW50LmFkb3B0Tm9kZShlbCkpKTtcclxuICAgICAgICAgICAgcmV0dXJuICQocmVzKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZShzZWxlY3Rvcil7XHJcbiAgICAgICAgICAgIGxldCBpID0gMCwgbm9kZSwgb3V0O1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3V0ID0gc2VsZWN0b3IgPyB0aGlzLmZpbHRlcigoZWwpID0+ICQubWF0Y2hlcy5jYWxsKGVsLCBzZWxlY3RvcikpIDogdGhpcztcclxuXHJcbiAgICAgICAgICAgIGZvciAoIDsgKCBub2RlID0gb3V0WyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAkLmRhdGFzZXQucmVtb3ZlQWxsKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xlYXIoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoXywgZWwpPT5lbC5pbm5lckhUTUwgPSAnJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB3cmFwKGVsKXtcclxuICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9ICQobm9ybWFsaXplRWxlbWVudHMoZWwpKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubGVuZ3RoIHx8ICF3cmFwcGVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWFjaCgoXywgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBfd3JhcHBlciA9IHdyYXBwZXIuY2xvbmUodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBfd3JhcHBlci5pbnNlcnRCZWZvcmUoZWwpO1xyXG4gICAgICAgICAgICAgICAgbGV0IF90YXJnZXQgPSBfd3JhcHBlcjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChfdGFyZ2V0LmNoaWxkcmVuKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RhcmdldCA9IF90YXJnZXQuY2hpbGRyZW4oKS5lcSgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90YXJnZXQuYXBwZW5kKGVsKTtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKF93cmFwcGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJChyZXMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgd3JhcEFsbCggZWwgKXtcclxuICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9ICQobm9ybWFsaXplRWxlbWVudHMoZWwpKTtcclxuICAgICAgICAgICAgbGV0IF93cmFwcGVyLCBfdGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCB8fCAhd3JhcHBlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfd3JhcHBlciA9IHdyYXBwZXIuY2xvbmUodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIF93cmFwcGVyLmluc2VydEJlZm9yZSh0aGlzWzBdKTtcclxuXHJcbiAgICAgICAgICAgIF90YXJnZXQgPSBfd3JhcHBlcjtcclxuICAgICAgICAgICAgd2hpbGUgKF90YXJnZXQuY2hpbGRyZW4oKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIF90YXJnZXQgPSBfdGFyZ2V0LmNoaWxkcmVuKCkuZXEoMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3RhcmdldC5hcHBlbmQodGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF93cmFwcGVyO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdyYXBJbm5lcjogZnVuY3Rpb24oIGVsICl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSAkKG5vcm1hbGl6ZUVsZW1lbnRzKGVsKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXdyYXBwZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbS5odG1sKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JwID0gd3JhcHBlci5jbG9uZSh0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uaHRtbCh3cnAuaHRtbChodG1sKSk7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaCh3cnApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAkKHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IFV0aWxzID0ge1xyXG4gICAgICAgIHRvQXJyYXk6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGFnZSgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVhY2goY2Ipe1xyXG4gICAgICAgICAgICByZXR1cm4gZWFjaCh0aGlzLCBjYilcclxuICAgICAgICB9LFxyXG4gICAgfTtcblxuICAgIGNvbnN0IFZpc2liaWxpdHkgPSB7XHJcbiAgICAgICAgaW5WaWV3cG9ydCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPyBpblZpZXdwb3J0KHRoaXNbMF0pIDogdW5kZWZpbmVkXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNWaXNpYmxlKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA/IGlzVmlzaWJsZSh0aGlzWzBdKSA6IHVuZGVmaW5lZFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzSGlkZGVuKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA/IGlzSGlkZGVuKHRoaXNbMF0pIDogdW5kZWZpbmVkXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGlkZShjYil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKVsnZGlzcGxheSddO1xyXG4gICAgICAgICAgICAgICAgJChlbCkuZGF0YSgnZGlzcGxheS1zdGF0ZScsIGVsLnN0eWxlLmRpc3BsYXkpO1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNiLmFwcGx5KGVsLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93KGNiKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoXywgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BsYXkgPSAkKGVsKS5kYXRhKCdkaXNwbGF5LXN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkaXNwbGF5KTtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID8gZGlzcGxheSA9PT0gJ25vbmUnID8gJ2Jsb2NrJyA6IGRpc3BsYXkgOiAnJztcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChlbC5zdHlsZS5vcGFjaXR5KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNiLmFwcGx5KGVsLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB2aXNpYmxlKG1vZGUgPSB0cnVlLCBjYil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS52aXNpYmlsaXR5ID0gbW9kZSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IuYXBwbHkoZWwsIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZShjYil7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IFwic2hvd1wiO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKVsnZGlzcGxheSddICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jID0gJ2hpZGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJChlbClbZnVuY10oY2IpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGRlbihtb2RlID0gdHJ1ZSwgY2Ipe1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vZGUgIT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCggKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5oaWRkZW4gPSBtb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IuYXBwbHkoZWwsIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH07XG5cbiAgICBjb25zdCBQcm9wcyA9IHtcclxuICAgICAgICBfcHJvcChwcm9wLCB2YWx1ZSA9ICcnKXtcclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHRoaXNbMF1bcHJvcF1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoXywgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWxbcHJvcF0gIT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxbcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcm9wKHByb3AsIHZhbHVlKXtcclxuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvcChwcm9wKSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wKHByb3AsIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB2YWx1ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB2YWwodmFsdWUpe1xyXG4gICAgICAgICAgICBpZiAodW5kZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMubGVuZ3RoID8gdW5kZWZpbmVkIDogdGhpc1swXS52YWx1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKChfLCBlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbC52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGh0bWwodmFsdWUpe1xyXG4gICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpcywgdiA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3AoJ2lubmVySFRNTCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIGlzQXJyYXlMaWtlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZWFjaCh2YWx1ZSwgKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYucHVzaCh0aGlzLm91dGVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHYucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhhdC5fcHJvcCgnaW5uZXJIVE1MJywgdi5qb2luKFwiXFxuXCIpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvdXRlckhUTUwoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3AoJ291dGVySFRNTCcpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRleHQodmFsdWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wKCd0ZXh0Q29udGVudCcpIDpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3AoJ3RleHRDb250ZW50JywgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gXCJcIiA6IHZhbHVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbm5lclRleHQodmFsdWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wKCdpbm5lclRleHQnKSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wKCdpbm5lclRleHQnLCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGVtcHR5KCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWwuaW5uZXJIVE1MICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGVhcjogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHkoKVxyXG4gICAgICAgIH1cclxuICAgIH07XG5cbiAgICBjb25zdCBTaXplID0ge1xyXG4gICAgICAgIF9zaXplOiBmdW5jdGlvbihwcm9wLCB2YWwpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxyXG5cclxuICAgICAgICAgICAgaWYgKHVuZGVmKHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpc1swXTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnaGVpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogZWwgPT09IGRvY3VtZW50ID8gZWwuYm9keS5jbGllbnRIZWlnaHQgOiBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKGVsKS5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3dpZHRoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCA9PT0gd2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiBlbCA9PT0gZG9jdW1lbnQgPyBlbC5ib2R5LmNsaWVudFdpZHRoIDogcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShlbCkud2lkdGgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgPT09IHdpbmRvdyB8fCBlbCA9PT0gZG9jdW1lbnQpIHtyZXR1cm4gfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGVbcHJvcF0gPSBpc05hTih2YWwpID8gdmFsIDogdmFsICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplKCdoZWlnaHQnLCB2YWwpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgd2lkdGg6IGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplKCd3aWR0aCcsIHZhbClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2l6ZU91dDogZnVuY3Rpb24ocHJvcCwgdmFsKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgIGlmICghdW5kZWYodmFsKSAmJiB0eXBlb2YgdmFsICE9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCgoXywgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgPT09IHdpbmRvdyB8fCBlbCA9PT0gZG9jdW1lbnQpIHtyZXR1cm4gfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJzID0gcHJvcCA9PT0gJ3dpZHRoJyA/IHBhcnNlSW50KHN0eWxlWydib3JkZXItbGVmdC13aWR0aCddKSArIHBhcnNlSW50KHN0eWxlWydib3JkZXItcmlnaHQtd2lkdGgnXSkgOiBwYXJzZUludChzdHlsZVsnYm9yZGVyLXRvcC13aWR0aCddKSArIHBhcnNlSW50KHN0eWxlWydib3JkZXItYm90dG9tLXdpZHRoJ10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYSA9IHByb3AgPT09ICd3aWR0aCcgPyBwYXJzZUludChzdHlsZVsncGFkZGluZy1sZWZ0J10pICsgcGFyc2VJbnQoc3R5bGVbJ3BhZGRpbmctcmlnaHQnXSkgOiBwYXJzZUludChzdHlsZVsncGFkZGluZy10b3AnXSkgKyBwYXJzZUludChzdHlsZVsncGFkZGluZy1ib3R0b20nXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGggPSAkKGVsKVtwcm9wXSh2YWwpW3Byb3BdKCkgLSBicyAtIHBhO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlW3Byb3BdID0gaCArICdweCc7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbGVtID0gdGhpc1swXSxcclxuICAgICAgICAgICAgICAgICAgc2l6ZSA9IGVsZW1bcHJvcCA9PT0gJ3dpZHRoJyA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J10sXHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKSxcclxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2l6ZSArIHBhcnNlSW50KHN0eWxlW3Byb3AgPT09ICd3aWR0aCcgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi10b3AnXSkgKyBwYXJzZUludChzdHlsZVtwcm9wID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLWJvdHRvbSddKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWwgPT09IHRydWUgPyByZXN1bHQgOiBzaXplXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb3V0ZXJXaWR0aDogZnVuY3Rpb24odmFsKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpemVPdXQoJ3dpZHRoJywgdmFsKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG91dGVySGVpZ2h0OiBmdW5jdGlvbih2YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZU91dCgnaGVpZ2h0JywgdmFsKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBhZGRpbmc6IGZ1bmN0aW9uKHBzZXVkbyl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBwc2V1ZG8pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQoc3R5bGVbXCJwYWRkaW5nLXRvcFwiXSksXHJcbiAgICAgICAgICAgICAgICByaWdodDogcGFyc2VJbnQoc3R5bGVbXCJwYWRkaW5nLXJpZ2h0XCJdKSxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogcGFyc2VJbnQoc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYXJzZUludChzdHlsZVtcInBhZGRpbmctbGVmdFwiXSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1hcmdpbjogZnVuY3Rpb24ocHNldWRvKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cclxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIHBzZXVkbyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiBwYXJzZUludChzdHlsZVtcIm1hcmdpbi10b3BcIl0pLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHBhcnNlSW50KHN0eWxlW1wibWFyZ2luLXJpZ2h0XCJdKSxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogcGFyc2VJbnQoc3R5bGVbXCJtYXJnaW4tYm90dG9tXCJdKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHBhcnNlSW50KHN0eWxlW1wibWFyZ2luLWxlZnRcIl0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib3JkZXI6IGZ1bmN0aW9uKHBzZXVkbyl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBwc2V1ZG8pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQoc3R5bGVbXCJib3JkZXItdG9wLXdpZHRoXCJdKSxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiBwYXJzZUludChzdHlsZVtcImJvcmRlci1yaWdodC13aWR0aFwiXSksXHJcbiAgICAgICAgICAgICAgICBib3R0b206IHBhcnNlSW50KHN0eWxlW1wiYm9yZGVyLWJvdHRvbS13aWR0aFwiXSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYXJzZUludChzdHlsZVtcImJvcmRlci1sZWZ0LXdpZHRoXCJdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IEluaXRpYXRvciA9IHtcclxuICAgICAgICBpbml0KCl7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRoaXMuc2VsZWN0b3IsICh0aGlzLmNvbnRleHQgfHwgZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RvciA9PT0gJ3dpbmRvdycgfHwgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5zZWxmID09PSB3aW5kb3cpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzWzBdID0gd2luZG93O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yID09PSAnZG9jdHlwZScgfHwgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5ub2RlVHlwZSAmJiB0aGlzLnNlbGVjdG9yLm5vZGVUeXBlID09PSAxMCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbMF0gPSBkb2N1bWVudC5kb2N0eXBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yID09PSAnZG9jdW1lbnQnIHx8ICh0aGlzLnNlbGVjdG9yICYmIHRoaXMuc2VsZWN0b3Iubm9kZVR5cGUgJiYgdGhpcy5zZWxlY3Rvci5ub2RlVHlwZSA9PT0gOSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbMF0gPSBkb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0b3IgPT09IFwib2JqZWN0XCIgJiYgaXNBcnJheUxpa2UodGhpcy5zZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5zZWxlY3RvciwgKGtleSwgdmFsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKHZhbCBpbnN0YW5jZW9mIFF1ZXJ5ID8gdmFsWzBdIDogdmFsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLnNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0b3IgPT09ICdzdHJpbmcnICYmIGlzU2VsZWN0b3IodGhpcy5zZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIFtdLnB1c2guYXBwbHkodGhpcywgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IgPT09IFwiI1wiIHx8IHRoaXMuc2VsZWN0b3IgPT09IFwiLlwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTZWxlY3RvciBjYW4ndCBiZSAjIG9yIC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VIVE1MKHRoaXMuc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgRE9NU2VsZWN0b3IgPSBwYXJzZWQubGVuZ3RoID09PSAxICYmIHBhcnNlZFswXS5ub2RlVHlwZSA9PT0gMztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoRE9NU2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBbXS5wdXNoLmFwcGx5KHRoaXMsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZWxlY3RvcikpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBbXS5wdXNoLmFwcGx5KHRoaXMsIHBhcnNlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCAmJiB0aGlzLmNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIGF0dHJpYnV0ZXMgZm9yIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRleHQgPT09ICdvYmplY3QnICYmIGlzUGxhaW5PYmplY3QodGhpcy5jb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoKHRoaXMsKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IG5hbWUgaW4gdGhpcy5jb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5oYXNPd25Qcm9wZXJ0eShuYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKG5hbWUsIHRoaXMuY29udGV4dFtuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluc2VydCBlbGVtZW50cyBpbnRvIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRleHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dCA9ICQodGhpcy5jb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRleHRUYXJnZXRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRUYXJnZXRzLnB1c2godGhpcy5jb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZSh0aGlzLmNvbnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5wdXNoLmFwcGx5KGNvbnRleHRUYXJnZXRzLCB0aGlzLmNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaChjb250ZXh0VGFyZ2V0cywgKF8sIGN0eCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSB0aGlzLmNsb25lKHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFF1ZXJ5KGN0eCkuYXBwZW5kKGNsb25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2goY2xvbmUsIChfLCBjbCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA7W10ucHVzaC5hcHBseSh0aGlzLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XG5cbiAgICBjb25zdCBib29sID0gdmFsID0+IHtcclxuICAgICAgICBpZiAodW5kZWYodmFsKSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gdmFsXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmIHZhbCAhPT0gMCkgcmV0dXJuIHZhbFxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiB2YWwgPT09IDApIHJldHVybiBmYWxzZVxyXG4gICAgICAgIGlmIChbJ3RydWUnLCAnb2snLCAneWVzJ10uaW5jbHVkZXMoKFwiXCIrdmFsKS50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIHRydWVcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH07XG5cbiAgICBjb25zdCBQb3NpdGlvbiA9IHtcclxuICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbMF07XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IGVsLm9mZnNldFRvcCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IGVsLm9mZnNldExlZnQsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGVsLm9mZnNldEhlaWdodCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBlbC5vZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogZWwub2Zmc2V0UGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24obWFyZ2luKXtcclxuICAgICAgICAgICAgbGV0IG1sID0gMCwgbXQgPSAwLCBlbCwgc3R5bGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxyXG5cclxuICAgICAgICAgICAgZWwgPSB0aGlzWzBdO1xyXG4gICAgICAgICAgICBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJvb2wobWFyZ2luKSkge1xyXG4gICAgICAgICAgICAgICAgbWwgPSBwYXJzZUludChzdHlsZVsnbWFyZ2luLWxlZnQnXSk7XHJcbiAgICAgICAgICAgICAgICBtdCA9IHBhcnNlSW50KHN0eWxlWydtYXJnaW4tdG9wJ10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbGVmdDogZWwub2Zmc2V0TGVmdCAtIG1sLFxyXG4gICAgICAgICAgICAgICAgdG9wOiBlbC5vZmZzZXRUb3AgLSBtdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbGVmdDogZnVuY3Rpb24odmFsLCBtYXJnaW4pe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxyXG5cclxuICAgICAgICAgICAgaWYgKHVuZGVmKHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uKG1hcmdpbikubGVmdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbiA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uKG1hcmdpbikubGVmdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdmFsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b3A6IGZ1bmN0aW9uKHZhbCwgbWFyZ2luKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgIGlmICh1bmRlZih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbihtYXJnaW4pLnRvcFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbiA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uKG1hcmdpbikudG9wXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHZhbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY29vcmQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHRoaXNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwb3M6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiBwYXJzZUludCgkKHRoaXNbMF0pLnN0eWxlKFwidG9wXCIpKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHBhcnNlSW50KCQodGhpc1swXSkuc3R5bGUoXCJsZWZ0XCIpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIHVpZDogJ3VpZCcsXHJcbiAgICAgICAgcHJldk9iajogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICBjbGFzcyBRdWVyeSQxIGV4dGVuZHMgQXJyYXkge1xyXG4gICAgICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVybiBcIlF1ZXJ5XCJ9XHJcblxyXG4gICAgICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKGhpbnQpe1xyXG4gICAgICAgICAgICBpZiAoaGludCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyID0gWy4uLnRoaXNdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFycilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBjb250ZXh0LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy51aWQgPSB1aWQodGhpcy5vcHRpb25zLnVpZCk7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gKyBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID8gc2VsZWN0b3IudHJpbSgpIDogc2VsZWN0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgIHRoaXMucHJldk9iaiA9IHRoaXMub3B0aW9ucy5wcmV2T2JqO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gKC4uLnJlc3QpID0+IG5ldyBRdWVyeSQxKC4uLnJlc3QpO1xyXG4gICAgY29uc3QgJCQyID0gcXVlcnk7XHJcblxyXG4gICAgUXVlcnkkMS51c2UgPSAoLi4ubWl4aW5zKSA9PiBPYmplY3QuYXNzaWduKFF1ZXJ5JDEucHJvdG90eXBlLCAuLi5taXhpbnMpO1xyXG4gICAgcXVlcnkudXNlID0gKC4uLm1peGlucykgPT4gT2JqZWN0LmFzc2lnbihxdWVyeSwgLi4ubWl4aW5zKTtcclxuXHJcbiAgICBRdWVyeSQxLnVzZShcclxuICAgICAgICBJbml0aWF0b3IsXHJcbiAgICAgICAgQXR0cixcclxuICAgICAgICBDbGFzcyxcclxuICAgICAgICBDb250YWlucyxcclxuICAgICAgICBDc3MsXHJcbiAgICAgICAgU2Nyb2xsLFxyXG4gICAgICAgIEV2ZW50cyxcclxuICAgICAgICBTY3JpcHQkMSxcclxuICAgICAgICBNYW5pcHVsYXRpb25zLFxyXG4gICAgICAgIFV0aWxzLFxyXG4gICAgICAgIFZpc2liaWxpdHksXHJcbiAgICAgICAgUHJvcHMsXHJcbiAgICAgICAgU2l6ZSxcclxuICAgICAgICBQb3NpdGlvblxyXG4gICAgKTtcclxuXHJcbiAgICBxdWVyeS51c2Uoe1xyXG4gICAgICAgIGRhdGFzZXQ6IG5ldyBEYXRhU2V0KCksXHJcbiAgICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcclxuICAgICAgICBodG1sOiAkJDIoJ2h0bWwnKSxcclxuICAgICAgICBkb2N0eXBlOiAkJDIoXCJkb2N0eXBlXCIpLFxyXG4gICAgICAgIGhlYWQ6ICQkMignaGVhZCcpLFxyXG4gICAgICAgIGJvZHk6ICQkMignYm9keScpLFxyXG4gICAgICAgIGRvY3VtZW50OiAkJDIoJ2RvY3VtZW50JyksXHJcbiAgICAgICAgd2luZG93OiAkJDIoJ3dpbmRvdycpLFxyXG4gICAgICAgIG1ldGE6IG5hbWUgPT4gIW5hbWUgPyAkJDIoXCJtZXRhXCIpIDogJCQyKFwibWV0YVtuYW1lPSRuYW1lXVwiLnJlcGxhY2UoXCIkbmFtZVwiLCBuYW1lKSksXHJcbiAgICAgICAgbWV0YUJ5OiBuYW1lID0+ICFuYW1lID8gJCQyLm1ldGEgOiAkJDIoXCJtZXRhWyRuYW1lXVwiLnJlcGxhY2UoXCIkbmFtZVwiLCBuYW1lKSksXHJcbiAgICAgICAgY2hhcnNldDogdmFsID0+IHtcclxuICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbSA9ICQkMignbWV0YVtjaGFyc2V0XScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG0uYXR0cignY2hhcnNldCcsIHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNoYXJhY3RlclNldFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWFjaDogZnVuY3Rpb24oY3R4LCBjYil7IHJldHVybiBlYWNoKGN0eCwgY2IpIH0sXHJcbiAgICAgICAgYmluZDogKGZuLCBjdHgpID0+IHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiID8gdW5kZWZpbmVkIDogZm4uYmluZChjdHgpLFxyXG4gICAgICAgIHByb3h5OiAodGFyZ2V0LCBoYW5kbGVyKSA9PiBuZXcgUHJveHkodGFyZ2V0LCBoYW5kbGVyKSxcclxuICAgICAgICBkZXZpY2U6ICgvYW5kcm9pZHx3ZWFyb3N8d2Vib3N8aXBob25lfGlwYWR8aXBvZHxibGFja2JlcnJ5fGllbW9iaWxlfG9wZXJhIG1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSkpLFxyXG4gICAgICAgIGxvY2FsaG9zdDogaXNMb2NhbGhvc3QoKSxcclxuICAgICAgICBpc0xvY2FsaG9zdDogaXNMb2NhbGhvc3QsXHJcbiAgICAgICAgcHJpdmF0ZUFkZHJlc3M6IGlzUHJpdmF0ZUFkZHJlc3MoKSxcclxuICAgICAgICBpc1ByaXZhdGVBZGRyZXNzOiBpc1ByaXZhdGVBZGRyZXNzLFxyXG4gICAgICAgIHRvdWNoYWJsZTogaXNUb3VjaGFibGUoKSxcclxuICAgICAgICBzY3JpcHQ6IGFwcGVuZFNjcmlwdCxcclxuICAgICAgICBub29wOiAoKSA9PiB7fSxcclxuICAgICAgICBub29wX3RydWU6ICgpID0+IHRydWUsXHJcbiAgICAgICAgbm9vcF9mYWxzZTogKCkgPT4gZmFsc2UsXHJcbiAgICAgICAgZXhlYzogZXhlYyxcclxuICAgICAgICBkYXJrOiBnbG9iYWxUaGlzLm1hdGNoTWVkaWEgJiYgZ2xvYmFsVGhpcy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcyxcclxuICAgICAgICBpc1Zpc2libGUsXHJcbiAgICAgICAgaXNIaWRkZW4sXHJcbiAgICAgICAgaW5WaWV3cG9ydCxcclxuICAgICAgICB0eXBlOiB0b1R5cGUsXHJcbiAgICAgICAgaXNTZWxlY3RvcixcclxuICAgICAgICB1bmRlZixcclxuICAgICAgICBpaWYsXHJcbiAgICAgICAgbnZsLFxyXG4gICAgICAgIGNvYWxlc2NlXHJcbiAgICB9KTtcclxuXHJcbiAgICBRdWVyeSQxLnVzZSh7XHJcbiAgICAgICAgZGF0YShrZXksIHZhbCl7XHJcbiAgICAgICAgICAgIGxldCBlbGVtLCBkYXRhO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbSA9IHRoaXNbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSAkJDIuZGF0YXNldC5nZXQoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBhdHRyIG9mIFsuLi5lbGVtLmF0dHJpYnV0ZXNdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gYXR0ci5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck5hbWUuc3RhcnRzV2l0aCgnZGF0YS0nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ck5hbWVdOiBlbGVtLmdldEF0dHJpYnV0ZShhdHRyTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YS5wdXNoKFthdHRyTmFtZSwgZWxlbS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbYXR0ck5hbWVdID0gZWxlbS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkJDIuZGF0YXNldC5nZXQoZWxlbSwga2V5KSB8fCAkJDIuZGF0YXNldC5hdHRyKGVsZW0sIGtleSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkJDIuZGF0YXNldC5zZXQoIHRoaXMsIGtleSwgdmFsICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRGF0YSgga2V5ICkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQkMi5kYXRhc2V0LnJlbW92ZSggdGhpcywga2V5ICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IF8kID0gZ2xvYmFsVGhpcy4kO1xyXG5cclxuICAgIHF1ZXJ5LnVzZSh7XHJcbiAgICAgICAgZ2xvYmFsKCl7XHJcbiAgICAgICAgICAgIF8kID0gZ2xvYmFsVGhpcy4kO1xyXG4gICAgICAgICAgICBnbG9iYWxUaGlzLiQgPSAkJDI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBub0NvbmZsaWN0KCl7XHJcbiAgICAgICAgICAgIGlmICggZ2xvYmFsVGhpcy4kID09PSAkJDIgKSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLiQgPSBfJDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJCQyXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XG5cbiAgICBjb25zdCAkJDEgPSBxdWVyeTtcblxuICAgIGZ1bmN0aW9uIGRhc2hlZE5hbWUoc3RyKXtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24odSkgeyByZXR1cm4gXCItXCIgKyB1LnRvTG93ZXJDYXNlKCk7IH0pO1xyXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q2xhc3NlcyhzcmMgPSBbXSl7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3JjKSA/IHNyYy5qb2luKFwiIFwiKSA6IHNyYy50b1N0cmluZygpXHJcbiAgICB9XG5cbiAgICBjb25zdCBudW1Qcm9wcyA9IFsnb3BhY2l0eScsICd6SW5kZXgnLCBcIm9yZGVyXCIsIFwiem9vbVwiXTtcblxuICAgIGZ1bmN0aW9uIHNldFN0eWxlcyhzcmMgPSB7fSl7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBzcmMgKS5tYXAoIGtleSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gZGFzaGVkTmFtZShrZXkpO1xyXG4gICAgICAgICAgICBsZXQgcHJvcFZhbCA9IHNyY1trZXldO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFudW1Qcm9wcy5pbmNsdWRlcyhwcm9wTmFtZSkgJiYgIWlzTmFOKHByb3BWYWwpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wVmFsICs9ICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBgJHtwcm9wTmFtZX06ICR7cHJvcFZhbH1gXHJcbiAgICAgICAgfSApLmpvaW4oXCI7XCIpXHJcbiAgICB9XG5cbiAgICBjb25zdCB1bml2ZXJzYWxBdHRyaWJ1dGVzID0gW1xyXG4gICAgICAgIFwiYWNjZXNza2V5XCIsXHJcbiAgICAgICAgXCJjb250ZW50ZWRpdGFibGVcIixcclxuICAgICAgICBcImNvbnRleHRtZW51XCIsXHJcbiAgICAgICAgXCJkaXJcIixcclxuICAgICAgICBcImlkXCIsXHJcbiAgICAgICAgXCJsYW5nXCIsXHJcbiAgICAgICAgXCJzcGVsbGNoZWNrXCIsXHJcbiAgICAgICAgXCJ0YWJpbmRleFwiLFxyXG4gICAgICAgIFwidGl0bGVcIlxyXG4gICAgXTtcblxuICAgIGNsYXNzIEJhc2VFbGVtZW50IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICAgICAgdGhpcy50YWcgPSBcImRpdlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKXtcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgYXR0cmlidXRlcygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVzKCkuam9pbihcIiBcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEF0dHJpYnV0ZXMoKXtcclxuICAgICAgICAgICAgbGV0IGF0dHIgPSBbXSxcclxuICAgICAgICAgICAgICAgIHNpbmdsZSA9IFsnaGlkZGVuJywgJ2Rpc2FibGVkJywgJ3JlcXVpcmVkJywgJ3JlYWRvbmx5JywgJ3NlbGVjdGVkJywgJ29wZW4nLCAnbXVsdGlwbHknLCAnZGVmYXVsdCddLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZSA9IFtcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiZGF0YVwiLCBcInRhZ1wiLCBcImV2ZW50c1wiXTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQga2V5IGluIHRoaXMub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2UuaW5jbHVkZXMoa2V5KSlcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggc2luZ2xlLmluY2x1ZGVzKGtleSkgJiYgdGhpcy5vcHRpb25zW2tleV0gPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICh0aGlzLnNlbGZBdHRyaWJ1dGVzKCkuaW5jbHVkZXMoa2V5KSAmJiAhYXR0ci5pbmNsdWRlcyhrZXkpKSB8fCB1bml2ZXJzYWxBdHRyaWJ1dGVzLmluY2x1ZGVzKGtleSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5wdXNoKGAke2tleX09XCIke3RoaXMub3B0aW9uc1trZXldfVwiYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzZXMpIGF0dHIucHVzaChgY2xhc3M9XCIke3RoaXMuY2xhc3Nlc31cImApO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdHlsZXMpIGF0dHIucHVzaChgc3R5bGU9XCIke3RoaXMuc3R5bGVzfVwiYCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFTZXQpIGF0dHIucHVzaCh0aGlzLmRhdGFTZXQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hcmlhKSBhdHRyLnB1c2godGhpcy5hcmlhKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhdHRyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmF3KCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBkYXRhU2V0KCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhID0ge319ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICBsZXQgXyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEgPT09IHt9KSByZXR1cm4gXCJcIlxyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBrZXkgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgXy5wdXNoKGBkYXRhLSR7ZGFzaGVkTmFtZShrZXkpfT1cIiR7ZGF0YVtrZXldfVwiYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfLmpvaW4oXCIgXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgYXJpYSgpe1xyXG4gICAgICAgICAgICBjb25zdCB7YXJpYSA9IHt9fSA9IHRoaXMub3B0aW9ucztcclxuICAgICAgICAgICAgbGV0IF8gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhcmlhID09PSB7fSkgcmV0dXJuIFwiXCJcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQga2V5IGluIGFyaWEpIHtcclxuICAgICAgICAgICAgICAgIF8ucHVzaChgYXJpYS0ke2tleS50b0xvd2VyQ2FzZSgpfT1cIiR7YXJpYVtrZXldfVwiYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfLmpvaW4oXCIgXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgZXZlbnRzKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHtldmVudHMgPSB7fX0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgICAgIGxldCBldmVudHNBcnJheSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0ge30pIHJldHVybiBcIlwiXHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGtleSBpbiBldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50c0FycmF5LnB1c2goYCR7a2V5LnRvTG93ZXJDYXNlKCl9PVwiJHtldmVudHNba2V5XX1cImApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRzQXJyYXkuam9pbihcIiBcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBjbGFzc2VzKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHtjbGFzc05hbWUgPSBbXX0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRDbGFzc2VzKGNsYXNzTmFtZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBzdHlsZXMoKXtcclxuICAgICAgICAgICAgY29uc3Qge3N0eWxlID0ge319ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0U3R5bGVzKHN0eWxlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGVtcGxhdGUoKXtcclxuICAgICAgICAgICAgcmV0dXJuIGBgXHJcbiAgICAgICAgfVxyXG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VyID0gZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQubWFwKCBwYXJzZXIgKS5qb2luKFwiXCIpXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZHJhdykge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5kcmF3KClcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBlbGVtZW50ISBcIiArIGVsZW1lbnQpXHJcbiAgICB9O1xuXG4gICAgY2xhc3MgVGFnIGV4dGVuZHMgQmFzZUVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgIShjaGlsZHJlbi5kcmF3KSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGVtcGxhdGUoY29udGVudCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRoaXMub3B0aW9ucy50YWcgPyB0aGlzLm9wdGlvbnMudGFnIDogdGhpcy50YWc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8JHt0YWd9ICR7dGhpcy5hdHRyaWJ1dGVzfSAke3RoaXMuZXZlbnRzfT4ke2NvbnRlbnR9PC8ke3RhZ30+XHJcbiAgICAgICAgYFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHJhdygpe1xyXG4gICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLCBodG1sO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBjaGlsZHJlbjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZHJlbiBpbnN0YW5jZW9mIEJhc2VFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gY2hpbGRyZW4uZHJhdygpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gY2hpbGRyZW4ubWFwKCBwYXJzZXIgKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZShodG1sKVxyXG4gICAgICAgIH1cclxuICAgIH1cblxuICAgIGNsYXNzIFRhZ0VtcHR5IGV4dGVuZHMgQmFzZUVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRlbXBsYXRlKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRoaXMub3B0aW9ucy50YWcgPyB0aGlzLm9wdGlvbnMudGFnIDogdGhpcy50YWc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8JHt0YWd9ICR7dGhpcy5hdHRyaWJ1dGVzfSAke3RoaXMuZXZlbnRzfS8+XHJcbiAgICAgICAgYFxyXG4gICAgICAgIH1cclxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlciA9ICh2aWV3ID0gW10sIHJlbmRlclRvID0gZG9jdW1lbnQuYm9keSwgb3B0aW9ucyA9IHt9KSA9PiB7XHJcbiAgICAgICAgbGV0IGh0bWwsIHJlbmRlclBvaW50O1xyXG5cclxuXHJcbiAgICAgICAgY29uc3Qge2NsZWFyID0gdHJ1ZSwgd2hlcmUgPSAnYmVmb3JlZW5kJ30gPSBvcHRpb25zO1xyXG5cclxuICAgICAgICByZW5kZXJQb2ludCA9IHR5cGVvZiByZW5kZXJUbyA9PT0gXCJzdHJpbmdcIiA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocmVuZGVyVG8pIDogcmVuZGVyVG87XHJcblxyXG4gICAgICAgIGlmICghcmVuZGVyUG9pbnQpIHtcclxuICAgICAgICAgICAgcmVuZGVyUG9pbnQgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsZWFyKSB7XHJcbiAgICAgICAgICAgIHJlbmRlclBvaW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmlldykpIHtcclxuICAgICAgICAgICAgdmlldyA9IFt2aWV3XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGh0bWwgPSB2aWV3Lm1hcCggcGFyc2VyICkuam9pbihcIlwiKTtcclxuICAgICAgICByZW5kZXJQb2ludC5pbnNlcnRBZGphY2VudEhUTUwod2hlcmUsIGh0bWwpO1xyXG4gICAgfTtcblxuICAgIGNsYXNzIFJvdXRlciB7XHJcbiAgICAgICAgdmVyc2lvbiA9IFwiMC4xLjBcIlxyXG4gICAgICAgIF9yb3V0ZXMgPSBbXVxyXG4gICAgICAgIF9yb3V0ZSA9ICcvJ1xyXG4gICAgICAgIF9tb2RlID0gbnVsbFxyXG4gICAgICAgIF9pZ25vcmUgPSAnW2RhdGEtcm91dGUtaWdub3JlXSdcclxuICAgICAgICBfNDA0ID0gKCkgPT4ge31cclxuXHJcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1vZGUpIHRoaXMuX21vZGUgPSB0aGlzLm9wdGlvbnMubW9kZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmUpIHRoaXMuX2lnbm9yZSA9IHRoaXMub3B0aW9ucy5pZ25vcmU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucm91dGVzKSB0aGlzLmFkZFJvdXRlcyh0aGlzLm9wdGlvbnMucm91dGVzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tcIjQwNFwiXSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zW1wiNDA0XCJdID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuXzQwNCA9IHRoaXMub3B0aW9uc1tcIjQwNFwiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsZWFyU2xhc2hlcyhwYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJykucmVwbGFjZSgvXlxcLy8sICcnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5kZXgocGF0aCl7XHJcbiAgICAgICAgICAgIGxldCBleGlzdHMgPSAtMTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl9yb3V0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb3V0ZXNbaV0ucGF0aCA9PT0gcGF0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0c1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcm91dGVFeGlzdHMocGF0aCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4KHBhdGgpICE9PSAtMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX3JvdXRlc0ZuKHJvdXRlcywgZm4pe1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3V0ZXMpICYmIHJvdXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJvdXRlcy5mb3JFYWNoKCByID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoci5wYXRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ZuXShyLnBhdGgsIHIuY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3V0ZXMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiByb3V0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm91dGVzLmhhc093blByb3BlcnR5KGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZm5dKGtleSwgcm91dGVzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkUm91dGUocGF0aCwgY2FsbGJhY2spe1xyXG4gICAgICAgICAgICBpZiAocGF0aCAmJiAhdGhpcy5yb3V0ZUV4aXN0cyhwYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm91dGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ14nICsgKHBhdGgpLnJlcGxhY2UoLzpcXHcrL2csJyhcXFxcdyspJykgKyAnJCcpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRSb3V0ZXMocm91dGVzKXtcclxuICAgICAgICAgICAgdGhpcy5fcm91dGVzRm4ocm91dGVzLCAnYWRkUm91dGUnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVwZFJvdXRlKHBhdGgsIHJvdXRlKXtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuaW5kZXgocGF0aCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHJldHVyblxyXG5cclxuICAgICAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLnBhdGgpIHRoaXMuX3JvdXRlc1tpXS5wYXRoID0gcm91dGUucGF0aDtcclxuICAgICAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLmNhbGxiYWNrKSB0aGlzLl9yb3V0ZXNbaV0uY2FsbGJhY2sgPSByb3V0ZS5jYWxsYmFjaztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRSb3V0ZXMocm91dGVzKXtcclxuICAgICAgICAgICAgdGhpcy5fcm91dGVzRm4ocm91dGVzLCAndXBkUm91dGUnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlbFJvdXRlKHBhdGgpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yb3V0ZUV4aXN0cyhwYXRoKSlcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yb3V0ZXNbcGF0aF07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmluZFJvdXRlKHBhdGgpe1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yb3V0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXRoLm1hdGNoKHRoaXMuX3JvdXRlc1tpXS5wYXR0ZXJuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3JvdXRlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleGVjKGxvYyA9IGRvY3VtZW50LmxvY2F0aW9uLCBwdXNoU3RhdGUgPSBmYWxzZSl7XHJcbiAgICAgICAgICAgIGxldCB1cmwsIHBhdGgsIHJvdXRlO1xyXG5cclxuICAgICAgICAgICAgdXJsID0gbmV3IFVSTChsb2MpO1xyXG4gICAgICAgICAgICBwYXRoID0gdXJsLnBhdGhuYW1lO1xyXG4gICAgICAgICAgICByb3V0ZSA9IHRoaXMuZmluZFJvdXRlKHBhdGgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fNDA0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHVzaFN0YXRlKVxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgcGF0aCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocm91dGUgJiYgdHlwZW9mIHJvdXRlLmNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHJvdXRlLmNhbGxiYWNrLmFwcGx5KHRoaXMsIFtwYXRoXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucm91dGUgPSBwYXRoO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpc3Rlbigpe1xyXG4gICAgICAgICAgICBjb25zdCB7aWdub3JlfSA9IHRoaXMub3B0aW9ucztcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGxldCBocmVmO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcImFcIiB8fCB0YXJnZXQubWF0Y2hlcyhpZ25vcmUpKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaHJlZiA9IHRhcmdldC5ocmVmO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChocmVmKSB0aGlzLmV4ZWMoaHJlZiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXhlYyhkb2N1bWVudC5sb2NhdGlvbik7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJvdXRlciA9IHJvdXRlcyA9PiBuZXcgUm91dGVyKHJvdXRlcyk7XG5cbiAgICBjb25zdCBjcmVhdGVTdHlsZUVsZW1lbnQgPSAoY29udGVudCA9ICcnLCBtZWRpYSkgPT4ge1xyXG4gICAgICAgIGxldCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKG1lZGlhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudCkpO1xyXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gc3R5bGVcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY3JlYXRlU3R5bGVTaGVldCA9IChtZWRpYSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHlsZUVsZW1lbnQobWVkaWEpLnNoZWV0XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGFkZENzc1J1bGUgPSAoc2hlZXQsIHNlbGVjdG9yLCBydWxlcykgPT4ge1xyXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoc2VsZWN0b3IgKyBcIntcIiArIHJ1bGVzICsgXCJ9XCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBhZGRTdHlsZSA9IChzdHlsZSwgbWVkaWEpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZVN0eWxlRWxlbWVudChzdHlsZSwgbWVkaWEpO1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNoZWV0ID0gY3JlYXRlU3R5bGVTaGVldChtZWRpYSk7XHJcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gc3R5bGUpIHtcclxuICAgICAgICAgICAgYWRkQ3NzUnVsZShzaGVldCwga2V5LCBzZXRTdHlsZXMoc3R5bGVba2V5XSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XG5cbiAgICBjb25zdCBjc3NMb2FkZXIgPSBhc3luYyAocGF0aCwgb3B0aW9ucykgPT4ge1xyXG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBhdGgsIG9wdGlvbnMpLCB0ZXh0Tm9kZSwgdGFnO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUVFAgZXJyb3I6IFwiICsgcmVzcG9uc2Uuc3RhdHVzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGV4dE5vZGUgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgICAgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0Tm9kZSkpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFnKTtcclxuICAgIH07XG5cbiAgICBjb25zdCBqc0xvYWRlciA9IGFzeW5jIChwYXRoLCBvcHRpb25zKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGF0aCwgb3B0aW9ucyksIHRleHROb2RlLCB0YWc7XHJcblxyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBlcnJvcjogXCIgKyByZXNwb25zZS5zdGF0dXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0ZXh0Tm9kZSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgICB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICAgIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0Tm9kZSkpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFnKTtcclxuICAgIH07XG5cbiAgICBjb25zdCB2aWV3TG9hZGVyID0gYXN5bmMgKHBhdGgsIG9wdGlvbnMgPSB7fSwgc3RvcmFnZSA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlLCB0ZXh0Tm9kZSwgcmVzdWx0ID0gKCkgPT4ge30sIHN0b3JhZ2VLZXk7XHJcblxyXG4gICAgICAgIGlmIChzdG9yYWdlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBzdG9yYWdlS2V5ID0gYGh0bWxqczo6a2V5Ojoke3BhdGh9YDtcclxuICAgICAgICAgICAgdGV4dE5vZGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGV4dE5vZGUpIHtcclxuXHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGF0aCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIVFRQIGVycm9yOiBcIiArIHJlc3BvbnNlLnN0YXR1cylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGV4dE5vZGUgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RvcmFnZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIHRleHROb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZXZhbDIgPSBldmFsO1xyXG5cclxuICAgICAgICBldmFsMihgcmVzdWx0ID0gJHt0ZXh0Tm9kZX1gKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT09IFwiZnVuY3Rpb25cIiA/IHJlc3VsdCgpIDogcmVzdWx0XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNsZWFyVmlld1N0b3JhZ2VIb2xkZXIgPSBwYXRoID0+IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGBodG1sanM6OmtleTo6JHtwYXRofWApO1xuXG4gICAgY2xhc3MgU3BhbiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3NwYW4nXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3BhbiA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBTcGFuKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEltZyBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnaW1nJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImFsaWduXCIsIFwiYWx0XCIsIFwiYm9yZGVyXCIsIFwiaGVpZ2h0XCIsIFwiaHNwYWNlXCIsIFwiaXNtYXBcIiwgXCJsb25nZGVzY1wiLCBcImxvd3NyY1wiLCBcInNyY1wiLCBcInZzcGFjZVwiLCBcIndpZHRoXCIsIFwidXNlbWFwXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGltZyA9IChvcHRpb25zID0ge30pID0+IG5ldyBJbWcob3B0aW9ucyk7XHJcbiAgICBjb25zdCBpbWcyID0gKHNyYyA9ICcnLCBhbHQgPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBpbWcoey4uLm9wdGlvbnMsIHNyYywgYWx0fSk7XG5cbiAgICBjbGFzcyBJbnB1dCBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSBcImlucHV0XCJcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICBcImFjY2VwdFwiLCBcImFsaWduXCIsIFwiYWx0XCIsIFwiYXV0b2NvbXBsZXRlXCIsIFwiYXV0b2ZvY3VzXCIsIFwiYm9yZGVyXCIsIFwiY2hlY2tlZFwiLCBcImRpc2FibGVkXCIsIFwiZm9ybVwiLCBcImZvcm1hY3Rpb25cIixcclxuICAgICAgICAgICAgICAgIFwiZm9ybWVuY3R5cGVcIiwgXCJmb3JtbWV0aG9kXCIsIFwiZm9ybW5vdmFsaWRhdGVcIiwgXCJmb3JtdGFyZ2V0XCIsIFwibGlzdFwiLCBcIm1heFwiLCBcIm1heGxlbmd0aFwiLCBcIm1pblwiLCBcIm11bHRpcGxlXCIsXHJcbiAgICAgICAgICAgICAgICBcIm5hbWVcIiwgXCJwYXR0ZXJuXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJzaXplXCIsIFwic3JjXCIsIFwic3RlcFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5wdXQgPSAob3B0aW9ucyA9IHt9KSA9PiBuZXcgSW5wdXQob3B0aW9ucyk7XHJcbiAgICBjb25zdCBpbnB1dDIgPSAodmFsdWUgPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgSW5wdXQoey4uLm9wdGlvbnMsIHZhbHVlfSk7XG5cbiAgICBjbGFzcyBCciBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnYnInXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiY2xlYXJcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYnIgPSBvcHRpb25zID0+IG5ldyBCcihvcHRpb25zKTtcblxuICAgIGNsYXNzIEhyIGV4dGVuZHMgVGFnRW1wdHkge1xyXG4gICAgICAgIHRhZyA9ICdocidcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBociA9IG9wdGlvbnMgPT4gbmV3IEhyKG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgSGVhZGluZyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgY29uc3RydWN0b3IodGFnID0gJ2gxJywgY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy50YWcgPSB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhlYWRpbmcgPSAodGFnID0gJ2gxJywgY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgSGVhZGluZyh0YWcsIGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGgxID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gaGVhZGluZygnaDEnLCBjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBoMiA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IGhlYWRpbmcoJ2gyJywgY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgaDMgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBoZWFkaW5nKCdoMycsIGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGg0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gaGVhZGluZygnaDQnLCBjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBoNSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IGhlYWRpbmcoJ2g1JywgY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgaDYgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBoZWFkaW5nKCdoNicsIGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdzZWN0aW9uJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNlY3Rpb24gPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgU2VjdGlvbihjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBBbmNob3IgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdhJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImNvb3Jkc1wiLCBcImRvd25sb2FkXCIsIFwiaHJlZmxhbmdcIiwgXCJuYW1lXCIsIFwicmVsXCIsIFwicmV2XCIsIFwic2hhcGVcIiwgXCJ0YXJnZXRcIiwgXCJ0eXBlXCIsIFwiaHJlZlwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhbmNob3IgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQW5jaG9yKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGEgPSAoaHJlZiA9ICcjJywgY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQW5jaG9yKGNoaWxkcmVuLCB7Li4ub3B0aW9ucywgaHJlZn0pO1xuXG4gICAgY2xhc3MgQWJiciBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gXCJhYmJyXCJcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhYmJyID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEFiYnIoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgQXJ0aWNsZSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2FydGljbGUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJ0aWNsZSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBBcnRpY2xlKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIE5hdiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ25hdidcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuYXYgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgTmF2KGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEFzaWRlIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnYXNpZGUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXNpZGUgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQXNpZGUoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgSGVhZGVyIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnaGVhZGVyJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhlYWRlciA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBIZWFkZXIoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgRm9vdGVyIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZm9vdGVyJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZvb3RlciA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBGb290ZXIoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgQWRkcmVzcyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2FkZHJlc3MnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYWRkcmVzcyA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBBZGRyZXNzKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIE1hcCQxIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnbWFwJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcIm5hbWVcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWFwID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IE1hcCQxKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBBcmVhIGV4dGVuZHMgVGFnRW1wdHkge1xyXG4gICAgICAgIHRhZyA9ICdhcmVhJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImFsdFwiLCBcImNvb3Jkc1wiLCBcImhyZWZsYW5nXCIsIFwibm9ocmVmXCIsIFwic2hhcGVcIiwgXCJ0YXJnZXRcIiwgXCJ0eXBlXCIsIFwiaHJlZlwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcmVhID0gKG9wdGlvbnMgPSB7fSkgPT4gbmV3IEFyZWEob3B0aW9ucyk7XHJcbiAgICBjb25zdCBhcmVhMiA9IChocmVmID0gJyMnLCBvcHRpb25zID0ge30pID0+IGFyZWEoey4uLm9wdGlvbnMsIGhyZWZ9KTtcblxuICAgIGNsYXNzIEF1ZGlvVGFnIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnYXVkaW8nXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYXV0b3BsYXlcIiwgXCJjb250cm9sc1wiLCBcImxvb3BcIiwgXCJwcmVsb2FkXCIsIFwic3JjXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF1ZGlvID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEF1ZGlvVGFnKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGF1ZGlvMiA9IChzcmMgPSAnJywgY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQXVkaW9UYWcoY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBzcmN9KTtcblxuICAgIGNsYXNzIEJvbGQgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdiJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJvbGQgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQm9sZChjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBCZGkgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdiZGknXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmRpID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEJkaShjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBCZG8gZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdiZG8nXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmRvID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEJkbyhjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBCbG9ja3F1b3RlIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnYmxvY2txdW90ZSdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJjaXRlXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBibG9ja3F1b3RlID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEJsb2NrcXVvdGUoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgQnV0dG9uIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnYnV0dG9uJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImF1dG9mb2N1c1wiLCBcImZvcm1cIiwgXCJmb3JtYWN0aW9uXCIsIFwiZm9ybWVuY3R5cGVcIiwgXCJmb3JtbWV0aG9kXCIsIFwiZm9ybW5vdmFsaWRhdGVcIiwgXCJmb3JtdGFyZ2V0XCIsIFwibmFtZVwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBidXR0b24gPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQnV0dG9uKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIENhbnZhcyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2NhbnZhcydcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjYW52YXMgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgQ2FudmFzKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFRhYmxlIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAndGFibGUnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgXCJhbGlnblwiLCBcImJhY2tncm91bmRcIiwgXCJiZ2NvbG9yXCIsIFwiYm9yZGVyXCIsIFwiYm9yZGVyY29sb3JcIiwgXCJjZWxscGFkZGluZ1wiLFxyXG4gICAgICAgICAgICAgICAgXCJjZWxsc3BhY2luZ1wiLCBcImNvbHNcIiwgXCJmcmFtZVwiLCBcImhlaWdodFwiLCBcInJ1bGVzXCIsIFwic3VtbWFyeVwiLCBcIndpZHRoXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0YWJsZSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBUYWJsZShjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgQ2FwdGlvbiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2NhcHRpb24nXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJ2YWxpZ25cIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FwdGlvbiA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBDYXB0aW9uKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBDb2wgZXh0ZW5kcyBUYWdFbXB0eSB7XHJcbiAgICAgICAgdGFnID0gJ2NvbCdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJhbGlnblwiLCBcInZhbGlnblwiLCBcImNoYXJcIiwgXCJjaGFyb2ZmXCIsIFwic3BhblwiLCBcIndpZHRoXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbCA9IG9wdGlvbnMgPT4gbmV3IENvbChvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBDb2xncm91cCBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnY29sZ3JvdXAnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJ2YWxpZ25cIiwgXCJjaGFyXCIsIFwiY2hhcm9mZlwiLCBcInNwYW5cIiwgXCJ3aWR0aFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb2xncm91cCA9IG9wdGlvbnMgPT4gbmV3IENvbGdyb3VwKG9wdGlvbnMpO1xyXG5cclxuICAgIGNsYXNzIFRhYmxlU2VjdGlvbiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgY29uc3RydWN0b3IodGFnID0gJ3Rib2R5JywgY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy50YWcgPSB0YWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImFsaWduXCIsIFwidmFsaWduXCIsIFwiY2hhclwiLCBcImNoYXJvZmZcIiwgXCJiZ2NvbG9yXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRib2R5ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFRhYmxlU2VjdGlvbigndGJvZHknLCBjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCB0aGVhZCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBUYWJsZVNlY3Rpb24oJ3RoZWFkJywgY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgdGZvb3QgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgVGFibGVTZWN0aW9uKCd0Zm9vdCcsIGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBUYWJsZVJvdyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gXCJ0clwiXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJiZ2NvbG9yXCIsIFwiYm9yZGVyY29sb3JcIiwgXCJjaGFyXCIsIFwiY2hhcm9mZlwiLCBcInZhbGlnblwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ciA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBUYWJsZVJvdyhjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgVGFibGVDZWxsIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICBjb25zdHJ1Y3Rvcih0YWcgPSAndGQnLCBjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgc3VwZXIoY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnRhZyA9IHRhZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWJiclwiLCBcImFsaWduXCIsIFwiYXhpc1wiLCBcImJhY2tncm91bmRcIiwgXCJiZ2NvbG9yXCIsIFwiYm9yZGVyY29sb3JcIiwgXCJjaGFyXCIsIFwiY2hhcm9mZlwiLCBcImNvbHNwYW5cIiwgXCJoZWFkZXJzXCIsIFwiaGVpZ2h0XCIsIFwibm93cmFwXCIsIFwicm93c3BhblwiLCBcInNjb3BlXCIsIFwidmFsaWduXCIsIFwid2lkdGhcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGggPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgVGFibGVDZWxsKCd0aCcsIGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IHRkID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFRhYmxlQ2VsbCgndGQnLCBjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBDaXRlIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnY2l0ZSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaXRlID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IENpdGUoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgQ29kZSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2NvZGUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29kZSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBDb2RlKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIERsIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZGwnXHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgRHQgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdkdCdcclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBEZCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2RkJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRsID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IERsKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGR0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IER0KGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGRkID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IERkKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIERldGFpbHMgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdkZXRhaWxzJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRldGFpbHMgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgRGV0YWlscyhjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgU3VtbWFyeSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3N1bW1hcnknXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3VtbWFyeSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBTdW1tYXJ5KGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIERmbiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2RmbidcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkZm4gPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgRGZuKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIERpdiBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2RpdidcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJhbGlnblwiLCBcInRpdGxlXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpdiA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBEaXYoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgRW0gZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdlbSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBFbShjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBJdGFsIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnaSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpdGFsID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEl0YWwoY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgaSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBJdGFsKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFN0cm9uZyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3N0cm9uZydcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdHJvbmcgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgU3Ryb25nKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEVtYmVkIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZW1iZWQnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJoZWlnaHRcIiwgXCJoc3BhY2VcIiwgXCJwbHVnaW5zcGFjZVwiLCBcInNyY1wiLCBcInR5cGVcIiwgXCJ2c3BhY2VcIiwgXCJ3aWR0aFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbWJlZCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBFbWJlZChjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgTm9FbWJlZCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ25vZW1iZWQnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm9lbWJlZCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBOb0VtYmVkKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEZpZWxkc2V0IGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZmllbGRzZXQnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiZm9ybVwiLCBcInRpdGxlXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZpZWxkc2V0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEZpZWxkc2V0KGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBMZWdlbmQgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdsZWdlbmQnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJ0aXRsZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsZWdlbmQgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgTGVnZW5kKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEZpZ3VyZSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2ZpZ3VyZSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmaWd1cmUgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgRmlndXJlKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBGaWdDYXB0aW9uIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZmlnY2FwdGlvbidcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmaWdjYXB0aW9uID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEZpZ0NhcHRpb24oY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgRm9ybSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2Zvcm0nXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWNjZXB0LWNoYXJzZXRcIiwgXCJhY3Rpb25cIiwgXCJhdXRvY29tcGxldGVcIiwgXCJlbmN0eXBlXCIsIFwibWV0aG9kXCIsIFwibmFtZVwiLCBcIm5vdmFsaWRhdGVcIiwgXCJ0YXJnZXRcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZm9ybSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBGb3JtKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEZyYW1lc2V0IGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnZnJhbWVzZXQnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYm9yZGVyXCIsIFwiYm9yZGVyY29sb3JcIiwgXCJjb2xzXCIsIFwiZnJhbWVib3JkZXJcIiwgXCJmcmFtZXNwYWNpbmdcIiwgXCJyb3dzXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZyYW1lc2V0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IEZyYW1lc2V0KGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBGcmFtZSBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnZnJhbWUnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYm9yZGVyY29sb3JcIiwgXCJmcmFtZWJvcmRlclwiLCBcIm5vcmVzaXplXCIsIFwibmFtZVwiLCBcInNyY1wiLCBcInNjcm9sbGluZ1wiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmcmFtZSA9IChvcHRpb25zID0ge30pID0+IG5ldyBGcmFtZShvcHRpb25zKTtcclxuICAgIGNvbnN0IGZyYW1lMiA9IChzcmMgPSAnJywgbmFtZSA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBGcmFtZSh7Li4ub3B0aW9ucywgc3JjLCBuYW1lfSk7XHJcblxyXG4gICAgY2xhc3MgTm9GcmFtZXMgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdub2ZyYW1lcydcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBub2ZyYW1lcyA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBOb0ZyYW1lcyhjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBJRnJhbWUgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdpZnJhbWUnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYWxpZ25cIiwgXCJhbGxvd3RyYW5zcGFyZW5jeVwiLCBcImZyYW1lYm9yZGVyXCIsIFwiaGVpZ2h0XCIsIFwiaHNwYWNlXCIsIFwibWFyZ2luaGVpZ2h0XCIsIFwibWFyZ2lud2lkdGhcIiwgXCJuYW1lXCIsIFwic2FuZGJveFwiLCBcInNjcm9sbGluZ1wiLCBcInNlYW1sZXNzXCIsIFwic3JjXCIsIFwic3JjZG9jXCIsIFwidnNwYWNlXCIsIFwid2lkdGhcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaWZyYW1lID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IElGcmFtZShjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBpZnJhbWUyID0gKHNyYyA9ICcnLCBuYW1lID0gJycsIGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IElGcmFtZShjaGlsZHJlbiwgey4uLm9wdGlvbnMsIHNyYywgbmFtZX0pO1xuXG4gICAgY2xhc3MgSW5zIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnaW5zJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImNpdGVcIiwgXCJkYXRldGltZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbnMgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgSW5zKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEtiZCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2tiZCdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBrYmQgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgS2JkKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIExhYmVsIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnbGFiZWwnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiZm9yXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxhYmVsID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IExhYmVsKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IGxhYmVsMiA9IChfZm9yID0gJycsIGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbGFiZWwoY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBcImZvclwiOiBfZm9yfSk7XG5cbiAgICBjbGFzcyBMaXN0IGV4dGVuZHMgVGFnIHtcclxuICAgICAgICBjb25zdHJ1Y3Rvcih0YWcgPSAndWwnLCBjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgc3VwZXIoY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnRhZyA9IHRhZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWcgPT09ICd1bCdcclxuICAgICAgICAgICAgICAgID8gW1widHlwZVwiXVxyXG4gICAgICAgICAgICAgICAgOiBbXCJ0eXBlXCIsIFwicmVzZXJ2ZWRcIiwgXCJzdGFydFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBMaXN0SXRlbSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gXCJsaVwiXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1widHlwZVwiLCBcInZhbHVlXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVsID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IExpc3QoJ3VsJywgY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG4gICAgY29uc3Qgb2wgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgTGlzdCgnb2wnLCBjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBsaSA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBMaXN0SXRlbShjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBNYXJrIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnbWFyaydcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtYXJrJDEgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgTWFyayhjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBOb1NjcmlwdCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ25vc2NyaXB0J1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5vc2NyaXB0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IE5vU2NyaXB0KGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFNlbGVjdCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3NlbGVjdCdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJhdXRvZm9jdXNcIiwgXCJmb3JtXCIsIFwibmFtZVwiLCBcInNpemVcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0ID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFNlbGVjdChjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgT3B0aW9uR3JvdXAgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdvcHRncm91cCdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJsYWJlbFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRncm91cCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBPcHRpb25Hcm91cChjaGlsZHJlbiwgb3B0aW9ucyk7XHJcblxyXG4gICAgY2xhc3MgT3B0aW9uIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnb3B0aW9uJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImxhYmVsXCIsIFwidmFsdWVcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9uID0gKHZhbHVlID0gJycsIGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IE9wdGlvbih2YWx1ZSwgY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgT3V0cHV0IGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnb3V0cHV0J1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImZvclwiLCBcImZvcm1cIiwgXCJuYW1lXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG91dHB1dCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBPdXRwdXQoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAncCdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJhbGlnblwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYXJhZ3JhcGggPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgUGFyYWdyYXBoKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IHAgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgUGFyYWdyYXBoKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFByZSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3ByZSdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcmUgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgUHJlKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFF1b3RlZCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3EnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiY2l0ZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBxID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFF1b3RlZChjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBTdHJpa2UgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdzdHJpa2UnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RyaWtlID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFN0cmlrZShjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBzID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFN0cmlrZShjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBTY3JpcHQgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdzY3JpcHQnXHJcblxyXG4gICAgICAgIHNlbGZBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wiYXN5bmNcIiwgXCJkZWZlclwiLCBcImxhbmd1YWdlXCIsIFwic3JjXCIsIFwidHlwZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzY3JpcHQgPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgU2NyaXB0KGNoaWxkcmVuLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IHNjcmlwdDIgPSAoc3JjID0gJycsIGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gc2NyaXB0KGNoaWxkcmVuLCB7Li4ub3B0aW9ucywgc3JjfSk7XG5cbiAgICBjbGFzcyBTbWFsbCBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3NtYWxsJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNtYWxsID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFNtYWxsKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFNvdXJjZSBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnc291cmNlJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcIm1lZGlhXCIsIFwic3JjXCIsIFwidHlwZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzb3VyY2UgPSAob3B0aW9ucyA9IHt9KSA9PiBuZXcgU291cmNlKG9wdGlvbnMpO1xyXG4gICAgY29uc3Qgc291cmNlMiA9IChzcmMgPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBzb3VyY2Uoey4uLm9wdGlvbnMsIHNyY30pO1xuXG4gICAgY2xhc3MgU3ViIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnc3ViJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN1YiA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBTdWIoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgU3VwIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAnc3VwJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN1cCA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBTdXAoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgVGV4dGFyZWEgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICd0ZXh0YXJlYSdcclxuXHJcbiAgICAgICAgc2VsZkF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJhdXRvZm9jdXNcIiwgXCJjb2xzXCIsIFwiZm9ybVwiLCBcIm1heGxlbmd0aFwiLCBcIm5hbWVcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJvd3NcIiwgXCJ3cmFwXCJdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHRhcmVhID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFRleHRhcmVhKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIFRpbWUgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICd0aW1lJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImRhdGV0aW1lXCIsIFwicHViZGF0ZVwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0aW1lID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFRpbWUoY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgVHJhY2sgZXh0ZW5kcyBUYWdFbXB0eSB7XHJcbiAgICAgICAgdGFnID0gJ3RyYWNrJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImtpbmRcIiwgXCJzcmNcIiwgXCJzcmNsYW5nXCIsIFwibGFiZWxcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdHJhY2sgPSAob3B0aW9ucyA9IHt9KSA9PiBuZXcgVHJhY2sob3B0aW9ucyk7XHJcbiAgICBjb25zdCB0cmFjazIgPSAoc3JjID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gdHJhY2soey4uLm9wdGlvbnMsIHNyY30pO1xuXG4gICAgY2xhc3MgVmFyIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAndmFyJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhcmlhYmxlID0gKGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gbmV3IFZhcihjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBWaWRlb1RhZyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ3ZpZGVvJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImF1dG9wbGF5XCIsIFwiY29udHJvbHNcIiwgXCJoZWlnaHRcIiwgXCJsb29wXCIsIFwibG9vcFwiLCBcInBvc3RlclwiLCBcInByZWxvYWRcIiwgXCJzcmNcIiwgXCJ3aWR0aFwiXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2aWRlbyA9IChjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pID0+IG5ldyBWaWRlb1RhZyhjaGlsZHJlbiwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCB2aWRlbzIgPSAoc3JjID0gJycsIGNoaWxkcmVuID0gJycsIG9wdGlvbnMgPSB7fSkgPT4gdmlkZW8oY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBzcmN9KTtcblxuICAgIGNsYXNzIFdiciBleHRlbmRzIFRhZ0VtcHR5IHtcclxuICAgICAgICB0YWcgPSAnd2JyJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHdiciA9IG9wdGlvbnMgPT4gbmV3IFdicihvcHRpb25zKTtcblxuICAgIGNsYXNzIE1haW4gZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIHRhZyA9ICdtYWluJ1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1haW4gPSAoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSA9PiBuZXcgTWFpbihjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBGbGV4Ym94IGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSBcImRpdlwiXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuID0gXCJcIiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGxldCB7c3R5bGUgPSB7fSwgb3JkZXIgPSAwLCBqdXN0aWZ5ID0gXCJmbGV4LXN0YXJ0XCIsIGFsaWduID0gXCJzdHJldGNoXCIsIGNvbnRlbnQgPSBcIm5vcm1hbFwifSA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IGZsZXggPSBbXCJkaXJlY3Rpb25cIiwgXCJ3cmFwXCIsIFwiZmxvd1wiLCBcImdyb3dcIiwgXCJzaHJpbmtcIiwgXCJiYXNpc1wiXTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBvcHRpb25zLmlubGluZSA9PT0gdHJ1ZSA/IFwiaW5saW5lLWZsZXhcIiA6IFwiZmxleFwiO1xyXG5cclxuICAgICAgICAgICAgZmxleC5mb3JFYWNoKCB2ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1t2XSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlW2BmbGV4LSR7dn1gXSA9IG9wdGlvbnNbdl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLm9yZGVyID0gb3JkZXI7XHJcbiAgICAgICAgICAgIHN0eWxlLmp1c3RpZnlDb250ZW50ID0ganVzdGlmeTtcclxuICAgICAgICAgICAgc3R5bGUuYWxpZ25JdGVtcyA9IGFsaWduO1xyXG4gICAgICAgICAgICBzdHlsZS5hbGlnbkNvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgc3VwZXIoY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBzdHlsZX0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmbGV4Ym94ID0gKGNoaWxkcmVuLCBvcHRpb25zKSA9PiBuZXcgRmxleGJveChjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBNYXJnaW4gZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuID0gXCJcIiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGxldCB7c3R5bGUgPSB7fX0gPSBvcHRpb25zO1xyXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInRvcFwiLCBcImJvdHRvbVwiXTtcclxuXHJcbiAgICAgICAgICAgIHBvc2l0aW9uLmZvckVhY2goIHYgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW3ZdICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IG9wdGlvbnNbdl07XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVbYG1hcmdpbi0ke3Z9YF0gPSBpc05hTih2YWwpID8gdmFsIDogYCR7dmFsfXB4YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIoY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBzdHlsZX0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtYXJnaW4gPSAoY2hpbGRyZW4sIG9wdGlvbnMpID0+IG5ldyBNYXJnaW4oY2hpbGRyZW4sIG9wdGlvbnMpO1xuXG4gICAgY2xhc3MgUGFkZGluZyBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoY2hpbGRyZW4gPSBcIlwiLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgbGV0IHtzdHlsZSA9IHt9fSA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gW1wibGVmdFwiLCBcInJpZ2h0XCIsIFwidG9wXCIsIFwiYm90dG9tXCJdO1xyXG5cclxuICAgICAgICAgICAgcG9zaXRpb24uZm9yRWFjaCggdiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbdl0gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gb3B0aW9uc1t2XTtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVtgcGFkZGluZy0ke3Z9YF0gPSBpc05hTih2YWwpID8gdmFsIDogYCR7dmFsfXB4YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIoY2hpbGRyZW4sIHsuLi5vcHRpb25zLCBzdHlsZX0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYWRkaW5nID0gKGNoaWxkcmVuLCBvcHRpb25zKSA9PiBuZXcgUGFkZGluZyhjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBDZW50ZXIgZXh0ZW5kcyBUYWcge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuID0gXCJcIiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGxldCB7c3R5bGUgPSB7fX0gPSBvcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyKGNoaWxkcmVuLCB7Li4ub3B0aW9ucywgc3R5bGV9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2VudGVyID0gKGNoaWxkcmVuLCBvcHRpb25zKSA9PiBuZXcgQ2VudGVyKGNoaWxkcmVuLCBvcHRpb25zKTtcblxuICAgIGNsYXNzIEZpZ3VyZVNpbXBsZSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgdGFnID0gJ2ZpZ3VyZSdcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoaW1nID0gJycsIGNhcHRpb24gPSAnJywgYWx0PSAnJywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGlmIChhbHQgJiYgdHlwZW9mIGFsdCAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFsdDtcclxuICAgICAgICAgICAgICAgIGFsdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbWcgPSBpbWc7XHJcbiAgICAgICAgICAgIHRoaXMuYWx0ID0gYWx0O1xyXG4gICAgICAgICAgICB0aGlzLmNhcHRpb24gPSBjYXB0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGVtcGxhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDwke3RoaXMudGFnfSAke3RoaXMuYXR0cmlidXRlc30gJHt0aGlzLmV2ZW50c30+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7dGhpcy5pbWd9XCIgYWx0PVwiJHt0aGlzLmFsdH1cIj5cclxuICAgICAgICAgICAgICAgIDxmaWdjYXB0aW9uPiR7dGhpcy5jYXB0aW9ufTwvZmlnY2FwdGlvbj4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPC8ke3RoaXMudGFnfT5cclxuICAgICAgICBgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZpZ3VyZVNpbXBsZSA9IChpbWcsIGNhcHRpb24sIGFsdCwgb3B0aW9ucykgPT4gbmV3IEZpZ3VyZVNpbXBsZShpbWcsIGNhcHRpb24sIGFsdCwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBDc3NHcmlkIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihjaGlsZHJlbiA9ICcnLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgbGV0IHtzdHlsZSA9IHt9fSA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gW1wiZ2FwXCIsIFwidGVtcGxhdGVSb3dzXCIsIFwidGVtcGxhdGVDb2x1bW5zXCIsIFwidGVtcGxhdGVBcmVhc1wiLCBcImF1dG9Sb3dzXCIsIFwiYXV0b0NvbHVtbnNcIiwgXCJhdXRvRmxvd1wiXTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBcImdyaWRcIjsgLy8gaW5saW5lLWdyaWQgP1xyXG5cclxuICAgICAgICAgICAgcHJvcHMuZm9yRWFjaCggdiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbdl0gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVtgZ3JpZC0ke2Rhc2hlZE5hbWUodil9YF0gPSBvcHRpb25zW3ZdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICBzdXBlcihjaGlsZHJlbiwgey4uLm9wdGlvbnMsIHN0eWxlfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNzc0dyaWQgPSAoY2hpbGRyZW4sIG9wdGlvbnMpID0+IG5ldyBDc3NHcmlkKGNoaWxkcmVuLCBvcHRpb25zKTtcclxuXHJcbiAgICBjbGFzcyBDc3NHcmlkSXRlbSBleHRlbmRzIFRhZyB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoY2hpbGRyZW4gPSAnJywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGxldCB7c3R5bGUgPSB7fX0gPSBvcHRpb25zO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IFtcInJvd1N0YXJ0XCIsIFwicm93RW5kXCIsIFwiY29sdW1uU3RhcnRcIiwgXCJjb2x1bW5FbmRcIiwgXCJhcmVhXCIsIFwiY29sdW1uXCIsIFwicm93XCJdO1xyXG5cclxuICAgICAgICAgICAgcHJvcHMuZm9yRWFjaCggdiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbdl0gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVtgZ3JpZC0ke2Rhc2hlZE5hbWUodil9YF0gPSBvcHRpb25zW3ZdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICBzdXBlcihjaGlsZHJlbiwgey4uLm9wdGlvbnMsIHN0eWxlfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50YWcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFnID0gb3B0aW9ucy50YWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3NzR3JpZEl0ZW0gPSAoY2hpbGRyZW4sIG9wdGlvbnMpID0+IG5ldyBDc3NHcmlkSXRlbShjaGlsZHJlbiwgb3B0aW9ucyk7XG5cbiAgICBjbGFzcyBNZXRhIGV4dGVuZHMgVGFnRW1wdHkge1xyXG4gICAgICAgIHRhZyA9ICdtZXRhJ1xyXG5cclxuICAgICAgICBzZWxmQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcImNvbnRlbnRcIiwgXCJuYW1lXCIsIFwiaHR0cC1lcXVpdlwiLCBcImNoYXJzZXRcIl1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWV0YSA9IG9wdGlvbnMgPT4gbmV3IE1ldGEob3B0aW9ucyk7XHJcblxyXG4gICAgY29uc3QgYWRkTWV0YSA9IG9wdGlvbnMgPT4ge1xyXG4gICAgICAgIGxldCBtZXRhcyA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvckFsbChcIm1ldGFcIik7XHJcbiAgICAgICAgbGV0IG1ldGFFbGVtZW50ID0gbWV0YShvcHRpb25zKSwgYXR0cjtcclxuICAgICAgICBjb25zdCBjaGVjayA9IFtcIm5hbWVcIiwgXCJjaGFyc2V0XCIsIFwiaHR0cC1lcXVpdlwiXTtcclxuXHJcbiAgICAgICAgbWV0YXMuZm9yRWFjaCggdiA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hlY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSBjaGVja1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW2F0dHJdICYmICh2Lmhhc0F0dHJpYnV0ZShhdHRyKSAmJiB2LmdldEF0dHJpYnV0ZShhdHRyKSA9PT0gb3B0aW9uc1thdHRyXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlbmRlcihtZXRhRWxlbWVudCwgZG9jdW1lbnQuaGVhZCwge2NsZWFyOiBmYWxzZX0pO1xyXG4gICAgfTtcblxuICAgIGNsYXNzIFRpdGxlIGV4dGVuZHMgVGFnIHtcclxuICAgICAgICB0YWcgPSAndGl0bGUnXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGl0bGUgPSB0ZXh0ID0+IG5ldyBUaXRsZSh0ZXh0KTtcclxuXHJcbiAgICBjb25zdCBhZGRUaXRsZSA9IHRleHQgPT4ge1xyXG4gICAgICAgIGxldCB0ID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKFwidGl0bGVcIik7XHJcblxyXG4gICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgIHQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIodGl0bGUodGV4dCksIGRvY3VtZW50LmhlYWQsIHtjbGVhcjogZmFsc2V9KTtcclxuICAgIH07XG5cbiAgICB2YXIgaHRtbCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgICBCYXNlRWxlbWVudDogQmFzZUVsZW1lbnQsXG4gICAgICAgIFRhZzogVGFnLFxuICAgICAgICBUYWdFbXB0eTogVGFnRW1wdHksXG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICByb3V0ZXI6IHJvdXRlcixcbiAgICAgICAgUm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIGNyZWF0ZVN0eWxlRWxlbWVudDogY3JlYXRlU3R5bGVFbGVtZW50LFxuICAgICAgICBjcmVhdGVTdHlsZVNoZWV0OiBjcmVhdGVTdHlsZVNoZWV0LFxuICAgICAgICBhZGRDc3NSdWxlOiBhZGRDc3NSdWxlLFxuICAgICAgICBhZGRTdHlsZTogYWRkU3R5bGUsXG4gICAgICAgIGNzc0xvYWRlcjogY3NzTG9hZGVyLFxuICAgICAgICBqc0xvYWRlcjoganNMb2FkZXIsXG4gICAgICAgIHZpZXdMb2FkZXI6IHZpZXdMb2FkZXIsXG4gICAgICAgIGNsZWFyVmlld1N0b3JhZ2VIb2xkZXI6IGNsZWFyVmlld1N0b3JhZ2VIb2xkZXIsXG4gICAgICAgIGJyOiBicixcbiAgICAgICAgQnI6IEJyLFxuICAgICAgICBocjogaHIsXG4gICAgICAgIEhyOiBIcixcbiAgICAgICAgc3Bhbjogc3BhbixcbiAgICAgICAgU3BhbjogU3BhbixcbiAgICAgICAgSW1nOiBJbWcsXG4gICAgICAgIGltZzogaW1nLFxuICAgICAgICBpbWcyOiBpbWcyLFxuICAgICAgICBJbnB1dDogSW5wdXQsXG4gICAgICAgIGlucHV0OiBpbnB1dCxcbiAgICAgICAgaW5wdXQyOiBpbnB1dDIsXG4gICAgICAgIGhlYWRpbmc6IGhlYWRpbmcsXG4gICAgICAgIEhlYWRpbmc6IEhlYWRpbmcsXG4gICAgICAgIGgxOiBoMSxcbiAgICAgICAgaDI6IGgyLFxuICAgICAgICBoMzogaDMsXG4gICAgICAgIGg0OiBoNCxcbiAgICAgICAgaDU6IGg1LFxuICAgICAgICBoNjogaDYsXG4gICAgICAgIHNlY3Rpb246IHNlY3Rpb24sXG4gICAgICAgIFNlY3Rpb246IFNlY3Rpb24sXG4gICAgICAgIGFuY2hvcjogYW5jaG9yLFxuICAgICAgICBhOiBhLFxuICAgICAgICBBbmNob3I6IEFuY2hvcixcbiAgICAgICAgYWJicjogYWJicixcbiAgICAgICAgQWJicjogQWJicixcbiAgICAgICAgYXJ0aWNsZTogYXJ0aWNsZSxcbiAgICAgICAgQXJ0aWNsZTogQXJ0aWNsZSxcbiAgICAgICAgbmF2OiBuYXYsXG4gICAgICAgIE5hdjogTmF2LFxuICAgICAgICBhc2lkZTogYXNpZGUsXG4gICAgICAgIEFzaWRlOiBBc2lkZSxcbiAgICAgICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgICAgIEhlYWRlcjogSGVhZGVyLFxuICAgICAgICBmb290ZXI6IGZvb3RlcixcbiAgICAgICAgRm9vdGVyOiBGb290ZXIsXG4gICAgICAgIGFkZHJlc3M6IGFkZHJlc3MsXG4gICAgICAgIEFkZHJlc3M6IEFkZHJlc3MsXG4gICAgICAgIG1hcDogbWFwLFxuICAgICAgICBNYXA6IE1hcCQxLFxuICAgICAgICBhcmVhOiBhcmVhLFxuICAgICAgICBBcmVhOiBBcmVhLFxuICAgICAgICBhcmVhMjogYXJlYTIsXG4gICAgICAgIGF1ZGlvOiBhdWRpbyxcbiAgICAgICAgYXVkaW8yOiBhdWRpbzIsXG4gICAgICAgIEF1ZGlvVGFnOiBBdWRpb1RhZyxcbiAgICAgICAgYm9sZDogYm9sZCxcbiAgICAgICAgQm9sZDogQm9sZCxcbiAgICAgICAgYmRpOiBiZGksXG4gICAgICAgIEJkaTogQmRpLFxuICAgICAgICBiZG86IGJkbyxcbiAgICAgICAgQmRvOiBCZG8sXG4gICAgICAgIGJsb2NrcXVvdGU6IGJsb2NrcXVvdGUsXG4gICAgICAgIEJsb2NrcXVvdGU6IEJsb2NrcXVvdGUsXG4gICAgICAgIGJ1dHRvbjogYnV0dG9uLFxuICAgICAgICBCdXR0b246IEJ1dHRvbixcbiAgICAgICAgY2FudmFzOiBjYW52YXMsXG4gICAgICAgIENhbnZhczogQ2FudmFzLFxuICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgIFRhYmxlOiBUYWJsZSxcbiAgICAgICAgY2FwdGlvbjogY2FwdGlvbixcbiAgICAgICAgQ2FwdGlvbjogQ2FwdGlvbixcbiAgICAgICAgY29sOiBjb2wsXG4gICAgICAgIENvbDogQ29sLFxuICAgICAgICBjb2xncm91cDogY29sZ3JvdXAsXG4gICAgICAgIENvbGdyb3VwOiBDb2xncm91cCxcbiAgICAgICAgVGFibGVTZWN0aW9uOiBUYWJsZVNlY3Rpb24sXG4gICAgICAgIFRhYmxlQ2VsbDogVGFibGVDZWxsLFxuICAgICAgICB0aGVhZDogdGhlYWQsXG4gICAgICAgIHRib2R5OiB0Ym9keSxcbiAgICAgICAgdGZvb3Q6IHRmb290LFxuICAgICAgICB0ZDogdGQsXG4gICAgICAgIHRoOiB0aCxcbiAgICAgICAgdHI6IHRyLFxuICAgICAgICBUYWJsZVJvdzogVGFibGVSb3csXG4gICAgICAgIGNpdGU6IGNpdGUsXG4gICAgICAgIENpdGU6IENpdGUsXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIENvZGU6IENvZGUsXG4gICAgICAgIGRsOiBkbCxcbiAgICAgICAgZHQ6IGR0LFxuICAgICAgICBkZDogZGQsXG4gICAgICAgIERsOiBEbCxcbiAgICAgICAgRHQ6IER0LFxuICAgICAgICBEZDogRGQsXG4gICAgICAgIGRldGFpbHM6IGRldGFpbHMsXG4gICAgICAgIERldGFpbHM6IERldGFpbHMsXG4gICAgICAgIHN1bW1hcnk6IHN1bW1hcnksXG4gICAgICAgIFN1bW1hcnk6IFN1bW1hcnksXG4gICAgICAgIGRmbjogZGZuLFxuICAgICAgICBEZm46IERmbixcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIERpdjogRGl2LFxuICAgICAgICBlbTogZW0sXG4gICAgICAgIEVtOiBFbSxcbiAgICAgICAgaXRhbDogaXRhbCxcbiAgICAgICAgSXRhbDogSXRhbCxcbiAgICAgICAgaTogaSxcbiAgICAgICAgc3Ryb25nOiBzdHJvbmcsXG4gICAgICAgIFN0cm9uZzogU3Ryb25nLFxuICAgICAgICBlbWJlZDogZW1iZWQsXG4gICAgICAgIEVtYmVkOiBFbWJlZCxcbiAgICAgICAgbm9lbWJlZDogbm9lbWJlZCxcbiAgICAgICAgTm9FbWJlZDogTm9FbWJlZCxcbiAgICAgICAgZmllbGRzZXQ6IGZpZWxkc2V0LFxuICAgICAgICBGaWVsZHNldDogRmllbGRzZXQsXG4gICAgICAgIGxlZ2VuZDogbGVnZW5kLFxuICAgICAgICBMZWdlbmQ6IExlZ2VuZCxcbiAgICAgICAgZmlndXJlOiBmaWd1cmUsXG4gICAgICAgIEZpZ3VyZTogRmlndXJlLFxuICAgICAgICBmaWdjYXB0aW9uOiBmaWdjYXB0aW9uLFxuICAgICAgICBGaWdDYXB0aW9uOiBGaWdDYXB0aW9uLFxuICAgICAgICBmb3JtOiBmb3JtLFxuICAgICAgICBGb3JtOiBGb3JtLFxuICAgICAgICBmcmFtZTogZnJhbWUsXG4gICAgICAgIGZyYW1lMjogZnJhbWUyLFxuICAgICAgICBmcmFtZXNldDogZnJhbWVzZXQsXG4gICAgICAgIEZyYW1lOiBGcmFtZSxcbiAgICAgICAgRnJhbWVzZXQ6IEZyYW1lc2V0LFxuICAgICAgICBub2ZyYW1lczogbm9mcmFtZXMsXG4gICAgICAgIE5vRnJhbWVzOiBOb0ZyYW1lcyxcbiAgICAgICAgaWZyYW1lOiBpZnJhbWUsXG4gICAgICAgIElGcmFtZTogSUZyYW1lLFxuICAgICAgICBpZnJhbWUyOiBpZnJhbWUyLFxuICAgICAgICBpbnM6IGlucyxcbiAgICAgICAgSW5zOiBJbnMsXG4gICAgICAgIGtiZDoga2JkLFxuICAgICAgICBLYmQ6IEtiZCxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBsYWJlbDI6IGxhYmVsMixcbiAgICAgICAgTGFiZWw6IExhYmVsLFxuICAgICAgICB1bDogdWwsXG4gICAgICAgIG9sOiBvbCxcbiAgICAgICAgbGk6IGxpLFxuICAgICAgICBMaXN0OiBMaXN0LFxuICAgICAgICBMaXN0SXRlbTogTGlzdEl0ZW0sXG4gICAgICAgIG1hcms6IG1hcmskMSxcbiAgICAgICAgTWFyazogTWFyayxcbiAgICAgICAgbm9zY3JpcHQ6IG5vc2NyaXB0LFxuICAgICAgICBOb1NjcmlwdDogTm9TY3JpcHQsXG4gICAgICAgIHNlbGVjdDogc2VsZWN0LFxuICAgICAgICBTZWxlY3Q6IFNlbGVjdCxcbiAgICAgICAgT3B0aW9uR3JvdXA6IE9wdGlvbkdyb3VwLFxuICAgICAgICBvcHRncm91cDogb3B0Z3JvdXAsXG4gICAgICAgIE9wdGlvbjogT3B0aW9uLFxuICAgICAgICBvcHRpb246IG9wdGlvbixcbiAgICAgICAgb3V0cHV0OiBvdXRwdXQsXG4gICAgICAgIE91dHB1dDogT3V0cHV0LFxuICAgICAgICBwOiBwLFxuICAgICAgICBQYXJhZ3JhcGg6IFBhcmFncmFwaCxcbiAgICAgICAgcGFyYWdyYXBoOiBwYXJhZ3JhcGgsXG4gICAgICAgIHByZTogcHJlLFxuICAgICAgICBQcmU6IFByZSxcbiAgICAgICAgcTogcSxcbiAgICAgICAgUXVvdGVkOiBRdW90ZWQsXG4gICAgICAgIHM6IHMsXG4gICAgICAgIHN0cmlrZTogc3RyaWtlLFxuICAgICAgICBTdHJpa2U6IFN0cmlrZSxcbiAgICAgICAgc2NyaXB0OiBzY3JpcHQsXG4gICAgICAgIFNjcmlwdDogU2NyaXB0LFxuICAgICAgICBzY3JpcHQyOiBzY3JpcHQyLFxuICAgICAgICBzbWFsbDogc21hbGwsXG4gICAgICAgIFNtYWxsOiBTbWFsbCxcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIFNvdXJjZTogU291cmNlLFxuICAgICAgICBzb3VyY2UyOiBzb3VyY2UyLFxuICAgICAgICBzdWI6IHN1YixcbiAgICAgICAgU3ViOiBTdWIsXG4gICAgICAgIHN1cDogc3VwLFxuICAgICAgICBTdXA6IFN1cCxcbiAgICAgICAgdGV4dGFyZWE6IHRleHRhcmVhLFxuICAgICAgICBUZXh0YXJlYTogVGV4dGFyZWEsXG4gICAgICAgIHRpbWU6IHRpbWUsXG4gICAgICAgIFRpbWU6IFRpbWUsXG4gICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgVHJhY2s6IFRyYWNrLFxuICAgICAgICB0cmFjazI6IHRyYWNrMixcbiAgICAgICAgdmFyaWFibGU6IHZhcmlhYmxlLFxuICAgICAgICBWYXI6IFZhcixcbiAgICAgICAgdmlkZW86IHZpZGVvLFxuICAgICAgICBWaWRlb1RhZzogVmlkZW9UYWcsXG4gICAgICAgIHZpZGVvMjogdmlkZW8yLFxuICAgICAgICB3YnI6IHdicixcbiAgICAgICAgV2JyOiBXYnIsXG4gICAgICAgIG1haW46IG1haW4sXG4gICAgICAgIE1haW46IE1haW4sXG4gICAgICAgIGZsZXhib3g6IGZsZXhib3gsXG4gICAgICAgIEZsZXhib3g6IEZsZXhib3gsXG4gICAgICAgIG1hcmdpbjogbWFyZ2luLFxuICAgICAgICBNYXJnaW46IE1hcmdpbixcbiAgICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgICAgUGFkZGluZzogUGFkZGluZyxcbiAgICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICAgIENlbnRlcjogQ2VudGVyLFxuICAgICAgICBmaWd1cmVTaW1wbGU6IGZpZ3VyZVNpbXBsZSxcbiAgICAgICAgRmlndXJlU2ltcGxlOiBGaWd1cmVTaW1wbGUsXG4gICAgICAgIGNzc0dyaWQ6IGNzc0dyaWQsXG4gICAgICAgIENzc0dyaWQ6IENzc0dyaWQsXG4gICAgICAgIGNzc0dyaWRJdGVtOiBjc3NHcmlkSXRlbSxcbiAgICAgICAgQ3NzR3JpZEl0ZW06IENzc0dyaWRJdGVtLFxuICAgICAgICBtZXRhOiBtZXRhLFxuICAgICAgICBNZXRhOiBNZXRhLFxuICAgICAgICBhZGRNZXRhOiBhZGRNZXRhLFxuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIFRpdGxlOiBUaXRsZSxcbiAgICAgICAgYWRkVGl0bGU6IGFkZFRpdGxlXG4gICAgfSk7XG5cbiAgICBjb25zdCBnbG9iYWxpemUgPSAoKSA9PiB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5EYXRldGltZSA9IERhdGV0aW1lO1xyXG4gICAgICAgIGdsb2JhbFRoaXMuZGF0ZXRpbWUgPSBkYXRldGltZTtcclxuICAgICAgICBnbG9iYWxUaGlzLlN0ciA9IFN0cjtcclxuICAgICAgICBnbG9iYWxUaGlzLnN0cmluZyA9IHN0cjtcclxuICAgICAgICBnbG9iYWxUaGlzLiQgPSAkJDE7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5RdWVyeSA9IFF1ZXJ5JDE7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIGdsb2JhbFRoaXMuaHRtbCA9IHtcclxuICAgICAgICAgICAgLi4uaHRtbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5fX2h0bWxTYXZlciA9IHt9O1xyXG4gICAgICAgIGdsb2JhbFRoaXMuaHRtbC5leHRyYWN0ID0gKGN0eCA9IGdsb2JhbFRoaXMpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGdsb2JhbFRoaXMuaHRtbCkge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX2h0bWxTYXZlcltrZXldID0gZ2xvYmFsVGhpc1trZXldO1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSBnbG9iYWxUaGlzLmh0bWxba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGdsb2JhbFRoaXMuaHRtbC5yZXN0b3JlID0gKGN0eCA9IGdsb2JhbFRoaXMpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGdsb2JhbFRoaXMuX19odG1sU2F2ZXIpIHtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gZ2xvYmFsVGhpcy5fX2h0bWxTYXZlcltrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XG5cbiAgICB2YXIgb2xkJDEgPSB7fTtcblxuICAgIC8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuICAgIC8vXG4gICAgLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbiAgICAvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gICAgLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gICAgLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICAgIC8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbiAgICAvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbiAgICAvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAvL1xuICAgIC8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gICAgLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gICAgLy9cbiAgICAvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gICAgLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICAgIC8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbiAgICAvLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbiAgICAvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcbiAgICAvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4gICAgLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuICAgIHZhciBwYXRoTW9kdWxlID0gcmVxdWlyZSQkNF9fZGVmYXVsdFtcImRlZmF1bHRcIl07XG4gICAgdmFyIGlzV2luZG93cyQxID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbiAgICB2YXIgZnMkMiA9IHJlcXVpcmUkJDBfX2RlZmF1bHRbXCJkZWZhdWx0XCJdO1xuXG4gICAgLy8gSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiByZWFscGF0aCwgcG9ydGVkIGZyb20gbm9kZSBwcmUtdjZcblxuICAgIHZhciBERUJVRyA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgJiYgL2ZzLy50ZXN0KHByb2Nlc3MuZW52Lk5PREVfREVCVUcpO1xuXG4gICAgZnVuY3Rpb24gcmV0aHJvdygpIHtcbiAgICAgIC8vIE9ubHkgZW5hYmxlIGluIGRlYnVnIG1vZGUuIEEgYmFja3RyYWNlIHVzZXMgfjEwMDAgYnl0ZXMgb2YgaGVhcCBzcGFjZSBhbmRcbiAgICAgIC8vIGlzIGZhaXJseSBzbG93IHRvIGdlbmVyYXRlLlxuICAgICAgdmFyIGNhbGxiYWNrO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIHZhciBiYWNrdHJhY2UgPSBuZXcgRXJyb3I7XG4gICAgICAgIGNhbGxiYWNrID0gZGVidWdDYWxsYmFjaztcbiAgICAgIH0gZWxzZVxuICAgICAgICBjYWxsYmFjayA9IG1pc3NpbmdDYWxsYmFjaztcblxuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuXG4gICAgICBmdW5jdGlvbiBkZWJ1Z0NhbGxiYWNrKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgYmFja3RyYWNlLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgICBlcnIgPSBiYWNrdHJhY2U7XG4gICAgICAgICAgbWlzc2luZ0NhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWlzc2luZ0NhbGxiYWNrKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbilcbiAgICAgICAgICAgIHRocm93IGVycjsgIC8vIEZvcmdvdCBhIGNhbGxiYWNrIGJ1dCBkb24ndCBrbm93IHdoZXJlPyBVc2UgTk9ERV9ERUJVRz1mc1xuICAgICAgICAgIGVsc2UgaWYgKCFwcm9jZXNzLm5vRGVwcmVjYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnZnM6IG1pc3NpbmcgY2FsbGJhY2sgJyArIChlcnIuc3RhY2sgfHwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbilcbiAgICAgICAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF5YmVDYWxsYmFjayhjYikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyA/IGNiIDogcmV0aHJvdygpO1xuICAgIH1cblxuICAgIHBhdGhNb2R1bGUubm9ybWFsaXplO1xuXG4gICAgLy8gUmVnZXhwIHRoYXQgZmluZHMgdGhlIG5leHQgcGFydGlvbiBvZiBhIChwYXJ0aWFsKSBwYXRoXG4gICAgLy8gcmVzdWx0IGlzIFtiYXNlX3dpdGhfc2xhc2gsIGJhc2VdLCBlLmcuIFsnc29tZWRpci8nLCAnc29tZWRpciddXG4gICAgaWYgKGlzV2luZG93cyQxKSB7XG4gICAgICB2YXIgbmV4dFBhcnRSZSA9IC8oLio/KSg/OltcXC9cXFxcXSt8JCkvZztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRQYXJ0UmUgPSAvKC4qPykoPzpbXFwvXSt8JCkvZztcbiAgICB9XG5cbiAgICAvLyBSZWdleCB0byBmaW5kIHRoZSBkZXZpY2Ugcm9vdCwgaW5jbHVkaW5nIHRyYWlsaW5nIHNsYXNoLiBFLmcuICdjOlxcXFwnLlxuICAgIGlmIChpc1dpbmRvd3MkMSkge1xuICAgICAgdmFyIHNwbGl0Um9vdFJlID0gL14oPzpbYS16QS1aXTp8W1xcXFxcXC9dezJ9W15cXFxcXFwvXStbXFxcXFxcL11bXlxcXFxcXC9dKyk/W1xcXFxcXC9dKi87XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzcGxpdFJvb3RSZSA9IC9eW1xcL10qLztcbiAgICB9XG5cbiAgICBvbGQkMS5yZWFscGF0aFN5bmMgPSBmdW5jdGlvbiByZWFscGF0aFN5bmMocCwgY2FjaGUpIHtcbiAgICAgIC8vIG1ha2UgcCBpcyBhYnNvbHV0ZVxuICAgICAgcCA9IHBhdGhNb2R1bGUucmVzb2x2ZShwKTtcblxuICAgICAgaWYgKGNhY2hlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwgcCkpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlW3BdO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3JpZ2luYWwgPSBwLFxuICAgICAgICAgIHNlZW5MaW5rcyA9IHt9LFxuICAgICAgICAgIGtub3duSGFyZCA9IHt9O1xuXG4gICAgICAvLyBjdXJyZW50IGNoYXJhY3RlciBwb3NpdGlvbiBpbiBwXG4gICAgICB2YXIgcG9zO1xuICAgICAgLy8gdGhlIHBhcnRpYWwgcGF0aCBzbyBmYXIsIGluY2x1ZGluZyBhIHRyYWlsaW5nIHNsYXNoIGlmIGFueVxuICAgICAgdmFyIGN1cnJlbnQ7XG4gICAgICAvLyB0aGUgcGFydGlhbCBwYXRoIHdpdGhvdXQgYSB0cmFpbGluZyBzbGFzaCAoZXhjZXB0IHdoZW4gcG9pbnRpbmcgYXQgYSByb290KVxuICAgICAgdmFyIGJhc2U7XG4gICAgICAvLyB0aGUgcGFydGlhbCBwYXRoIHNjYW5uZWQgaW4gdGhlIHByZXZpb3VzIHJvdW5kLCB3aXRoIHNsYXNoXG4gICAgICB2YXIgcHJldmlvdXM7XG5cbiAgICAgIHN0YXJ0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICAvLyBTa2lwIG92ZXIgcm9vdHNcbiAgICAgICAgdmFyIG0gPSBzcGxpdFJvb3RSZS5leGVjKHApO1xuICAgICAgICBwb3MgPSBtWzBdLmxlbmd0aDtcbiAgICAgICAgY3VycmVudCA9IG1bMF07XG4gICAgICAgIGJhc2UgPSBtWzBdO1xuICAgICAgICBwcmV2aW91cyA9ICcnO1xuXG4gICAgICAgIC8vIE9uIHdpbmRvd3MsIGNoZWNrIHRoYXQgdGhlIHJvb3QgZXhpc3RzLiBPbiB1bml4IHRoZXJlIGlzIG5vIG5lZWQuXG4gICAgICAgIGlmIChpc1dpbmRvd3MkMSAmJiAha25vd25IYXJkW2Jhc2VdKSB7XG4gICAgICAgICAgZnMkMi5sc3RhdFN5bmMoYmFzZSk7XG4gICAgICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3YWxrIGRvd24gdGhlIHBhdGgsIHN3YXBwaW5nIG91dCBsaW5rZWQgcGF0aHBhcnRzIGZvciB0aGVpciByZWFsXG4gICAgICAvLyB2YWx1ZXNcbiAgICAgIC8vIE5COiBwLmxlbmd0aCBjaGFuZ2VzLlxuICAgICAgd2hpbGUgKHBvcyA8IHAubGVuZ3RoKSB7XG4gICAgICAgIC8vIGZpbmQgdGhlIG5leHQgcGFydFxuICAgICAgICBuZXh0UGFydFJlLmxhc3RJbmRleCA9IHBvcztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHRQYXJ0UmUuZXhlYyhwKTtcbiAgICAgICAgcHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgICBjdXJyZW50ICs9IHJlc3VsdFswXTtcbiAgICAgICAgYmFzZSA9IHByZXZpb3VzICsgcmVzdWx0WzFdO1xuICAgICAgICBwb3MgPSBuZXh0UGFydFJlLmxhc3RJbmRleDtcblxuICAgICAgICAvLyBjb250aW51ZSBpZiBub3QgYSBzeW1saW5rXG4gICAgICAgIGlmIChrbm93bkhhcmRbYmFzZV0gfHwgKGNhY2hlICYmIGNhY2hlW2Jhc2VdID09PSBiYXNlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc29sdmVkTGluaztcbiAgICAgICAgaWYgKGNhY2hlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwgYmFzZSkpIHtcbiAgICAgICAgICAvLyBzb21lIGtub3duIHN5bWJvbGljIGxpbmsuICBubyBuZWVkIHRvIHN0YXQgYWdhaW4uXG4gICAgICAgICAgcmVzb2x2ZWRMaW5rID0gY2FjaGVbYmFzZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YXQgPSBmcyQyLmxzdGF0U3luYyhiYXNlKTtcbiAgICAgICAgICBpZiAoIXN0YXQuaXNTeW1ib2xpY0xpbmsoKSkge1xuICAgICAgICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjYWNoZSkgY2FjaGVbYmFzZV0gPSBiYXNlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVhZCB0aGUgbGluayBpZiBpdCB3YXNuJ3QgcmVhZCBiZWZvcmVcbiAgICAgICAgICAvLyBkZXYvaW5vIGFsd2F5cyByZXR1cm4gMCBvbiB3aW5kb3dzLCBzbyBza2lwIHRoZSBjaGVjay5cbiAgICAgICAgICB2YXIgbGlua1RhcmdldCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpc1dpbmRvd3MkMSkge1xuICAgICAgICAgICAgdmFyIGlkID0gc3RhdC5kZXYudG9TdHJpbmcoMzIpICsgJzonICsgc3RhdC5pbm8udG9TdHJpbmcoMzIpO1xuICAgICAgICAgICAgaWYgKHNlZW5MaW5rcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgbGlua1RhcmdldCA9IHNlZW5MaW5rc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsaW5rVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBmcyQyLnN0YXRTeW5jKGJhc2UpO1xuICAgICAgICAgICAgbGlua1RhcmdldCA9IGZzJDIucmVhZGxpbmtTeW5jKGJhc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlZExpbmsgPSBwYXRoTW9kdWxlLnJlc29sdmUocHJldmlvdXMsIGxpbmtUYXJnZXQpO1xuICAgICAgICAgIC8vIHRyYWNrIHRoaXMsIGlmIGdpdmVuIGEgY2FjaGUuXG4gICAgICAgICAgaWYgKGNhY2hlKSBjYWNoZVtiYXNlXSA9IHJlc29sdmVkTGluaztcbiAgICAgICAgICBpZiAoIWlzV2luZG93cyQxKSBzZWVuTGlua3NbaWRdID0gbGlua1RhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc29sdmUgdGhlIGxpbmssIHRoZW4gc3RhcnQgb3ZlclxuICAgICAgICBwID0gcGF0aE1vZHVsZS5yZXNvbHZlKHJlc29sdmVkTGluaywgcC5zbGljZShwb3MpKTtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlKSBjYWNoZVtvcmlnaW5hbF0gPSBwO1xuXG4gICAgICByZXR1cm4gcDtcbiAgICB9O1xuXG5cbiAgICBvbGQkMS5yZWFscGF0aCA9IGZ1bmN0aW9uIHJlYWxwYXRoKHAsIGNhY2hlLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IG1heWJlQ2FsbGJhY2soY2FjaGUpO1xuICAgICAgICBjYWNoZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2UgcCBpcyBhYnNvbHV0ZVxuICAgICAgcCA9IHBhdGhNb2R1bGUucmVzb2x2ZShwKTtcblxuICAgICAgaWYgKGNhY2hlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwgcCkpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCBjYWNoZVtwXSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3JpZ2luYWwgPSBwLFxuICAgICAgICAgIHNlZW5MaW5rcyA9IHt9LFxuICAgICAgICAgIGtub3duSGFyZCA9IHt9O1xuXG4gICAgICAvLyBjdXJyZW50IGNoYXJhY3RlciBwb3NpdGlvbiBpbiBwXG4gICAgICB2YXIgcG9zO1xuICAgICAgLy8gdGhlIHBhcnRpYWwgcGF0aCBzbyBmYXIsIGluY2x1ZGluZyBhIHRyYWlsaW5nIHNsYXNoIGlmIGFueVxuICAgICAgdmFyIGN1cnJlbnQ7XG4gICAgICAvLyB0aGUgcGFydGlhbCBwYXRoIHdpdGhvdXQgYSB0cmFpbGluZyBzbGFzaCAoZXhjZXB0IHdoZW4gcG9pbnRpbmcgYXQgYSByb290KVxuICAgICAgdmFyIGJhc2U7XG4gICAgICAvLyB0aGUgcGFydGlhbCBwYXRoIHNjYW5uZWQgaW4gdGhlIHByZXZpb3VzIHJvdW5kLCB3aXRoIHNsYXNoXG4gICAgICB2YXIgcHJldmlvdXM7XG5cbiAgICAgIHN0YXJ0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICAvLyBTa2lwIG92ZXIgcm9vdHNcbiAgICAgICAgdmFyIG0gPSBzcGxpdFJvb3RSZS5leGVjKHApO1xuICAgICAgICBwb3MgPSBtWzBdLmxlbmd0aDtcbiAgICAgICAgY3VycmVudCA9IG1bMF07XG4gICAgICAgIGJhc2UgPSBtWzBdO1xuICAgICAgICBwcmV2aW91cyA9ICcnO1xuXG4gICAgICAgIC8vIE9uIHdpbmRvd3MsIGNoZWNrIHRoYXQgdGhlIHJvb3QgZXhpc3RzLiBPbiB1bml4IHRoZXJlIGlzIG5vIG5lZWQuXG4gICAgICAgIGlmIChpc1dpbmRvd3MkMSAmJiAha25vd25IYXJkW2Jhc2VdKSB7XG4gICAgICAgICAgZnMkMi5sc3RhdChiYXNlLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgICAgICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIExPT1AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKExPT1ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdhbGsgZG93biB0aGUgcGF0aCwgc3dhcHBpbmcgb3V0IGxpbmtlZCBwYXRocGFydHMgZm9yIHRoZWlyIHJlYWxcbiAgICAgIC8vIHZhbHVlc1xuICAgICAgZnVuY3Rpb24gTE9PUCgpIHtcbiAgICAgICAgLy8gc3RvcCBpZiBzY2FubmVkIHBhc3QgZW5kIG9mIHBhdGhcbiAgICAgICAgaWYgKHBvcyA+PSBwLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChjYWNoZSkgY2FjaGVbb3JpZ2luYWxdID0gcDtcbiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIHRoZSBuZXh0IHBhcnRcbiAgICAgICAgbmV4dFBhcnRSZS5sYXN0SW5kZXggPSBwb3M7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0UGFydFJlLmV4ZWMocCk7XG4gICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgY3VycmVudCArPSByZXN1bHRbMF07XG4gICAgICAgIGJhc2UgPSBwcmV2aW91cyArIHJlc3VsdFsxXTtcbiAgICAgICAgcG9zID0gbmV4dFBhcnRSZS5sYXN0SW5kZXg7XG5cbiAgICAgICAgLy8gY29udGludWUgaWYgbm90IGEgc3ltbGlua1xuICAgICAgICBpZiAoa25vd25IYXJkW2Jhc2VdIHx8IChjYWNoZSAmJiBjYWNoZVtiYXNlXSA9PT0gYmFzZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhMT09QKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWNoZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY2FjaGUsIGJhc2UpKSB7XG4gICAgICAgICAgLy8ga25vd24gc3ltYm9saWMgbGluay4gIG5vIG5lZWQgdG8gc3RhdCBhZ2Fpbi5cbiAgICAgICAgICByZXR1cm4gZ290UmVzb2x2ZWRMaW5rKGNhY2hlW2Jhc2VdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcyQyLmxzdGF0KGJhc2UsIGdvdFN0YXQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnb3RTdGF0KGVyciwgc3RhdCkge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcblxuICAgICAgICAvLyBpZiBub3QgYSBzeW1saW5rLCBza2lwIHRvIHRoZSBuZXh0IHBhdGggcGFydFxuICAgICAgICBpZiAoIXN0YXQuaXNTeW1ib2xpY0xpbmsoKSkge1xuICAgICAgICAgIGtub3duSGFyZFtiYXNlXSA9IHRydWU7XG4gICAgICAgICAgaWYgKGNhY2hlKSBjYWNoZVtiYXNlXSA9IGJhc2U7XG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soTE9PUCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGF0ICYgcmVhZCB0aGUgbGluayBpZiBub3QgcmVhZCBiZWZvcmVcbiAgICAgICAgLy8gY2FsbCBnb3RUYXJnZXQgYXMgc29vbiBhcyB0aGUgbGluayB0YXJnZXQgaXMga25vd25cbiAgICAgICAgLy8gZGV2L2lubyBhbHdheXMgcmV0dXJuIDAgb24gd2luZG93cywgc28gc2tpcCB0aGUgY2hlY2suXG4gICAgICAgIGlmICghaXNXaW5kb3dzJDEpIHtcbiAgICAgICAgICB2YXIgaWQgPSBzdGF0LmRldi50b1N0cmluZygzMikgKyAnOicgKyBzdGF0Lmluby50b1N0cmluZygzMik7XG4gICAgICAgICAgaWYgKHNlZW5MaW5rcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBnb3RUYXJnZXQobnVsbCwgc2VlbkxpbmtzW2lkXSwgYmFzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZzJDIuc3RhdChiYXNlLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcblxuICAgICAgICAgIGZzJDIucmVhZGxpbmsoYmFzZSwgZnVuY3Rpb24oZXJyLCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGlmICghaXNXaW5kb3dzJDEpIHNlZW5MaW5rc1tpZF0gPSB0YXJnZXQ7XG4gICAgICAgICAgICBnb3RUYXJnZXQoZXJyLCB0YXJnZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ290VGFyZ2V0KGVyciwgdGFyZ2V0LCBiYXNlKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuXG4gICAgICAgIHZhciByZXNvbHZlZExpbmsgPSBwYXRoTW9kdWxlLnJlc29sdmUocHJldmlvdXMsIHRhcmdldCk7XG4gICAgICAgIGlmIChjYWNoZSkgY2FjaGVbYmFzZV0gPSByZXNvbHZlZExpbms7XG4gICAgICAgIGdvdFJlc29sdmVkTGluayhyZXNvbHZlZExpbmspO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnb3RSZXNvbHZlZExpbmsocmVzb2x2ZWRMaW5rKSB7XG4gICAgICAgIC8vIHJlc29sdmUgdGhlIGxpbmssIHRoZW4gc3RhcnQgb3ZlclxuICAgICAgICBwID0gcGF0aE1vZHVsZS5yZXNvbHZlKHJlc29sdmVkTGluaywgcC5zbGljZShwb3MpKTtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGZzX3JlYWxwYXRoID0gcmVhbHBhdGg7XG4gICAgcmVhbHBhdGgucmVhbHBhdGggPSByZWFscGF0aDtcbiAgICByZWFscGF0aC5zeW5jID0gcmVhbHBhdGhTeW5jO1xuICAgIHJlYWxwYXRoLnJlYWxwYXRoU3luYyA9IHJlYWxwYXRoU3luYztcbiAgICByZWFscGF0aC5tb25rZXlwYXRjaCA9IG1vbmtleXBhdGNoO1xuICAgIHJlYWxwYXRoLnVubW9ua2V5cGF0Y2ggPSB1bm1vbmtleXBhdGNoO1xuXG4gICAgdmFyIGZzJDEgPSByZXF1aXJlJCQwX19kZWZhdWx0W1wiZGVmYXVsdFwiXTtcbiAgICB2YXIgb3JpZ1JlYWxwYXRoID0gZnMkMS5yZWFscGF0aDtcbiAgICB2YXIgb3JpZ1JlYWxwYXRoU3luYyA9IGZzJDEucmVhbHBhdGhTeW5jO1xuXG4gICAgdmFyIHZlcnNpb24gPSBwcm9jZXNzLnZlcnNpb247XG4gICAgdmFyIG9rID0gL152WzAtNV1cXC4vLnRlc3QodmVyc2lvbik7XG4gICAgdmFyIG9sZCA9IG9sZCQxO1xuXG4gICAgZnVuY3Rpb24gbmV3RXJyb3IgKGVyKSB7XG4gICAgICByZXR1cm4gZXIgJiYgZXIuc3lzY2FsbCA9PT0gJ3JlYWxwYXRoJyAmJiAoXG4gICAgICAgIGVyLmNvZGUgPT09ICdFTE9PUCcgfHxcbiAgICAgICAgZXIuY29kZSA9PT0gJ0VOT01FTScgfHxcbiAgICAgICAgZXIuY29kZSA9PT0gJ0VOQU1FVE9PTE9ORydcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFscGF0aCAocCwgY2FjaGUsIGNiKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgcmV0dXJuIG9yaWdSZWFscGF0aChwLCBjYWNoZSwgY2IpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2FjaGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2IgPSBjYWNoZTtcbiAgICAgICAgY2FjaGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgb3JpZ1JlYWxwYXRoKHAsIGNhY2hlLCBmdW5jdGlvbiAoZXIsIHJlc3VsdCkge1xuICAgICAgICBpZiAobmV3RXJyb3IoZXIpKSB7XG4gICAgICAgICAgb2xkLnJlYWxwYXRoKHAsIGNhY2hlLCBjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IoZXIsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWxwYXRoU3luYyAocCwgY2FjaGUpIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICByZXR1cm4gb3JpZ1JlYWxwYXRoU3luYyhwLCBjYWNoZSlcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9yaWdSZWFscGF0aFN5bmMocCwgY2FjaGUpXG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICBpZiAobmV3RXJyb3IoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZC5yZWFscGF0aFN5bmMocCwgY2FjaGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbmtleXBhdGNoICgpIHtcbiAgICAgIGZzJDEucmVhbHBhdGggPSByZWFscGF0aDtcbiAgICAgIGZzJDEucmVhbHBhdGhTeW5jID0gcmVhbHBhdGhTeW5jO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVubW9ua2V5cGF0Y2ggKCkge1xuICAgICAgZnMkMS5yZWFscGF0aCA9IG9yaWdSZWFscGF0aDtcbiAgICAgIGZzJDEucmVhbHBhdGhTeW5jID0gb3JpZ1JlYWxwYXRoU3luYztcbiAgICB9XG5cbiAgICBjb25zdCBpc1dpbmRvd3MgPSB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHByb2Nlc3MgJiZcbiAgICAgIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG4gICAgdmFyIHBhdGgkMiA9IGlzV2luZG93cyA/IHsgc2VwOiAnXFxcXCcgfSA6IHsgc2VwOiAnLycgfTtcblxuICAgIHZhciBiYWxhbmNlZE1hdGNoID0gYmFsYW5jZWQkMTtcbiAgICBmdW5jdGlvbiBiYWxhbmNlZCQxKGEsIGIsIHN0cikge1xuICAgICAgaWYgKGEgaW5zdGFuY2VvZiBSZWdFeHApIGEgPSBtYXliZU1hdGNoKGEsIHN0cik7XG4gICAgICBpZiAoYiBpbnN0YW5jZW9mIFJlZ0V4cCkgYiA9IG1heWJlTWF0Y2goYiwgc3RyKTtcblxuICAgICAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuXG4gICAgICByZXR1cm4gciAmJiB7XG4gICAgICAgIHN0YXJ0OiByWzBdLFxuICAgICAgICBlbmQ6IHJbMV0sXG4gICAgICAgIHByZTogc3RyLnNsaWNlKDAsIHJbMF0pLFxuICAgICAgICBib2R5OiBzdHIuc2xpY2UoclswXSArIGEubGVuZ3RoLCByWzFdKSxcbiAgICAgICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF5YmVNYXRjaChyZWcsIHN0cikge1xuICAgICAgdmFyIG0gPSBzdHIubWF0Y2gocmVnKTtcbiAgICAgIHJldHVybiBtID8gbVswXSA6IG51bGw7XG4gICAgfVxuXG4gICAgYmFsYW5jZWQkMS5yYW5nZSA9IHJhbmdlO1xuICAgIGZ1bmN0aW9uIHJhbmdlKGEsIGIsIHN0cikge1xuICAgICAgdmFyIGJlZ3MsIGJlZywgbGVmdCwgcmlnaHQsIHJlc3VsdDtcbiAgICAgIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICAgICAgdmFyIGJpID0gc3RyLmluZGV4T2YoYiwgYWkgKyAxKTtcbiAgICAgIHZhciBpID0gYWk7XG5cbiAgICAgIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgICAgICBpZihhPT09Yikge1xuICAgICAgICAgIHJldHVybiBbYWksIGJpXTtcbiAgICAgICAgfVxuICAgICAgICBiZWdzID0gW107XG4gICAgICAgIGxlZnQgPSBzdHIubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgIXJlc3VsdCkge1xuICAgICAgICAgIGlmIChpID09IGFpKSB7XG4gICAgICAgICAgICBiZWdzLnB1c2goaSk7XG4gICAgICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJlZ3MubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFsgYmVncy5wb3AoKSwgYmkgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmVnID0gYmVncy5wb3AoKTtcbiAgICAgICAgICAgIGlmIChiZWcgPCBsZWZ0KSB7XG4gICAgICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgICAgIHJpZ2h0ID0gYmk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgPSBhaSA8IGJpICYmIGFpID49IDAgPyBhaSA6IGJpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJlZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0ID0gWyBsZWZ0LCByaWdodCBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGJhbGFuY2VkID0gYmFsYW5jZWRNYXRjaDtcblxuICAgIHZhciBicmFjZUV4cGFuc2lvbiA9IGV4cGFuZFRvcDtcblxuICAgIHZhciBlc2NTbGFzaCA9ICdcXDBTTEFTSCcrTWF0aC5yYW5kb20oKSsnXFwwJztcbiAgICB2YXIgZXNjT3BlbiA9ICdcXDBPUEVOJytNYXRoLnJhbmRvbSgpKydcXDAnO1xuICAgIHZhciBlc2NDbG9zZSA9ICdcXDBDTE9TRScrTWF0aC5yYW5kb20oKSsnXFwwJztcbiAgICB2YXIgZXNjQ29tbWEgPSAnXFwwQ09NTUEnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG4gICAgdmFyIGVzY1BlcmlvZCA9ICdcXDBQRVJJT0QnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG5cbiAgICBmdW5jdGlvbiBudW1lcmljKHN0cikge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApID09IHN0clxuICAgICAgICA/IHBhcnNlSW50KHN0ciwgMTApXG4gICAgICAgIDogc3RyLmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXNjYXBlQnJhY2VzKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxcXFxcXFwnKS5qb2luKGVzY1NsYXNoKVxuICAgICAgICAgICAgICAgIC5zcGxpdCgnXFxcXHsnKS5qb2luKGVzY09wZW4pXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXFxcfScpLmpvaW4oZXNjQ2xvc2UpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXFxcLCcpLmpvaW4oZXNjQ29tbWEpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXFxcLicpLmpvaW4oZXNjUGVyaW9kKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmVzY2FwZUJyYWNlcyhzdHIpIHtcbiAgICAgIHJldHVybiBzdHIuc3BsaXQoZXNjU2xhc2gpLmpvaW4oJ1xcXFwnKVxuICAgICAgICAgICAgICAgIC5zcGxpdChlc2NPcGVuKS5qb2luKCd7JylcbiAgICAgICAgICAgICAgICAuc3BsaXQoZXNjQ2xvc2UpLmpvaW4oJ30nKVxuICAgICAgICAgICAgICAgIC5zcGxpdChlc2NDb21tYSkuam9pbignLCcpXG4gICAgICAgICAgICAgICAgLnNwbGl0KGVzY1BlcmlvZCkuam9pbignLicpO1xuICAgIH1cblxuXG4gICAgLy8gQmFzaWNhbGx5IGp1c3Qgc3RyLnNwbGl0KFwiLFwiKSwgYnV0IGhhbmRsaW5nIGNhc2VzXG4gICAgLy8gd2hlcmUgd2UgaGF2ZSBuZXN0ZWQgYnJhY2VkIHNlY3Rpb25zLCB3aGljaCBzaG91bGQgYmVcbiAgICAvLyB0cmVhdGVkIGFzIGluZGl2aWR1YWwgbWVtYmVycywgbGlrZSB7YSx7YixjfSxkfVxuICAgIGZ1bmN0aW9uIHBhcnNlQ29tbWFQYXJ0cyhzdHIpIHtcbiAgICAgIGlmICghc3RyKVxuICAgICAgICByZXR1cm4gWycnXTtcblxuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICB2YXIgbSA9IGJhbGFuY2VkKCd7JywgJ30nLCBzdHIpO1xuXG4gICAgICBpZiAoIW0pXG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoJywnKTtcblxuICAgICAgdmFyIHByZSA9IG0ucHJlO1xuICAgICAgdmFyIGJvZHkgPSBtLmJvZHk7XG4gICAgICB2YXIgcG9zdCA9IG0ucG9zdDtcbiAgICAgIHZhciBwID0gcHJlLnNwbGl0KCcsJyk7XG5cbiAgICAgIHBbcC5sZW5ndGgtMV0gKz0gJ3snICsgYm9keSArICd9JztcbiAgICAgIHZhciBwb3N0UGFydHMgPSBwYXJzZUNvbW1hUGFydHMocG9zdCk7XG4gICAgICBpZiAocG9zdC5sZW5ndGgpIHtcbiAgICAgICAgcFtwLmxlbmd0aC0xXSArPSBwb3N0UGFydHMuc2hpZnQoKTtcbiAgICAgICAgcC5wdXNoLmFwcGx5KHAsIHBvc3RQYXJ0cyk7XG4gICAgICB9XG5cbiAgICAgIHBhcnRzLnB1c2guYXBwbHkocGFydHMsIHApO1xuXG4gICAgICByZXR1cm4gcGFydHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kVG9wKHN0cikge1xuICAgICAgaWYgKCFzdHIpXG4gICAgICAgIHJldHVybiBbXTtcblxuICAgICAgLy8gSSBkb24ndCBrbm93IHdoeSBCYXNoIDQuMyBkb2VzIHRoaXMsIGJ1dCBpdCBkb2VzLlxuICAgICAgLy8gQW55dGhpbmcgc3RhcnRpbmcgd2l0aCB7fSB3aWxsIGhhdmUgdGhlIGZpcnN0IHR3byBieXRlcyBwcmVzZXJ2ZWRcbiAgICAgIC8vIGJ1dCAqb25seSogYXQgdGhlIHRvcCBsZXZlbCwgc28ge30sYX1iIHdpbGwgbm90IGV4cGFuZCB0byBhbnl0aGluZyxcbiAgICAgIC8vIGJ1dCBhe30sYn1jIHdpbGwgYmUgZXhwYW5kZWQgdG8gW2F9YyxhYmNdLlxuICAgICAgLy8gT25lIGNvdWxkIGFyZ3VlIHRoYXQgdGhpcyBpcyBhIGJ1ZyBpbiBCYXNoLCBidXQgc2luY2UgdGhlIGdvYWwgb2ZcbiAgICAgIC8vIHRoaXMgbW9kdWxlIGlzIHRvIG1hdGNoIEJhc2gncyBydWxlcywgd2UgZXNjYXBlIGEgbGVhZGluZyB7fVxuICAgICAgaWYgKHN0ci5zdWJzdHIoMCwgMikgPT09ICd7fScpIHtcbiAgICAgICAgc3RyID0gJ1xcXFx7XFxcXH0nICsgc3RyLnN1YnN0cigyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4cGFuZCQxKGVzY2FwZUJyYWNlcyhzdHIpLCB0cnVlKS5tYXAodW5lc2NhcGVCcmFjZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtYnJhY2Uoc3RyKSB7XG4gICAgICByZXR1cm4gJ3snICsgc3RyICsgJ30nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1BhZGRlZChlbCkge1xuICAgICAgcmV0dXJuIC9eLT8wXFxkLy50ZXN0KGVsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsdGUoaSwgeSkge1xuICAgICAgcmV0dXJuIGkgPD0geTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ3RlKGksIHkpIHtcbiAgICAgIHJldHVybiBpID49IHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kJDEoc3RyLCBpc1RvcCkge1xuICAgICAgdmFyIGV4cGFuc2lvbnMgPSBbXTtcblxuICAgICAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcbiAgICAgIGlmICghbSkgcmV0dXJuIFtzdHJdO1xuXG4gICAgICAvLyBubyBuZWVkIHRvIGV4cGFuZCBwcmUsIHNpbmNlIGl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgZnJlZSBvZiBicmFjZS1zZXRzXG4gICAgICB2YXIgcHJlID0gbS5wcmU7XG4gICAgICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICAgICAgPyBleHBhbmQkMShtLnBvc3QsIGZhbHNlKVxuICAgICAgICA6IFsnJ107XG5cbiAgICAgIGlmICgvXFwkJC8udGVzdChtLnByZSkpIHsgICAgXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcG9zdC5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIHZhciBleHBhbnNpb24gPSBwcmUrICd7JyArIG0uYm9keSArICd9JyArIHBvc3Rba107XG4gICAgICAgICAgZXhwYW5zaW9ucy5wdXNoKGV4cGFuc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc051bWVyaWNTZXF1ZW5jZSA9IC9eLT9cXGQrXFwuXFwuLT9cXGQrKD86XFwuXFwuLT9cXGQrKT8kLy50ZXN0KG0uYm9keSk7XG4gICAgICAgIHZhciBpc0FscGhhU2VxdWVuY2UgPSAvXlthLXpBLVpdXFwuXFwuW2EtekEtWl0oPzpcXC5cXC4tP1xcZCspPyQvLnRlc3QobS5ib2R5KTtcbiAgICAgICAgdmFyIGlzU2VxdWVuY2UgPSBpc051bWVyaWNTZXF1ZW5jZSB8fCBpc0FscGhhU2VxdWVuY2U7XG4gICAgICAgIHZhciBpc09wdGlvbnMgPSBtLmJvZHkuaW5kZXhPZignLCcpID49IDA7XG4gICAgICAgIGlmICghaXNTZXF1ZW5jZSAmJiAhaXNPcHRpb25zKSB7XG4gICAgICAgICAgLy8ge2F9LGJ9XG4gICAgICAgICAgaWYgKG0ucG9zdC5tYXRjaCgvLC4qXFx9LykpIHtcbiAgICAgICAgICAgIHN0ciA9IG0ucHJlICsgJ3snICsgbS5ib2R5ICsgZXNjQ2xvc2UgKyBtLnBvc3Q7XG4gICAgICAgICAgICByZXR1cm4gZXhwYW5kJDEoc3RyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtzdHJdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG47XG4gICAgICAgIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgICAgICAgbiA9IG0uYm9keS5zcGxpdCgvXFwuXFwuLyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbiA9IHBhcnNlQ29tbWFQYXJ0cyhtLmJvZHkpO1xuICAgICAgICAgIGlmIChuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8geHt7YSxifX15ID09PiB4e2F9eSB4e2J9eVxuICAgICAgICAgICAgbiA9IGV4cGFuZCQxKG5bMF0sIGZhbHNlKS5tYXAoZW1icmFjZSk7XG4gICAgICAgICAgICBpZiAobi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBvc3QubWFwKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5wcmUgKyBuWzBdICsgcDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgbiBpcyB0aGUgcGFydHMsIGFuZCB3ZSBrbm93IGl0J3Mgbm90IGEgY29tbWEgc2V0XG4gICAgICAgIC8vIHdpdGggYSBzaW5nbGUgZW50cnkuXG4gICAgICAgIHZhciBOO1xuXG4gICAgICAgIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgICAgICAgdmFyIHggPSBudW1lcmljKG5bMF0pO1xuICAgICAgICAgIHZhciB5ID0gbnVtZXJpYyhuWzFdKTtcbiAgICAgICAgICB2YXIgd2lkdGggPSBNYXRoLm1heChuWzBdLmxlbmd0aCwgblsxXS5sZW5ndGgpO1xuICAgICAgICAgIHZhciBpbmNyID0gbi5sZW5ndGggPT0gM1xuICAgICAgICAgICAgPyBNYXRoLmFicyhudW1lcmljKG5bMl0pKVxuICAgICAgICAgICAgOiAxO1xuICAgICAgICAgIHZhciB0ZXN0ID0gbHRlO1xuICAgICAgICAgIHZhciByZXZlcnNlID0geSA8IHg7XG4gICAgICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgICAgIGluY3IgKj0gLTE7XG4gICAgICAgICAgICB0ZXN0ID0gZ3RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcGFkID0gbi5zb21lKGlzUGFkZGVkKTtcblxuICAgICAgICAgIE4gPSBbXTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSB4OyB0ZXN0KGksIHkpOyBpICs9IGluY3IpIHtcbiAgICAgICAgICAgIHZhciBjO1xuICAgICAgICAgICAgaWYgKGlzQWxwaGFTZXF1ZW5jZSkge1xuICAgICAgICAgICAgICBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTtcbiAgICAgICAgICAgICAgaWYgKGMgPT09ICdcXFxcJylcbiAgICAgICAgICAgICAgICBjID0gJyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjID0gU3RyaW5nKGkpO1xuICAgICAgICAgICAgICBpZiAocGFkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5lZWQgPSB3aWR0aCAtIGMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChuZWVkID4gMCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHogPSBuZXcgQXJyYXkobmVlZCArIDEpLmpvaW4oJzAnKTtcbiAgICAgICAgICAgICAgICAgIGlmIChpIDwgMClcbiAgICAgICAgICAgICAgICAgICAgYyA9ICctJyArIHogKyBjLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjID0geiArIGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBOLnB1c2goYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE4gPSBbXTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgTi5wdXNoLmFwcGx5KE4sIGV4cGFuZCQxKG5bal0sIGZhbHNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBOLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBwb3N0Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICB2YXIgZXhwYW5zaW9uID0gcHJlICsgTltqXSArIHBvc3Rba107XG4gICAgICAgICAgICBpZiAoIWlzVG9wIHx8IGlzU2VxdWVuY2UgfHwgZXhwYW5zaW9uKVxuICAgICAgICAgICAgICBleHBhbnNpb25zLnB1c2goZXhwYW5zaW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4cGFuc2lvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgbWluaW1hdGNoJDEgPSBtaW5pbWF0Y2hfMSA9IChwLCBwYXR0ZXJuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgIGFzc2VydFZhbGlkUGF0dGVybihwYXR0ZXJuKTtcblxuICAgICAgLy8gc2hvcnRjdXQ6IGNvbW1lbnRzIG1hdGNoIG5vdGhpbmcuXG4gICAgICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgTWluaW1hdGNoJDEocGF0dGVybiwgb3B0aW9ucykubWF0Y2gocClcbiAgICB9O1xuXG4gICAgdmFyIG1pbmltYXRjaF8xID0gbWluaW1hdGNoJDE7XG5cbiAgICBjb25zdCBwYXRoJDEgPSBwYXRoJDI7XG4gICAgbWluaW1hdGNoJDEuc2VwID0gcGF0aCQxLnNlcDtcblxuICAgIGNvbnN0IEdMT0JTVEFSID0gU3ltYm9sKCdnbG9ic3RhciAqKicpO1xuICAgIG1pbmltYXRjaCQxLkdMT0JTVEFSID0gR0xPQlNUQVI7XG4gICAgY29uc3QgZXhwYW5kID0gYnJhY2VFeHBhbnNpb247XG5cbiAgICBjb25zdCBwbFR5cGVzID0ge1xuICAgICAgJyEnOiB7IG9wZW46ICcoPzooPyEoPzonLCBjbG9zZTogJykpW14vXSo/KSd9LFxuICAgICAgJz8nOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyk/JyB9LFxuICAgICAgJysnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJykrJyB9LFxuICAgICAgJyonOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJykqJyB9LFxuICAgICAgJ0AnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyknIH1cbiAgICB9O1xuXG4gICAgLy8gYW55IHNpbmdsZSB0aGluZyBvdGhlciB0aGFuIC9cbiAgICAvLyBkb24ndCBuZWVkIHRvIGVzY2FwZSAvIHdoZW4gdXNpbmcgbmV3IFJlZ0V4cCgpXG4gICAgY29uc3QgcW1hcmsgPSAnW14vXSc7XG5cbiAgICAvLyAqID0+IGFueSBudW1iZXIgb2YgY2hhcmFjdGVyc1xuICAgIGNvbnN0IHN0YXIgPSBxbWFyayArICcqPyc7XG5cbiAgICAvLyAqKiB3aGVuIGRvdHMgYXJlIGFsbG93ZWQuICBBbnl0aGluZyBnb2VzLCBleGNlcHQgLi4gYW5kIC5cbiAgICAvLyBub3QgKF4gb3IgLyBmb2xsb3dlZCBieSBvbmUgb3IgdHdvIGRvdHMgZm9sbG93ZWQgYnkgJCBvciAvKSxcbiAgICAvLyBmb2xsb3dlZCBieSBhbnl0aGluZywgYW55IG51bWJlciBvZiB0aW1lcy5cbiAgICBjb25zdCB0d29TdGFyRG90ID0gJyg/Oig/ISg/OlxcXFxcXC98XikoPzpcXFxcLnsxLDJ9KSgkfFxcXFxcXC8pKS4pKj8nO1xuXG4gICAgLy8gbm90IGEgXiBvciAvIGZvbGxvd2VkIGJ5IGEgZG90LFxuICAgIC8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxuICAgIGNvbnN0IHR3b1N0YXJOb0RvdCA9ICcoPzooPyEoPzpcXFxcXFwvfF4pXFxcXC4pLikqPyc7XG5cbiAgICAvLyBcImFiY1wiIC0+IHsgYTp0cnVlLCBiOnRydWUsIGM6dHJ1ZSB9XG4gICAgY29uc3QgY2hhclNldCA9IHMgPT4gcy5zcGxpdCgnJykucmVkdWNlKChzZXQsIGMpID0+IHtcbiAgICAgIHNldFtjXSA9IHRydWU7XG4gICAgICByZXR1cm4gc2V0XG4gICAgfSwge30pO1xuXG4gICAgLy8gY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZXNjYXBlZCBpbiBSZWdFeHAuXG4gICAgY29uc3QgcmVTcGVjaWFscyA9IGNoYXJTZXQoJygpLip7fSs/W11eJFxcXFwhJyk7XG5cbiAgICAvLyBjaGFyYWN0ZXJzIHRoYXQgaW5kaWNhdGUgd2UgaGF2ZSB0byBhZGQgdGhlIHBhdHRlcm4gc3RhcnRcbiAgICBjb25zdCBhZGRQYXR0ZXJuU3RhcnRTZXQgPSBjaGFyU2V0KCdbLignKTtcblxuICAgIC8vIG5vcm1hbGl6ZXMgc2xhc2hlcy5cbiAgICBjb25zdCBzbGFzaFNwbGl0ID0gL1xcLysvO1xuXG4gICAgbWluaW1hdGNoJDEuZmlsdGVyID0gKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT5cbiAgICAgIChwLCBpLCBsaXN0KSA9PiBtaW5pbWF0Y2gkMShwLCBwYXR0ZXJuLCBvcHRpb25zKTtcblxuICAgIGNvbnN0IGV4dCA9IChhLCBiID0ge30pID0+IHtcbiAgICAgIGNvbnN0IHQgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGEpLmZvckVhY2goayA9PiB0W2tdID0gYVtrXSk7XG4gICAgICBPYmplY3Qua2V5cyhiKS5mb3JFYWNoKGsgPT4gdFtrXSA9IGJba10pO1xuICAgICAgcmV0dXJuIHRcbiAgICB9O1xuXG4gICAgbWluaW1hdGNoJDEuZGVmYXVsdHMgPSBkZWYgPT4ge1xuICAgICAgaWYgKCFkZWYgfHwgdHlwZW9mIGRlZiAhPT0gJ29iamVjdCcgfHwgIU9iamVjdC5rZXlzKGRlZikubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBtaW5pbWF0Y2gkMVxuICAgICAgfVxuXG4gICAgICBjb25zdCBvcmlnID0gbWluaW1hdGNoJDE7XG5cbiAgICAgIGNvbnN0IG0gPSAocCwgcGF0dGVybiwgb3B0aW9ucykgPT4gb3JpZyhwLCBwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICBtLk1pbmltYXRjaCA9IGNsYXNzIE1pbmltYXRjaCBleHRlbmRzIG9yaWcuTWluaW1hdGNoIHtcbiAgICAgICAgY29uc3RydWN0b3IgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICBzdXBlcihwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBtLk1pbmltYXRjaC5kZWZhdWx0cyA9IG9wdGlvbnMgPT4gb3JpZy5kZWZhdWx0cyhleHQoZGVmLCBvcHRpb25zKSkuTWluaW1hdGNoO1xuICAgICAgbS5maWx0ZXIgPSAocGF0dGVybiwgb3B0aW9ucykgPT4gb3JpZy5maWx0ZXIocGF0dGVybiwgZXh0KGRlZiwgb3B0aW9ucykpO1xuICAgICAgbS5kZWZhdWx0cyA9IG9wdGlvbnMgPT4gb3JpZy5kZWZhdWx0cyhleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICBtLm1ha2VSZSA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiBvcmlnLm1ha2VSZShwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICBtLmJyYWNlRXhwYW5kID0gKHBhdHRlcm4sIG9wdGlvbnMpID0+IG9yaWcuYnJhY2VFeHBhbmQocGF0dGVybiwgZXh0KGRlZiwgb3B0aW9ucykpO1xuICAgICAgbS5tYXRjaCA9IChsaXN0LCBwYXR0ZXJuLCBvcHRpb25zKSA9PiBvcmlnLm1hdGNoKGxpc3QsIHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKTtcblxuICAgICAgcmV0dXJuIG1cbiAgICB9O1xuXG5cblxuXG5cbiAgICAvLyBCcmFjZSBleHBhbnNpb246XG4gICAgLy8gYXtiLGN9ZCAtPiBhYmQgYWNkXG4gICAgLy8gYXtiLH1jIC0+IGFiYyBhY1xuICAgIC8vIGF7MC4uM31kIC0+IGEwZCBhMWQgYTJkIGEzZFxuICAgIC8vIGF7Yixje2QsZX1mfWcgLT4gYWJnIGFjZGZnIGFjZWZnXG4gICAgLy8gYXtiLGN9ZHtlLGZ9ZyAtPiBhYmRlZyBhY2RlZyBhYmRlZyBhYmRmZ1xuICAgIC8vXG4gICAgLy8gSW52YWxpZCBzZXRzIGFyZSBub3QgZXhwYW5kZWQuXG4gICAgLy8gYXsyLi59YiAtPiBhezIuLn1iXG4gICAgLy8gYXtifWMgLT4gYXtifWNcbiAgICBtaW5pbWF0Y2gkMS5icmFjZUV4cGFuZCA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiBicmFjZUV4cGFuZChwYXR0ZXJuLCBvcHRpb25zKTtcblxuICAgIGNvbnN0IGJyYWNlRXhwYW5kID0gKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgYXNzZXJ0VmFsaWRQYXR0ZXJuKHBhdHRlcm4pO1xuXG4gICAgICAvLyBUaGFua3MgdG8gWWV0aW5nIExpIDxodHRwczovL2dpdGh1Yi5jb20veWV0aW5nbGk+IGZvclxuICAgICAgLy8gaW1wcm92aW5nIHRoaXMgcmVnZXhwIHRvIGF2b2lkIGEgUmVET1MgdnVsbmVyYWJpbGl0eS5cbiAgICAgIGlmIChvcHRpb25zLm5vYnJhY2UgfHwgIS9cXHsoPzooPyFcXHspLikqXFx9Ly50ZXN0KHBhdHRlcm4pKSB7XG4gICAgICAgIC8vIHNob3J0Y3V0LiBubyBuZWVkIHRvIGV4cGFuZC5cbiAgICAgICAgcmV0dXJuIFtwYXR0ZXJuXVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXhwYW5kKHBhdHRlcm4pXG4gICAgfTtcblxuICAgIGNvbnN0IE1BWF9QQVRURVJOX0xFTkdUSCA9IDEwMjQgKiA2NDtcbiAgICBjb25zdCBhc3NlcnRWYWxpZFBhdHRlcm4gPSBwYXR0ZXJuID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXR0ZXJuJylcbiAgICAgIH1cblxuICAgICAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gTUFYX1BBVFRFUk5fTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdHRlcm4gaXMgdG9vIGxvbmcnKVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBwYXJzZSBhIGNvbXBvbmVudCBvZiB0aGUgZXhwYW5kZWQgc2V0LlxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIG5vIHBhdHRlcm4gbWF5IGNvbnRhaW4gXCIvXCIgaW4gaXRcbiAgICAvLyBzbyB3ZSdyZSBnb2luZyB0byByZXR1cm4gYSAyZCBhcnJheSwgd2hlcmUgZWFjaCBlbnRyeSBpcyB0aGUgZnVsbFxuICAgIC8vIHBhdHRlcm4sIHNwbGl0IG9uICcvJywgYW5kIHRoZW4gdHVybmVkIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgLy8gQSByZWdleHAgaXMgbWFkZSBhdCB0aGUgZW5kIHdoaWNoIGpvaW5zIGVhY2ggYXJyYXkgd2l0aCBhblxuICAgIC8vIGVzY2FwZWQgLywgYW5kIGFub3RoZXIgZnVsbCBvbmUgd2hpY2ggam9pbnMgZWFjaCByZWdleHAgd2l0aCB8LlxuICAgIC8vXG4gICAgLy8gRm9sbG93aW5nIHRoZSBsZWFkIG9mIEJhc2ggNC4xLCBub3RlIHRoYXQgXCIqKlwiIG9ubHkgaGFzIHNwZWNpYWwgbWVhbmluZ1xuICAgIC8vIHdoZW4gaXQgaXMgdGhlICpvbmx5KiB0aGluZyBpbiBhIHBhdGggcG9ydGlvbi4gIE90aGVyd2lzZSwgYW55IHNlcmllc1xuICAgIC8vIG9mICogaXMgZXF1aXZhbGVudCB0byBhIHNpbmdsZSAqLiAgR2xvYnN0YXIgYmVoYXZpb3IgaXMgZW5hYmxlZCBieVxuICAgIC8vIGRlZmF1bHQsIGFuZCBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyBvcHRpb25zLm5vZ2xvYnN0YXIuXG4gICAgY29uc3QgU1VCUEFSU0UgPSBTeW1ib2woJ3N1YnBhcnNlJyk7XG5cbiAgICBtaW5pbWF0Y2gkMS5tYWtlUmUgPSAocGF0dGVybiwgb3B0aW9ucykgPT5cbiAgICAgIG5ldyBNaW5pbWF0Y2gkMShwYXR0ZXJuLCBvcHRpb25zIHx8IHt9KS5tYWtlUmUoKTtcblxuICAgIG1pbmltYXRjaCQxLm1hdGNoID0gKGxpc3QsIHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgY29uc3QgbW0gPSBuZXcgTWluaW1hdGNoJDEocGF0dGVybiwgb3B0aW9ucyk7XG4gICAgICBsaXN0ID0gbGlzdC5maWx0ZXIoZiA9PiBtbS5tYXRjaChmKSk7XG4gICAgICBpZiAobW0ub3B0aW9ucy5ub251bGwgJiYgIWxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGxpc3QucHVzaChwYXR0ZXJuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0XG4gICAgfTtcblxuICAgIC8vIHJlcGxhY2Ugc3R1ZmYgbGlrZSBcXCogd2l0aCAqXG4gICAgY29uc3QgZ2xvYlVuZXNjYXBlID0gcyA9PiBzLnJlcGxhY2UoL1xcXFwoLikvZywgJyQxJyk7XG4gICAgY29uc3QgY2hhclVuZXNjYXBlID0gcyA9PiBzLnJlcGxhY2UoL1xcXFwoW14tXFxdXSkvZywgJyQxJyk7XG4gICAgY29uc3QgcmVnRXhwRXNjYXBlID0gcyA9PiBzLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG4gICAgY29uc3QgYnJhRXhwRXNjYXBlID0gcyA9PiBzLnJlcGxhY2UoL1tbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuXG4gICAgY2xhc3MgTWluaW1hdGNoJDEge1xuICAgICAgY29uc3RydWN0b3IgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0VmFsaWRQYXR0ZXJuKHBhdHRlcm4pO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc2V0ID0gW107XG4gICAgICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XG4gICAgICAgIHRoaXMud2luZG93c1BhdGhzTm9Fc2NhcGUgPSAhIW9wdGlvbnMud2luZG93c1BhdGhzTm9Fc2NhcGUgfHxcbiAgICAgICAgICBvcHRpb25zLmFsbG93V2luZG93c0VzY2FwZSA9PT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLndpbmRvd3NQYXRoc05vRXNjYXBlKSB7XG4gICAgICAgICAgdGhpcy5wYXR0ZXJuID0gdGhpcy5wYXR0ZXJuLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2V4cCA9IG51bGw7XG4gICAgICAgIHRoaXMubmVnYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tbWVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGFydGlhbCA9ICEhb3B0aW9ucy5wYXJ0aWFsO1xuXG4gICAgICAgIC8vIG1ha2UgdGhlIHNldCBvZiByZWdleHBzIGV0Yy5cbiAgICAgICAgdGhpcy5tYWtlKCk7XG4gICAgICB9XG5cbiAgICAgIGRlYnVnICgpIHt9XG5cbiAgICAgIG1ha2UgKCkge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIC8vIGVtcHR5IHBhdHRlcm5zIGFuZCBjb21tZW50cyBtYXRjaCBub3RoaW5nLlxuICAgICAgICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0aGlzLmNvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICghcGF0dGVybikge1xuICAgICAgICAgIHRoaXMuZW1wdHkgPSB0cnVlO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RlcCAxOiBmaWd1cmUgb3V0IG5lZ2F0aW9uLCBldGMuXG4gICAgICAgIHRoaXMucGFyc2VOZWdhdGUoKTtcblxuICAgICAgICAvLyBzdGVwIDI6IGV4cGFuZCBicmFjZXNcbiAgICAgICAgbGV0IHNldCA9IHRoaXMuZ2xvYlNldCA9IHRoaXMuYnJhY2VFeHBhbmQoKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5kZWJ1ZykgdGhpcy5kZWJ1ZyA9ICguLi5hcmdzKSA9PiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuXG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpO1xuXG4gICAgICAgIC8vIHN0ZXAgMzogbm93IHdlIGhhdmUgYSBzZXQsIHNvIHR1cm4gZWFjaCBvbmUgaW50byBhIHNlcmllcyBvZiBwYXRoLXBvcnRpb25cbiAgICAgICAgLy8gbWF0Y2hpbmcgcGF0dGVybnMuXG4gICAgICAgIC8vIFRoZXNlIHdpbGwgYmUgcmVnZXhwcywgZXhjZXB0IGluIHRoZSBjYXNlIG9mIFwiKipcIiwgd2hpY2ggaXNcbiAgICAgICAgLy8gc2V0IHRvIHRoZSBHTE9CU1RBUiBvYmplY3QgZm9yIGdsb2JzdGFyIGJlaGF2aW9yLFxuICAgICAgICAvLyBhbmQgd2lsbCBub3QgY29udGFpbiBhbnkgLyBjaGFyYWN0ZXJzXG4gICAgICAgIHNldCA9IHRoaXMuZ2xvYlBhcnRzID0gc2V0Lm1hcChzID0+IHMuc3BsaXQoc2xhc2hTcGxpdCkpO1xuXG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpO1xuXG4gICAgICAgIC8vIGdsb2IgLS0+IHJlZ2V4cHNcbiAgICAgICAgc2V0ID0gc2V0Lm1hcCgocywgc2ksIHNldCkgPT4gcy5tYXAodGhpcy5wYXJzZSwgdGhpcykpO1xuXG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpO1xuXG4gICAgICAgIC8vIGZpbHRlciBvdXQgZXZlcnl0aGluZyB0aGF0IGRpZG4ndCBjb21waWxlIHByb3Blcmx5LlxuICAgICAgICBzZXQgPSBzZXQuZmlsdGVyKHMgPT4gcy5pbmRleE9mKGZhbHNlKSA9PT0gLTEpO1xuXG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpO1xuXG4gICAgICAgIHRoaXMuc2V0ID0gc2V0O1xuICAgICAgfVxuXG4gICAgICBwYXJzZU5lZ2F0ZSAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9uZWdhdGUpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm47XG4gICAgICAgIGxldCBuZWdhdGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IG5lZ2F0ZU9mZnNldCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuLmxlbmd0aCAmJiBwYXR0ZXJuLmNoYXJBdChpKSA9PT0gJyEnOyBpKyspIHtcbiAgICAgICAgICBuZWdhdGUgPSAhbmVnYXRlO1xuICAgICAgICAgIG5lZ2F0ZU9mZnNldCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5lZ2F0ZU9mZnNldCkgdGhpcy5wYXR0ZXJuID0gcGF0dGVybi5zbGljZShuZWdhdGVPZmZzZXQpO1xuICAgICAgICB0aGlzLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHBhcnRpYWwgdG8gdHJ1ZSB0byB0ZXN0IGlmLCBmb3IgZXhhbXBsZSxcbiAgICAgIC8vIFwiL2EvYlwiIG1hdGNoZXMgdGhlIHN0YXJ0IG9mIFwiLyovYi8qL2RcIlxuICAgICAgLy8gUGFydGlhbCBtZWFucywgaWYgeW91IHJ1biBvdXQgb2YgZmlsZSBiZWZvcmUgeW91IHJ1blxuICAgICAgLy8gb3V0IG9mIHBhdHRlcm4sIHRoZW4gdGhhdCdzIGZpbmUsIGFzIGxvbmcgYXMgYWxsXG4gICAgICAvLyB0aGUgcGFydHMgbWF0Y2guXG4gICAgICBtYXRjaE9uZSAoZmlsZSwgcGF0dGVybiwgcGFydGlhbCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsXG4gICAgICAgICAgeyAndGhpcyc6IHRoaXMsIGZpbGU6IGZpbGUsIHBhdHRlcm46IHBhdHRlcm4gfSk7XG5cbiAgICAgICAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLCBmaWxlLmxlbmd0aCwgcGF0dGVybi5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAodmFyIGZpID0gMCxcbiAgICAgICAgICAgIHBpID0gMCxcbiAgICAgICAgICAgIGZsID0gZmlsZS5sZW5ndGgsXG4gICAgICAgICAgICBwbCA9IHBhdHRlcm4ubGVuZ3RoXG4gICAgICAgICAgICA7IChmaSA8IGZsKSAmJiAocGkgPCBwbClcbiAgICAgICAgICAgIDsgZmkrKywgcGkrKykge1xuICAgICAgICAgIHRoaXMuZGVidWcoJ21hdGNoT25lIGxvb3AnKTtcbiAgICAgICAgICB2YXIgcCA9IHBhdHRlcm5bcGldO1xuICAgICAgICAgIHZhciBmID0gZmlsZVtmaV07XG5cbiAgICAgICAgICB0aGlzLmRlYnVnKHBhdHRlcm4sIHAsIGYpO1xuXG4gICAgICAgICAgLy8gc2hvdWxkIGJlIGltcG9zc2libGUuXG4gICAgICAgICAgLy8gc29tZSBpbnZhbGlkIHJlZ2V4cCBzdHVmZiBpbiB0aGUgc2V0LlxuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChwID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgICBpZiAocCA9PT0gR0xPQlNUQVIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcoJ0dMT0JTVEFSJywgW3BhdHRlcm4sIHAsIGZdKTtcblxuICAgICAgICAgICAgLy8gXCIqKlwiXG4gICAgICAgICAgICAvLyBhLyoqL2IvKiovYyB3b3VsZCBtYXRjaCB0aGUgZm9sbG93aW5nOlxuICAgICAgICAgICAgLy8gYS9iL3gveS96L2NcbiAgICAgICAgICAgIC8vIGEveC95L3ovYi9jXG4gICAgICAgICAgICAvLyBhL2IveC9iL3gvY1xuICAgICAgICAgICAgLy8gYS9iL2NcbiAgICAgICAgICAgIC8vIFRvIGRvIHRoaXMsIHRha2UgdGhlIHJlc3Qgb2YgdGhlIHBhdHRlcm4gYWZ0ZXJcbiAgICAgICAgICAgIC8vIHRoZSAqKiwgYW5kIHNlZSBpZiBpdCB3b3VsZCBtYXRjaCB0aGUgZmlsZSByZW1haW5kZXIuXG4gICAgICAgICAgICAvLyBJZiBzbywgcmV0dXJuIHN1Y2Nlc3MuXG4gICAgICAgICAgICAvLyBJZiBub3QsIHRoZSAqKiBcInN3YWxsb3dzXCIgYSBzZWdtZW50LCBhbmQgdHJ5IGFnYWluLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyByZWN1cnNpdmVseSBhd2Z1bC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBhLyoqL2IvKiovYyBtYXRjaGluZyBhL2IveC95L3ovY1xuICAgICAgICAgICAgLy8gLSBhIG1hdGNoZXMgYVxuICAgICAgICAgICAgLy8gLSBkb3VibGVzdGFyXG4gICAgICAgICAgICAvLyAgIC0gbWF0Y2hPbmUoYi94L3kvei9jLCBiLyoqL2MpXG4gICAgICAgICAgICAvLyAgICAgLSBiIG1hdGNoZXMgYlxuICAgICAgICAgICAgLy8gICAgIC0gZG91Ymxlc3RhclxuICAgICAgICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh4L3kvei9jLCBjKSAtPiBub1xuICAgICAgICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh5L3ovYywgYykgLT4gbm9cbiAgICAgICAgICAgIC8vICAgICAgIC0gbWF0Y2hPbmUoei9jLCBjKSAtPiBub1xuICAgICAgICAgICAgLy8gICAgICAgLSBtYXRjaE9uZShjLCBjKSB5ZXMsIGhpdFxuICAgICAgICAgICAgdmFyIGZyID0gZmk7XG4gICAgICAgICAgICB2YXIgcHIgPSBwaSArIDE7XG4gICAgICAgICAgICBpZiAocHIgPT09IHBsKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGVidWcoJyoqIGF0IHRoZSBlbmQnKTtcbiAgICAgICAgICAgICAgLy8gYSAqKiBhdCB0aGUgZW5kIHdpbGwganVzdCBzd2FsbG93IHRoZSByZXN0LlxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbWF0Y2guXG4gICAgICAgICAgICAgIC8vIGhvd2V2ZXIsIGl0IHdpbGwgbm90IHN3YWxsb3cgLy54LCB1bmxlc3NcbiAgICAgICAgICAgICAgLy8gb3B0aW9ucy5kb3QgaXMgc2V0LlxuICAgICAgICAgICAgICAvLyAuIGFuZCAuLiBhcmUgKm5ldmVyKiBtYXRjaGVkIGJ5ICoqLCBmb3IgZXhwbG9zaXZlbHlcbiAgICAgICAgICAgICAgLy8gZXhwb25lbnRpYWwgcmVhc29ucy5cbiAgICAgICAgICAgICAgZm9yICg7IGZpIDwgZmw7IGZpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZVtmaV0gPT09ICcuJyB8fCBmaWxlW2ZpXSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBmaWxlW2ZpXS5jaGFyQXQoMCkgPT09ICcuJykpIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9rLCBsZXQncyBzZWUgaWYgd2UgY2FuIHN3YWxsb3cgd2hhdGV2ZXIgd2UgY2FuLlxuICAgICAgICAgICAgd2hpbGUgKGZyIDwgZmwpIHtcbiAgICAgICAgICAgICAgdmFyIHN3YWxsb3dlZSA9IGZpbGVbZnJdO1xuXG4gICAgICAgICAgICAgIHRoaXMuZGVidWcoJ1xcbmdsb2JzdGFyIHdoaWxlJywgZmlsZSwgZnIsIHBhdHRlcm4sIHByLCBzd2FsbG93ZWUpO1xuXG4gICAgICAgICAgICAgIC8vIFhYWCByZW1vdmUgdGhpcyBzbGljZS4gIEp1c3QgcGFzcyB0aGUgc3RhcnQgaW5kZXguXG4gICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoT25lKGZpbGUuc2xpY2UoZnIpLCBwYXR0ZXJuLnNsaWNlKHByKSwgcGFydGlhbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdnbG9ic3RhciBmb3VuZCBtYXRjaCEnLCBmciwgZmwsIHN3YWxsb3dlZSk7XG4gICAgICAgICAgICAgICAgLy8gZm91bmQgYSBtYXRjaC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNhbid0IHN3YWxsb3cgXCIuXCIgb3IgXCIuLlwiIGV2ZXIuXG4gICAgICAgICAgICAgICAgLy8gY2FuIG9ubHkgc3dhbGxvdyBcIi5mb29cIiB3aGVuIGV4cGxpY2l0bHkgYXNrZWQuXG4gICAgICAgICAgICAgICAgaWYgKHN3YWxsb3dlZSA9PT0gJy4nIHx8IHN3YWxsb3dlZSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBzd2FsbG93ZWUuY2hhckF0KDApID09PSAnLicpKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdkb3QgZGV0ZWN0ZWQhJywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gKiogc3dhbGxvd3MgYSBzZWdtZW50LCBhbmQgY29udGludWUuXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnZ2xvYnN0YXIgc3dhbGxvdyBhIHNlZ21lbnQsIGFuZCBjb250aW51ZScpO1xuICAgICAgICAgICAgICAgIGZyKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gbWF0Y2ggd2FzIGZvdW5kLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgaW4gcGFydGlhbCBtb2RlLCB3ZSBjYW4ndCBzYXkgdGhpcyBpcyBuZWNlc3NhcmlseSBvdmVyLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBtb3JlICpwYXR0ZXJuKiBsZWZ0LCB0aGVuXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmIChwYXJ0aWFsKSB7XG4gICAgICAgICAgICAgIC8vIHJhbiBvdXQgb2YgZmlsZVxuICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdcXG4+Pj4gbm8gbWF0Y2gsIHBhcnRpYWw/JywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKTtcbiAgICAgICAgICAgICAgaWYgKGZyID09PSBmbCkgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNvbWV0aGluZyBvdGhlciB0aGFuICoqXG4gICAgICAgICAgLy8gbm9uLW1hZ2ljIHBhdHRlcm5zIGp1c3QgaGF2ZSB0byBtYXRjaCBleGFjdGx5XG4gICAgICAgICAgLy8gcGF0dGVybnMgd2l0aCBtYWdpYyBoYXZlIGJlZW4gdHVybmVkIGludG8gcmVnZXhwcy5cbiAgICAgICAgICB2YXIgaGl0O1xuICAgICAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGhpdCA9IGYgPT09IHA7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKCdzdHJpbmcgbWF0Y2gnLCBwLCBmLCBoaXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXQgPSBmLm1hdGNoKHApO1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZygncGF0dGVybiBtYXRjaCcsIHAsIGYsIGhpdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFoaXQpIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90ZTogZW5kaW5nIGluIC8gbWVhbnMgdGhhdCB3ZSdsbCBnZXQgYSBmaW5hbCBcIlwiXG4gICAgICAgIC8vIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4uICBUaGlzIGNhbiBvbmx5IG1hdGNoIGFcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBcIlwiIGF0IHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gICAgICAgIC8vIElmIHRoZSBmaWxlIGVuZHMgaW4gLywgdGhlbiBpdCBjYW4gb25seSBtYXRjaCBhXG4gICAgICAgIC8vIGEgcGF0dGVybiB0aGF0IGVuZHMgaW4gLywgdW5sZXNzIHRoZSBwYXR0ZXJuIGp1c3RcbiAgICAgICAgLy8gZG9lc24ndCBoYXZlIGFueSBtb3JlIGZvciBpdC4gQnV0LCBhL2IvIHNob3VsZCAqbm90KlxuICAgICAgICAvLyBtYXRjaCBcImEvYi8qXCIsIGV2ZW4gdGhvdWdoIFwiXCIgbWF0Y2hlcyBhZ2FpbnN0IHRoZVxuICAgICAgICAvLyBbXi9dKj8gcGF0dGVybiwgZXhjZXB0IGluIHBhcnRpYWwgbW9kZSwgd2hlcmUgaXQgbWlnaHRcbiAgICAgICAgLy8gc2ltcGx5IG5vdCBiZSByZWFjaGVkIHlldC5cbiAgICAgICAgLy8gSG93ZXZlciwgYS9iLyBzaG91bGQgc3RpbGwgc2F0aXNmeSBhLypcblxuICAgICAgICAvLyBub3cgZWl0aGVyIHdlIGZlbGwgb2ZmIHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4sIG9yIHdlJ3JlIGRvbmUuXG4gICAgICAgIGlmIChmaSA9PT0gZmwgJiYgcGkgPT09IHBsKSB7XG4gICAgICAgICAgLy8gcmFuIG91dCBvZiBwYXR0ZXJuIGFuZCBmaWxlbmFtZSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgICAgIC8vIGFuIGV4YWN0IGhpdCFcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGZpID09PSBmbCkge1xuICAgICAgICAgIC8vIHJhbiBvdXQgb2YgZmlsZSwgYnV0IHN0aWxsIGhhZCBwYXR0ZXJuIGxlZnQuXG4gICAgICAgICAgLy8gdGhpcyBpcyBvayBpZiB3ZSdyZSBkb2luZyB0aGUgbWF0Y2ggYXMgcGFydCBvZlxuICAgICAgICAgIC8vIGEgZ2xvYiBmcyB0cmF2ZXJzYWwuXG4gICAgICAgICAgcmV0dXJuIHBhcnRpYWxcbiAgICAgICAgfSBlbHNlIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIGlmIChwaSA9PT0gcGwpIHtcbiAgICAgICAgICAvLyByYW4gb3V0IG9mIHBhdHRlcm4sIHN0aWxsIGhhdmUgZmlsZSBsZWZ0LlxuICAgICAgICAgIC8vIHRoaXMgaXMgb25seSBhY2NlcHRhYmxlIGlmIHdlJ3JlIG9uIHRoZSB2ZXJ5IGxhc3RcbiAgICAgICAgICAvLyBlbXB0eSBzZWdtZW50IG9mIGEgZmlsZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2guXG4gICAgICAgICAgLy8gYS8qIHNob3VsZCBtYXRjaCBhL2IvXG4gICAgICAgICAgcmV0dXJuIChmaSA9PT0gZmwgLSAxKSAmJiAoZmlsZVtmaV0gPT09ICcnKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdWxkIGJlIHVucmVhY2hhYmxlLlxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3d0Zj8nKVxuICAgICAgfVxuXG4gICAgICBicmFjZUV4cGFuZCAoKSB7XG4gICAgICAgIHJldHVybiBicmFjZUV4cGFuZCh0aGlzLnBhdHRlcm4sIHRoaXMub3B0aW9ucylcbiAgICAgIH1cblxuICAgICAgcGFyc2UgKHBhdHRlcm4sIGlzU3ViKSB7XG4gICAgICAgIGFzc2VydFZhbGlkUGF0dGVybihwYXR0ZXJuKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIC8vIHNob3J0Y3V0c1xuICAgICAgICBpZiAocGF0dGVybiA9PT0gJyoqJykge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5ub2dsb2JzdGFyKVxuICAgICAgICAgICAgcmV0dXJuIEdMT0JTVEFSXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGF0dGVybiA9ICcqJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0dGVybiA9PT0gJycpIHJldHVybiAnJ1xuXG4gICAgICAgIGxldCByZSA9ICcnO1xuICAgICAgICBsZXQgaGFzTWFnaWMgPSBmYWxzZTtcbiAgICAgICAgbGV0IGVzY2FwaW5nID0gZmFsc2U7XG4gICAgICAgIC8vID8gPT4gb25lIHNpbmdsZSBjaGFyYWN0ZXJcbiAgICAgICAgY29uc3QgcGF0dGVybkxpc3RTdGFjayA9IFtdO1xuICAgICAgICBjb25zdCBuZWdhdGl2ZUxpc3RzID0gW107XG4gICAgICAgIGxldCBzdGF0ZUNoYXI7XG4gICAgICAgIGxldCBpbkNsYXNzID0gZmFsc2U7XG4gICAgICAgIGxldCByZUNsYXNzU3RhcnQgPSAtMTtcbiAgICAgICAgbGV0IGNsYXNzU3RhcnQgPSAtMTtcbiAgICAgICAgbGV0IGNzO1xuICAgICAgICBsZXQgcGw7XG4gICAgICAgIGxldCBzcDtcbiAgICAgICAgLy8gLiBhbmQgLi4gbmV2ZXIgbWF0Y2ggYW55dGhpbmcgdGhhdCBkb2Vzbid0IHN0YXJ0IHdpdGggLixcbiAgICAgICAgLy8gZXZlbiB3aGVuIG9wdGlvbnMuZG90IGlzIHNldC4gIEhvd2V2ZXIsIGlmIHRoZSBwYXR0ZXJuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIC4sIHRoZW4gdHJhdmVyc2FsIHBhdHRlcm5zIGNhbiBtYXRjaC5cbiAgICAgICAgbGV0IGRvdFRyYXZBbGxvd2VkID0gcGF0dGVybi5jaGFyQXQoMCkgPT09ICcuJztcbiAgICAgICAgbGV0IGRvdEZpbGVBbGxvd2VkID0gb3B0aW9ucy5kb3QgfHwgZG90VHJhdkFsbG93ZWQ7XG4gICAgICAgIGNvbnN0IHBhdHRlcm5TdGFydCA9ICgpID0+XG4gICAgICAgICAgZG90VHJhdkFsbG93ZWRcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogZG90RmlsZUFsbG93ZWRcbiAgICAgICAgICAgID8gJyg/ISg/Ol58XFxcXC8pXFxcXC57MSwyfSg/OiR8XFxcXC8pKSdcbiAgICAgICAgICAgIDogJyg/IVxcXFwuKSc7XG4gICAgICAgIGNvbnN0IHN1YlBhdHRlcm5TdGFydCA9IChwKSA9PlxuICAgICAgICAgIHAuY2hhckF0KDApID09PSAnLidcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogb3B0aW9ucy5kb3RcbiAgICAgICAgICAgID8gJyg/ISg/Ol58XFxcXC8pXFxcXC57MSwyfSg/OiR8XFxcXC8pKSdcbiAgICAgICAgICAgIDogJyg/IVxcXFwuKSc7XG5cblxuICAgICAgICBjb25zdCBjbGVhclN0YXRlQ2hhciA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoc3RhdGVDaGFyKSB7XG4gICAgICAgICAgICAvLyB3ZSBoYWQgc29tZSBzdGF0ZS10cmFja2luZyBjaGFyYWN0ZXJcbiAgICAgICAgICAgIC8vIHRoYXQgd2Fzbid0IGNvbnN1bWVkIGJ5IHRoaXMgcGFzcy5cbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdGVDaGFyKSB7XG4gICAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgICAgIHJlICs9IHN0YXI7XG4gICAgICAgICAgICAgICAgaGFzTWFnaWMgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgICAgICByZSArPSBxbWFyaztcbiAgICAgICAgICAgICAgICBoYXNNYWdpYyA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmUgKz0gJ1xcXFwnICsgc3RhdGVDaGFyO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWJ1ZygnY2xlYXJTdGF0ZUNoYXIgJWogJWonLCBzdGF0ZUNoYXIsIHJlKTtcbiAgICAgICAgICAgIHN0YXRlQ2hhciA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgYzsgKGkgPCBwYXR0ZXJuLmxlbmd0aCkgJiYgKGMgPSBwYXR0ZXJuLmNoYXJBdChpKSk7IGkrKykge1xuICAgICAgICAgIHRoaXMuZGVidWcoJyVzXFx0JXMgJXMgJWonLCBwYXR0ZXJuLCBpLCByZSwgYyk7XG5cbiAgICAgICAgICAvLyBza2lwIG92ZXIgYW55IHRoYXQgYXJlIGVzY2FwZWQuXG4gICAgICAgICAgaWYgKGVzY2FwaW5nKSB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIGNvbXBsZXRlbHkgbm90IGFsbG93ZWQsIGV2ZW4gZXNjYXBlZC4gKi9cbiAgICAgICAgICAgIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZVNwZWNpYWxzW2NdKSB7XG4gICAgICAgICAgICAgIHJlICs9ICdcXFxcJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlICs9IGM7XG4gICAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICBjYXNlICcvJzoge1xuICAgICAgICAgICAgICAvLyBTaG91bGQgYWxyZWFkeSBiZSBwYXRoLXNwbGl0IGJ5IG5vdy5cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ1xcXFwnOlxuICAgICAgICAgICAgICBpZiAoaW5DbGFzcyAmJiBwYXR0ZXJuLmNoYXJBdChpICsgMSkgPT09ICctJykge1xuICAgICAgICAgICAgICAgIHJlICs9IGM7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNsZWFyU3RhdGVDaGFyKCk7XG4gICAgICAgICAgICAgIGVzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIC8vIHRoZSB2YXJpb3VzIHN0YXRlQ2hhciB2YWx1ZXNcbiAgICAgICAgICAgIC8vIGZvciB0aGUgXCJleHRnbG9iXCIgc3R1ZmYuXG4gICAgICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgICB0aGlzLmRlYnVnKCclc1xcdCVzICVzICVqIDwtLSBzdGF0ZUNoYXInLCBwYXR0ZXJuLCBpLCByZSwgYyk7XG5cbiAgICAgICAgICAgICAgLy8gYWxsIG9mIHRob3NlIGFyZSBsaXRlcmFscyBpbnNpZGUgYSBjbGFzcywgZXhjZXB0IHRoYXRcbiAgICAgICAgICAgICAgLy8gdGhlIGdsb2IgWyFhXSBtZWFucyBbXmFdIGluIHJlZ2V4cFxuICAgICAgICAgICAgICBpZiAoaW5DbGFzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJyAgaW4gY2xhc3MnKTtcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJyEnICYmIGkgPT09IGNsYXNzU3RhcnQgKyAxKSBjID0gJ14nO1xuICAgICAgICAgICAgICAgIHJlICs9IGM7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHN0YXRlQ2hhciwgdGhlbiBpdCBtZWFuc1xuICAgICAgICAgICAgICAvLyB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgbGlrZSAqKiBvciArPyBpbiB0aGVyZS5cbiAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBzdGF0ZUNoYXIsIHRoZW4gcHJvY2VlZCB3aXRoIHRoaXMgb25lLlxuICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdjYWxsIGNsZWFyU3RhdGVDaGFyICVqJywgc3RhdGVDaGFyKTtcbiAgICAgICAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKTtcbiAgICAgICAgICAgICAgc3RhdGVDaGFyID0gYztcbiAgICAgICAgICAgICAgLy8gaWYgZXh0Z2xvYiBpcyBkaXNhYmxlZCwgdGhlbiArKGFzZGZ8Zm9vKSBpc24ndCBhIHRoaW5nLlxuICAgICAgICAgICAgICAvLyBqdXN0IGNsZWFyIHRoZSBzdGF0ZWNoYXIgKm5vdyosIHJhdGhlciB0aGFuIGV2ZW4gZGl2aW5nIGludG9cbiAgICAgICAgICAgICAgLy8gdGhlIHBhdHRlcm5MaXN0IHN0dWZmLlxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ub2V4dCkgY2xlYXJTdGF0ZUNoYXIoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIGNhc2UgJygnOiB7XG4gICAgICAgICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgICAgICAgcmUgKz0gJygnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXN0YXRlQ2hhcikge1xuICAgICAgICAgICAgICAgIHJlICs9ICdcXFxcKCc7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IHBsRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogc3RhdGVDaGFyLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBpIC0gMSxcbiAgICAgICAgICAgICAgICByZVN0YXJ0OiByZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3BlbjogcGxUeXBlc1tzdGF0ZUNoYXJdLm9wZW4sXG4gICAgICAgICAgICAgICAgY2xvc2U6IHBsVHlwZXNbc3RhdGVDaGFyXS5jbG9zZSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sICdcXHQnLCBwbEVudHJ5KTtcbiAgICAgICAgICAgICAgcGF0dGVybkxpc3RTdGFjay5wdXNoKHBsRW50cnkpO1xuICAgICAgICAgICAgICAvLyBuZWdhdGlvbiBpcyAoPzooPyEoPzpqcykoPzo8cmVzdD4pKVteL10qKVxuICAgICAgICAgICAgICByZSArPSBwbEVudHJ5Lm9wZW47XG4gICAgICAgICAgICAgIC8vIG5leHQgZW50cnkgc3RhcnRzIHdpdGggYSBkb3QgbWF5YmU/XG4gICAgICAgICAgICAgIGlmIChwbEVudHJ5LnN0YXJ0ID09PSAwICYmIHBsRW50cnkudHlwZSAhPT0gJyEnKSB7XG4gICAgICAgICAgICAgICAgZG90VHJhdkFsbG93ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlICs9IHN1YlBhdHRlcm5TdGFydChwYXR0ZXJuLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygncGxUeXBlICVqICVqJywgc3RhdGVDaGFyLCByZSk7XG4gICAgICAgICAgICAgIHN0YXRlQ2hhciA9IGZhbHNlO1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICcpJzoge1xuICAgICAgICAgICAgICBjb25zdCBwbEVudHJ5ID0gcGF0dGVybkxpc3RTdGFja1twYXR0ZXJuTGlzdFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBpZiAoaW5DbGFzcyB8fCAhcGxFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJlICs9ICdcXFxcKSc7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXR0ZXJuTGlzdFN0YWNrLnBvcCgpO1xuXG4gICAgICAgICAgICAgIC8vIGNsb3NpbmcgYW4gZXh0Z2xvYlxuICAgICAgICAgICAgICBjbGVhclN0YXRlQ2hhcigpO1xuICAgICAgICAgICAgICBoYXNNYWdpYyA9IHRydWU7XG4gICAgICAgICAgICAgIHBsID0gcGxFbnRyeTtcbiAgICAgICAgICAgICAgLy8gbmVnYXRpb24gaXMgKD86KD8hanMpW14vXSopXG4gICAgICAgICAgICAgIC8vIFRoZSBvdGhlcnMgYXJlICg/OjxwYXR0ZXJuPik8dHlwZT5cbiAgICAgICAgICAgICAgcmUgKz0gcGwuY2xvc2U7XG4gICAgICAgICAgICAgIGlmIChwbC50eXBlID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICBuZWdhdGl2ZUxpc3RzLnB1c2goT2JqZWN0LmFzc2lnbihwbCwgeyByZUVuZDogcmUubGVuZ3RoIH0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICd8Jzoge1xuICAgICAgICAgICAgICBjb25zdCBwbEVudHJ5ID0gcGF0dGVybkxpc3RTdGFja1twYXR0ZXJuTGlzdFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBpZiAoaW5DbGFzcyB8fCAhcGxFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJlICs9ICdcXFxcfCc7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNsZWFyU3RhdGVDaGFyKCk7XG4gICAgICAgICAgICAgIHJlICs9ICd8JztcbiAgICAgICAgICAgICAgLy8gbmV4dCBzdWJwYXR0ZXJuIGNhbiBzdGFydCB3aXRoIGEgZG90P1xuICAgICAgICAgICAgICBpZiAocGxFbnRyeS5zdGFydCA9PT0gMCAmJiBwbEVudHJ5LnR5cGUgIT09ICchJykge1xuICAgICAgICAgICAgICAgIGRvdFRyYXZBbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZSArPSBzdWJQYXR0ZXJuU3RhcnQocGF0dGVybi5zbGljZShpICsgMSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRoZXNlIGFyZSBtb3N0bHkgdGhlIHNhbWUgaW4gcmVnZXhwIGFuZCBnbG9iXG4gICAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgICAgLy8gc3dhbGxvdyBhbnkgc3RhdGUtdHJhY2tpbmcgY2hhciBiZWZvcmUgdGhlIFtcbiAgICAgICAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKTtcblxuICAgICAgICAgICAgICBpZiAoaW5DbGFzcykge1xuICAgICAgICAgICAgICAgIHJlICs9ICdcXFxcJyArIGM7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGluQ2xhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICBjbGFzc1N0YXJ0ID0gaTtcbiAgICAgICAgICAgICAgcmVDbGFzc1N0YXJ0ID0gcmUubGVuZ3RoO1xuICAgICAgICAgICAgICByZSArPSBjO1xuICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICAgIC8vICBhIHJpZ2h0IGJyYWNrZXQgc2hhbGwgbG9zZSBpdHMgc3BlY2lhbFxuICAgICAgICAgICAgICAvLyAgbWVhbmluZyBhbmQgcmVwcmVzZW50IGl0c2VsZiBpblxuICAgICAgICAgICAgICAvLyAgYSBicmFja2V0IGV4cHJlc3Npb24gaWYgaXQgb2NjdXJzXG4gICAgICAgICAgICAgIC8vICBmaXJzdCBpbiB0aGUgbGlzdC4gIC0tIFBPU0lYLjIgMi44LjMuMlxuICAgICAgICAgICAgICBpZiAoaSA9PT0gY2xhc3NTdGFydCArIDEgfHwgIWluQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICByZSArPSAnXFxcXCcgKyBjO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBzcGxpdCB3aGVyZSB0aGUgbGFzdCBbIHdhcywgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAgICAgLy8gYW4gaW52YWxpZCByZS4gaWYgc28sIHJlLXdhbGsgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICAgICAgICAgICAgICAvLyB3b3VsZC1iZSBjbGFzcyB0byByZS10cmFuc2xhdGUgYW55IGNoYXJhY3RlcnMgdGhhdFxuICAgICAgICAgICAgICAvLyB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzXG4gICAgICAgICAgICAgIC8vIFRPRE86IEl0IHdvdWxkIHByb2JhYmx5IGJlIGZhc3RlciB0byBkZXRlcm1pbmUgdGhpc1xuICAgICAgICAgICAgICAvLyB3aXRob3V0IGEgdHJ5L2NhdGNoIGFuZCBhIG5ldyBSZWdFeHAsIGJ1dCBpdCdzIHRyaWNreVxuICAgICAgICAgICAgICAvLyB0byBkbyBzYWZlbHkuICBGb3Igbm93LCB0aGlzIGlzIHNhZmUgYW5kIHdvcmtzLlxuICAgICAgICAgICAgICBjcyA9IHBhdHRlcm4uc3Vic3RyaW5nKGNsYXNzU3RhcnQgKyAxLCBpKTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBSZWdFeHAoJ1snICsgYnJhRXhwRXNjYXBlKGNoYXJVbmVzY2FwZShjcykpICsgJ10nKTtcbiAgICAgICAgICAgICAgICAvLyBsb29rcyBnb29kLCBmaW5pc2ggdXAgdGhlIGNsYXNzLlxuICAgICAgICAgICAgICAgIHJlICs9IGM7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gb3V0IG9mIG9yZGVyIHJhbmdlcyBpbiBKUyBhcmUgZXJyb3JzLCBidXQgaW4gZ2xvYiBzeW50YXgsXG4gICAgICAgICAgICAgICAgLy8gdGhleSdyZSBqdXN0IGEgcmFuZ2UgdGhhdCBtYXRjaGVzIG5vdGhpbmcuXG4gICAgICAgICAgICAgICAgcmUgPSByZS5zdWJzdHJpbmcoMCwgcmVDbGFzc1N0YXJ0KSArICcoPzokLiknOyAvLyBtYXRjaCBub3RoaW5nIGV2ZXJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoYXNNYWdpYyA9IHRydWU7XG4gICAgICAgICAgICAgIGluQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIC8vIHN3YWxsb3cgYW55IHN0YXRlIGNoYXIgdGhhdCB3YXNuJ3QgY29uc3VtZWRcbiAgICAgICAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKTtcblxuICAgICAgICAgICAgICBpZiAocmVTcGVjaWFsc1tjXSAmJiAhKGMgPT09ICdeJyAmJiBpbkNsYXNzKSkge1xuICAgICAgICAgICAgICAgIHJlICs9ICdcXFxcJztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlICs9IGM7XG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICB9IC8vIHN3aXRjaFxuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBsZWZ0IGEgY2xhc3Mgb3Blbi5cbiAgICAgICAgLy8gXCJbYWJjXCIgaXMgdmFsaWQsIGVxdWl2YWxlbnQgdG8gXCJcXFthYmNcIlxuICAgICAgICBpZiAoaW5DbGFzcykge1xuICAgICAgICAgIC8vIHNwbGl0IHdoZXJlIHRoZSBsYXN0IFsgd2FzLCBhbmQgZXNjYXBlIGl0XG4gICAgICAgICAgLy8gdGhpcyBpcyBhIGh1Z2UgcGl0YS4gIFdlIG5vdyBoYXZlIHRvIHJlLXdhbGtcbiAgICAgICAgICAvLyB0aGUgY29udGVudHMgb2YgdGhlIHdvdWxkLWJlIGNsYXNzIHRvIHJlLXRyYW5zbGF0ZVxuICAgICAgICAgIC8vIGFueSBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBwYXNzZWQgdGhyb3VnaCBhcy1pc1xuICAgICAgICAgIGNzID0gcGF0dGVybi5zbGljZShjbGFzc1N0YXJ0ICsgMSk7XG4gICAgICAgICAgc3AgPSB0aGlzLnBhcnNlKGNzLCBTVUJQQVJTRSk7XG4gICAgICAgICAgcmUgPSByZS5zdWJzdHJpbmcoMCwgcmVDbGFzc1N0YXJ0KSArICdcXFxcWycgKyBzcFswXTtcbiAgICAgICAgICBoYXNNYWdpYyA9IGhhc01hZ2ljIHx8IHNwWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGhhZCBhICsoIHRoaW5nIGF0IHRoZSAqZW5kKlxuICAgICAgICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgICAgICAgLy8gZWFjaCBwYXR0ZXJuIGxpc3Qgc3RhY2sgYWRkcyAzIGNoYXJzLCBhbmQgd2UgbmVlZCB0byBnbyB0aHJvdWdoXG4gICAgICAgIC8vIGFuZCBlc2NhcGUgYW55IHwgY2hhcnMgdGhhdCB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzIGZvciB0aGUgcmVnZXhwLlxuICAgICAgICAvLyBHbyB0aHJvdWdoIGFuZCBlc2NhcGUgdGhlbSwgdGFraW5nIGNhcmUgbm90IHRvIGRvdWJsZS1lc2NhcGUgYW55XG4gICAgICAgIC8vIHwgY2hhcnMgdGhhdCB3ZXJlIGFscmVhZHkgZXNjYXBlZC5cbiAgICAgICAgZm9yIChwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCk7IHBsOyBwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCkpIHtcbiAgICAgICAgICBsZXQgdGFpbDtcbiAgICAgICAgICB0YWlsID0gcmUuc2xpY2UocGwucmVTdGFydCArIHBsLm9wZW4ubGVuZ3RoKTtcbiAgICAgICAgICB0aGlzLmRlYnVnKCdzZXR0aW5nIHRhaWwnLCByZSwgcGwpO1xuICAgICAgICAgIC8vIG1heWJlIHNvbWUgZXZlbiBudW1iZXIgb2YgXFwsIHRoZW4gbWF5YmUgMSBcXCwgZm9sbG93ZWQgYnkgYSB8XG4gICAgICAgICAgdGFpbCA9IHRhaWwucmVwbGFjZSgvKCg/OlxcXFx7Mn0pezAsNjR9KShcXFxcPylcXHwvZywgKF8sICQxLCAkMikgPT4ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLSBzaG91bGQgYWxyZWFkeSBiZSBkb25lICovXG4gICAgICAgICAgICBpZiAoISQyKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSB8IGlzbid0IGFscmVhZHkgZXNjYXBlZCwgc28gZXNjYXBlIGl0LlxuICAgICAgICAgICAgICAkMiA9ICdcXFxcJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbmVlZCB0byBlc2NhcGUgYWxsIHRob3NlIHNsYXNoZXMgKmFnYWluKiwgd2l0aG91dCBlc2NhcGluZyB0aGVcbiAgICAgICAgICAgIC8vIG9uZSB0aGF0IHdlIG5lZWQgZm9yIGVzY2FwaW5nIHRoZSB8IGNoYXJhY3Rlci4gIEFzIGl0IHdvcmtzIG91dCxcbiAgICAgICAgICAgIC8vIGVzY2FwaW5nIGFuIGV2ZW4gbnVtYmVyIG9mIHNsYXNoZXMgY2FuIGJlIGRvbmUgYnkgc2ltcGx5IHJlcGVhdGluZ1xuICAgICAgICAgICAgLy8gaXQgZXhhY3RseSBhZnRlciBpdHNlbGYuICBUaGF0J3Mgd2h5IHRoaXMgdHJpY2sgd29ya3MuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSSBhbSBzb3JyeSB0aGF0IHlvdSBoYXZlIHRvIHNlZSB0aGlzLlxuICAgICAgICAgICAgcmV0dXJuICQxICsgJDEgKyAkMiArICd8J1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5kZWJ1ZygndGFpbD0lalxcbiAgICVzJywgdGFpbCwgdGFpbCwgcGwsIHJlKTtcbiAgICAgICAgICBjb25zdCB0ID0gcGwudHlwZSA9PT0gJyonID8gc3RhclxuICAgICAgICAgICAgOiBwbC50eXBlID09PSAnPycgPyBxbWFya1xuICAgICAgICAgICAgOiAnXFxcXCcgKyBwbC50eXBlO1xuXG4gICAgICAgICAgaGFzTWFnaWMgPSB0cnVlO1xuICAgICAgICAgIHJlID0gcmUuc2xpY2UoMCwgcGwucmVTdGFydCkgKyB0ICsgJ1xcXFwoJyArIHRhaWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgdHJhaWxpbmcgdGhpbmdzIHRoYXQgb25seSBtYXR0ZXIgYXQgdGhlIHZlcnkgZW5kLlxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpO1xuICAgICAgICBpZiAoZXNjYXBpbmcpIHtcbiAgICAgICAgICAvLyB0cmFpbGluZyBcXFxcXG4gICAgICAgICAgcmUgKz0gJ1xcXFxcXFxcJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgbmVlZCB0byBhcHBseSB0aGUgbm9kb3Qgc3RhcnQgaWYgdGhlIHJlIHN0YXJ0cyB3aXRoXG4gICAgICAgIC8vIHNvbWV0aGluZyB0aGF0IGNvdWxkIGNvbmNlaXZhYmx5IGNhcHR1cmUgYSBkb3RcbiAgICAgICAgY29uc3QgYWRkUGF0dGVyblN0YXJ0ID0gYWRkUGF0dGVyblN0YXJ0U2V0W3JlLmNoYXJBdCgwKV07XG5cbiAgICAgICAgLy8gSGFjayB0byB3b3JrIGFyb3VuZCBsYWNrIG9mIG5lZ2F0aXZlIGxvb2tiZWhpbmQgaW4gSlNcbiAgICAgICAgLy8gQSBwYXR0ZXJuIGxpa2U6ICouISh4KS4hKHl8eikgbmVlZHMgdG8gZW5zdXJlIHRoYXQgYSBuYW1lXG4gICAgICAgIC8vIGxpa2UgJ2EueHl6Lnl6JyBkb2Vzbid0IG1hdGNoLiAgU28sIHRoZSBmaXJzdCBuZWdhdGl2ZVxuICAgICAgICAvLyBsb29rYWhlYWQsIGhhcyB0byBsb29rIEFMTCB0aGUgd2F5IGFoZWFkLCB0byB0aGUgZW5kIG9mXG4gICAgICAgIC8vIHRoZSBwYXR0ZXJuLlxuICAgICAgICBmb3IgKGxldCBuID0gbmVnYXRpdmVMaXN0cy5sZW5ndGggLSAxOyBuID4gLTE7IG4tLSkge1xuICAgICAgICAgIGNvbnN0IG5sID0gbmVnYXRpdmVMaXN0c1tuXTtcblxuICAgICAgICAgIGNvbnN0IG5sQmVmb3JlID0gcmUuc2xpY2UoMCwgbmwucmVTdGFydCk7XG4gICAgICAgICAgY29uc3QgbmxGaXJzdCA9IHJlLnNsaWNlKG5sLnJlU3RhcnQsIG5sLnJlRW5kIC0gOCk7XG4gICAgICAgICAgbGV0IG5sQWZ0ZXIgPSByZS5zbGljZShubC5yZUVuZCk7XG4gICAgICAgICAgY29uc3QgbmxMYXN0ID0gcmUuc2xpY2UobmwucmVFbmQgLSA4LCBubC5yZUVuZCkgKyBubEFmdGVyO1xuXG4gICAgICAgICAgLy8gSGFuZGxlIG5lc3RlZCBzdHVmZiBsaWtlICooKi5qc3whKCouanNvbikpLCB3aGVyZSBvcGVuIHBhcmVuc1xuICAgICAgICAgIC8vIG1lYW4gdGhhdCB3ZSBzaG91bGQgKm5vdCogaW5jbHVkZSB0aGUgKSBpbiB0aGUgYml0IHRoYXQgaXMgY29uc2lkZXJlZFxuICAgICAgICAgIC8vIFwiYWZ0ZXJcIiB0aGUgbmVnYXRlZCBzZWN0aW9uLlxuICAgICAgICAgIGNvbnN0IGNsb3NlUGFyZW5zQmVmb3JlID0gbmxCZWZvcmUuc3BsaXQoJyknKS5sZW5ndGg7XG4gICAgICAgICAgY29uc3Qgb3BlblBhcmVuc0JlZm9yZSA9IG5sQmVmb3JlLnNwbGl0KCcoJykubGVuZ3RoIC0gY2xvc2VQYXJlbnNCZWZvcmU7XG4gICAgICAgICAgbGV0IGNsZWFuQWZ0ZXIgPSBubEFmdGVyO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlblBhcmVuc0JlZm9yZTsgaSsrKSB7XG4gICAgICAgICAgICBjbGVhbkFmdGVyID0gY2xlYW5BZnRlci5yZXBsYWNlKC9cXClbKyo/XT8vLCAnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5sQWZ0ZXIgPSBjbGVhbkFmdGVyO1xuXG4gICAgICAgICAgY29uc3QgZG9sbGFyID0gbmxBZnRlciA9PT0gJycgJiYgaXNTdWIgIT09IFNVQlBBUlNFID8gJyg/OiR8XFxcXC8pJyA6ICcnO1xuXG4gICAgICAgICAgcmUgPSBubEJlZm9yZSArIG5sRmlyc3QgKyBubEFmdGVyICsgZG9sbGFyICsgbmxMYXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlIHJlIGlzIG5vdCBcIlwiIGF0IHRoaXMgcG9pbnQsIHRoZW4gd2UgbmVlZCB0byBtYWtlIHN1cmVcbiAgICAgICAgLy8gaXQgZG9lc24ndCBtYXRjaCBhZ2FpbnN0IGFuIGVtcHR5IHBhdGggcGFydC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGEvKiB3aWxsIG1hdGNoIGEvLCB3aGljaCBpdCBzaG91bGQgbm90LlxuICAgICAgICBpZiAocmUgIT09ICcnICYmIGhhc01hZ2ljKSB7XG4gICAgICAgICAgcmUgPSAnKD89LiknICsgcmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWRkUGF0dGVyblN0YXJ0KSB7XG4gICAgICAgICAgcmUgPSBwYXR0ZXJuU3RhcnQoKSArIHJlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFyc2luZyBqdXN0IGEgcGllY2Ugb2YgYSBsYXJnZXIgcGF0dGVybi5cbiAgICAgICAgaWYgKGlzU3ViID09PSBTVUJQQVJTRSkge1xuICAgICAgICAgIHJldHVybiBbcmUsIGhhc01hZ2ljXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgaXQncyBub2Nhc2UsIGFuZCB0aGUgbGNhc2UvdXBwZXJjYXNlIGRvbid0IG1hdGNoLCBpdCdzIG1hZ2ljXG4gICAgICAgIGlmIChvcHRpb25zLm5vY2FzZSAmJiAhaGFzTWFnaWMpIHtcbiAgICAgICAgICBoYXNNYWdpYyA9IHBhdHRlcm4udG9VcHBlckNhc2UoKSAhPT0gcGF0dGVybi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2tpcCB0aGUgcmVnZXhwIGZvciBub24tbWFnaWNhbCBwYXR0ZXJuc1xuICAgICAgICAvLyB1bmVzY2FwZSBhbnl0aGluZyBpbiBpdCwgdGhvdWdoLCBzbyB0aGF0IGl0J2xsIGJlXG4gICAgICAgIC8vIGFuIGV4YWN0IG1hdGNoIGFnYWluc3QgYSBmaWxlIGV0Yy5cbiAgICAgICAgaWYgKCFoYXNNYWdpYykge1xuICAgICAgICAgIHJldHVybiBnbG9iVW5lc2NhcGUocGF0dGVybilcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZsYWdzID0gb3B0aW9ucy5ub2Nhc2UgPyAnaScgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUmVnRXhwKCdeJyArIHJlICsgJyQnLCBmbGFncyksIHtcbiAgICAgICAgICAgIF9nbG9iOiBwYXR0ZXJuLFxuICAgICAgICAgICAgX3NyYzogcmUsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXIpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gc2hvdWxkIGJlIGltcG9zc2libGUgKi8ge1xuICAgICAgICAgIC8vIElmIGl0IHdhcyBhbiBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiwgdGhlbiBpdCBjYW4ndCBtYXRjaFxuICAgICAgICAgIC8vIGFueXRoaW5nLiAgVGhpcyB0cmljayBsb29rcyBmb3IgYSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGVuZCBvZlxuICAgICAgICAgIC8vIHRoZSBzdHJpbmcsIHdoaWNoIGlzIG9mIGNvdXJzZSBpbXBvc3NpYmxlLCBleGNlcHQgaW4gbXVsdGktbGluZVxuICAgICAgICAgIC8vIG1vZGUsIGJ1dCBpdCdzIG5vdCBhIC9tIHJlZ2V4LlxuICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCckLicpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFrZVJlICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnZXhwIHx8IHRoaXMucmVnZXhwID09PSBmYWxzZSkgcmV0dXJuIHRoaXMucmVnZXhwXG5cbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgdGhpcy5zZXQgaXMgYSAyZCBhcnJheSBvZiBwYXJ0aWFsXG4gICAgICAgIC8vIHBhdHRlcm4gc3RyaW5ncywgb3IgXCIqKlwiLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJdCdzIGJldHRlciB0byB1c2UgLm1hdGNoKCkuICBUaGlzIGZ1bmN0aW9uIHNob3VsZG4ndFxuICAgICAgICAvLyBiZSB1c2VkLCByZWFsbHksIGJ1dCBpdCdzIHByZXR0eSBjb252ZW5pZW50IHNvbWV0aW1lcyxcbiAgICAgICAgLy8gd2hlbiB5b3UganVzdCB3YW50IHRvIHdvcmsgd2l0aCBhIHJlZ2V4LlxuICAgICAgICBjb25zdCBzZXQgPSB0aGlzLnNldDtcblxuICAgICAgICBpZiAoIXNldC5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnJlZ2V4cCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2V4cFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgdHdvU3RhciA9IG9wdGlvbnMubm9nbG9ic3RhciA/IHN0YXJcbiAgICAgICAgICA6IG9wdGlvbnMuZG90ID8gdHdvU3RhckRvdFxuICAgICAgICAgIDogdHdvU3Rhck5vRG90O1xuICAgICAgICBjb25zdCBmbGFncyA9IG9wdGlvbnMubm9jYXNlID8gJ2knIDogJyc7XG5cbiAgICAgICAgLy8gY29hbGVzY2UgZ2xvYnN0YXJzIGFuZCByZWdleHBpZnkgbm9uLWdsb2JzdGFyIHBhdHRlcm5zXG4gICAgICAgIC8vIGlmIGl0J3MgdGhlIG9ubHkgaXRlbSwgdGhlbiB3ZSBqdXN0IGRvIG9uZSB0d29TdGFyXG4gICAgICAgIC8vIGlmIGl0J3MgdGhlIGZpcnN0LCBhbmQgdGhlcmUgYXJlIG1vcmUsIHByZXBlbmQgKFxcL3x0d29TdGFyXFwvKT8gdG8gbmV4dFxuICAgICAgICAvLyBpZiBpdCdzIHRoZSBsYXN0LCBhcHBlbmQgKFxcL3R3b1N0YXJ8KSB0byBwcmV2aW91c1xuICAgICAgICAvLyBpZiBpdCdzIGluIHRoZSBtaWRkbGUsIGFwcGVuZCAoXFwvfFxcL3R3b1N0YXJcXC8pIHRvIHByZXZpb3VzXG4gICAgICAgIC8vIHRoZW4gZmlsdGVyIG91dCBHTE9CU1RBUiBzeW1ib2xzXG4gICAgICAgIGxldCByZSA9IHNldC5tYXAocGF0dGVybiA9PiB7XG4gICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ubWFwKHAgPT5cbiAgICAgICAgICAgIHR5cGVvZiBwID09PSAnc3RyaW5nJyA/IHJlZ0V4cEVzY2FwZShwKVxuICAgICAgICAgICAgOiBwID09PSBHTE9CU1RBUiA/IEdMT0JTVEFSXG4gICAgICAgICAgICA6IHAuX3NyY1xuICAgICAgICAgICkucmVkdWNlKChzZXQsIHApID0+IHtcbiAgICAgICAgICAgIGlmICghKHNldFtzZXQubGVuZ3RoIC0gMV0gPT09IEdMT0JTVEFSICYmIHAgPT09IEdMT0JTVEFSKSkge1xuICAgICAgICAgICAgICBzZXQucHVzaChwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRcbiAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgcGF0dGVybi5mb3JFYWNoKChwLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAocCAhPT0gR0xPQlNUQVIgfHwgcGF0dGVybltpLTFdID09PSBHTE9CU1RBUikge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChwYXR0ZXJuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuW2krMV0gPSAnKD86XFxcXFxcL3wnICsgdHdvU3RhciArICdcXFxcXFwvKT8nICsgcGF0dGVybltpKzFdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdHRlcm5baV0gPSB0d29TdGFyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IHBhdHRlcm4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBwYXR0ZXJuW2ktMV0gKz0gJyg/OlxcXFxcXC98JyArIHR3b1N0YXIgKyAnKT8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0dGVybltpLTFdICs9ICcoPzpcXFxcXFwvfFxcXFxcXC8nICsgdHdvU3RhciArICdcXFxcXFwvKScgKyBwYXR0ZXJuW2krMV07XG4gICAgICAgICAgICAgIHBhdHRlcm5baSsxXSA9IEdMT0JTVEFSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBwYXR0ZXJuLmZpbHRlcihwID0+IHAgIT09IEdMT0JTVEFSKS5qb2luKCcvJylcbiAgICAgICAgfSkuam9pbignfCcpO1xuXG4gICAgICAgIC8vIG11c3QgbWF0Y2ggZW50aXJlIHBhdHRlcm5cbiAgICAgICAgLy8gZW5kaW5nIGluIGEgKiBvciAqKiB3aWxsIG1ha2UgaXQgbGVzcyBzdHJpY3QuXG4gICAgICAgIHJlID0gJ14oPzonICsgcmUgKyAnKSQnO1xuXG4gICAgICAgIC8vIGNhbiBtYXRjaCBhbnl0aGluZywgYXMgbG9uZyBhcyBpdCdzIG5vdCB0aGlzLlxuICAgICAgICBpZiAodGhpcy5uZWdhdGUpIHJlID0gJ14oPyEnICsgcmUgKyAnKS4qJCc7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnJlZ2V4cCA9IG5ldyBSZWdFeHAocmUsIGZsYWdzKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gc2hvdWxkIGJlIGltcG9zc2libGUgKi8ge1xuICAgICAgICAgIHRoaXMucmVnZXhwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVnZXhwXG4gICAgICB9XG5cbiAgICAgIG1hdGNoIChmLCBwYXJ0aWFsID0gdGhpcy5wYXJ0aWFsKSB7XG4gICAgICAgIHRoaXMuZGVidWcoJ21hdGNoJywgZiwgdGhpcy5wYXR0ZXJuKTtcbiAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCBpbiB0aGUgY2FzZSBvZiBidXN0ZWQgdGhpbmdzLlxuICAgICAgICAvLyBjb21tZW50cywgZXRjLlxuICAgICAgICBpZiAodGhpcy5jb21tZW50KSByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuZW1wdHkpIHJldHVybiBmID09PSAnJ1xuXG4gICAgICAgIGlmIChmID09PSAnLycgJiYgcGFydGlhbCkgcmV0dXJuIHRydWVcblxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIC8vIHdpbmRvd3M6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICAgICAgICBpZiAocGF0aCQxLnNlcCAhPT0gJy8nKSB7XG4gICAgICAgICAgZiA9IGYuc3BsaXQocGF0aCQxLnNlcCkuam9pbignLycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJlYXQgdGhlIHRlc3QgcGF0aCBhcyBhIHNldCBvZiBwYXRocGFydHMuXG4gICAgICAgIGYgPSBmLnNwbGl0KHNsYXNoU3BsaXQpO1xuICAgICAgICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgJ3NwbGl0JywgZik7XG5cbiAgICAgICAgLy8ganVzdCBPTkUgb2YgdGhlIHBhdHRlcm4gc2V0cyBpbiB0aGlzLnNldCBuZWVkcyB0byBtYXRjaFxuICAgICAgICAvLyBpbiBvcmRlciBmb3IgaXQgdG8gYmUgdmFsaWQuICBJZiBuZWdhdGluZywgdGhlbiBqdXN0IG9uZVxuICAgICAgICAvLyBtYXRjaCBtZWFucyB0aGF0IHdlIGhhdmUgZmFpbGVkLlxuICAgICAgICAvLyBFaXRoZXIgd2F5LCByZXR1cm4gb24gdGhlIGZpcnN0IGhpdC5cblxuICAgICAgICBjb25zdCBzZXQgPSB0aGlzLnNldDtcbiAgICAgICAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sICdzZXQnLCBzZXQpO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIGJhc2VuYW1lIG9mIHRoZSBwYXRoIGJ5IGxvb2tpbmcgZm9yIHRoZSBsYXN0IG5vbi1lbXB0eSBzZWdtZW50XG4gICAgICAgIGxldCBmaWxlbmFtZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBmaWxlbmFtZSA9IGZbaV07XG4gICAgICAgICAgaWYgKGZpbGVuYW1lKSBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gc2V0W2ldO1xuICAgICAgICAgIGxldCBmaWxlID0gZjtcbiAgICAgICAgICBpZiAob3B0aW9ucy5tYXRjaEJhc2UgJiYgcGF0dGVybi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGZpbGUgPSBbZmlsZW5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBoaXQgPSB0aGlzLm1hdGNoT25lKGZpbGUsIHBhdHRlcm4sIHBhcnRpYWwpO1xuICAgICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiB0cnVlXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubmVnYXRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGlkbid0IGdldCBhbnkgaGl0cy4gIHRoaXMgaXMgc3VjY2VzcyBpZiBpdCdzIGEgbmVnYXRpdmVcbiAgICAgICAgLy8gcGF0dGVybiwgZmFpbHVyZSBvdGhlcndpc2UuXG4gICAgICAgIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiBmYWxzZVxuICAgICAgICByZXR1cm4gdGhpcy5uZWdhdGVcbiAgICAgIH1cblxuICAgICAgc3RhdGljIGRlZmF1bHRzIChkZWYpIHtcbiAgICAgICAgcmV0dXJuIG1pbmltYXRjaCQxLmRlZmF1bHRzKGRlZikuTWluaW1hdGNoXG4gICAgICB9XG4gICAgfVxuXG4gICAgbWluaW1hdGNoJDEuTWluaW1hdGNoID0gTWluaW1hdGNoJDE7XG5cbiAgICB2YXIgaW5oZXJpdHNfYnJvd3NlckV4cG9ydHMgPSB7fTtcbiAgICB2YXIgaW5oZXJpdHNfYnJvd3NlciA9IHtcbiAgICAgIGdldCBleHBvcnRzKCl7IHJldHVybiBpbmhlcml0c19icm93c2VyRXhwb3J0czsgfSxcbiAgICAgIHNldCBleHBvcnRzKHYpeyBpbmhlcml0c19icm93c2VyRXhwb3J0cyA9IHY7IH0sXG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgICAgIGluaGVyaXRzX2Jyb3dzZXIuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgICAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICAgICAgaW5oZXJpdHNfYnJvd3Nlci5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICAgICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgICAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBjb21tb24gPSB7fTtcblxuICAgIGNvbW1vbi5zZXRvcHRzID0gc2V0b3B0cztcbiAgICBjb21tb24ub3duUHJvcCA9IG93blByb3A7XG4gICAgY29tbW9uLm1ha2VBYnMgPSBtYWtlQWJzO1xuICAgIGNvbW1vbi5maW5pc2ggPSBmaW5pc2g7XG4gICAgY29tbW9uLm1hcmsgPSBtYXJrO1xuICAgIGNvbW1vbi5pc0lnbm9yZWQgPSBpc0lnbm9yZWQ7XG4gICAgY29tbW9uLmNoaWxkcmVuSWdub3JlZCA9IGNoaWxkcmVuSWdub3JlZDtcblxuICAgIGZ1bmN0aW9uIG93blByb3AgKG9iaiwgZmllbGQpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBmaWVsZClcbiAgICB9XG5cbiAgICB2YXIgZnMgPSByZXF1aXJlJCQwX19kZWZhdWx0W1wiZGVmYXVsdFwiXTtcbiAgICB2YXIgcGF0aCA9IHJlcXVpcmUkJDRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdO1xuICAgIHZhciBtaW5pbWF0Y2ggPSBtaW5pbWF0Y2hfMTtcbiAgICB2YXIgaXNBYnNvbHV0ZSA9IHJlcXVpcmUkJDRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmlzQWJzb2x1dGU7XG4gICAgdmFyIE1pbmltYXRjaCA9IG1pbmltYXRjaC5NaW5pbWF0Y2g7XG5cbiAgICBmdW5jdGlvbiBhbHBoYXNvcnQgKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYiwgJ2VuJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cElnbm9yZXMgKHNlbGYsIG9wdGlvbnMpIHtcbiAgICAgIHNlbGYuaWdub3JlID0gb3B0aW9ucy5pZ25vcmUgfHwgW107XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShzZWxmLmlnbm9yZSkpXG4gICAgICAgIHNlbGYuaWdub3JlID0gW3NlbGYuaWdub3JlXTtcblxuICAgICAgaWYgKHNlbGYuaWdub3JlLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmlnbm9yZSA9IHNlbGYuaWdub3JlLm1hcChpZ25vcmVNYXApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlnbm9yZSBwYXR0ZXJucyBhcmUgYWx3YXlzIGluIGRvdDp0cnVlIG1vZGUuXG4gICAgZnVuY3Rpb24gaWdub3JlTWFwIChwYXR0ZXJuKSB7XG4gICAgICB2YXIgZ21hdGNoZXIgPSBudWxsO1xuICAgICAgaWYgKHBhdHRlcm4uc2xpY2UoLTMpID09PSAnLyoqJykge1xuICAgICAgICB2YXIgZ3BhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLyhcXC9cXCpcXCopKyQvLCAnJyk7XG4gICAgICAgIGdtYXRjaGVyID0gbmV3IE1pbmltYXRjaChncGF0dGVybiwgeyBkb3Q6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXI6IG5ldyBNaW5pbWF0Y2gocGF0dGVybiwgeyBkb3Q6IHRydWUgfSksXG4gICAgICAgIGdtYXRjaGVyOiBnbWF0Y2hlclxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldG9wdHMgKHNlbGYsIHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuXG4gICAgICAvLyBiYXNlLW1hdGNoaW5nOiBqdXN0IHVzZSBnbG9ic3RhciBmb3IgdGhhdC5cbiAgICAgIGlmIChvcHRpb25zLm1hdGNoQmFzZSAmJiAtMSA9PT0gcGF0dGVybi5pbmRleE9mKFwiL1wiKSkge1xuICAgICAgICBpZiAob3B0aW9ucy5ub2dsb2JzdGFyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFzZSBtYXRjaGluZyByZXF1aXJlcyBnbG9ic3RhclwiKVxuICAgICAgICB9XG4gICAgICAgIHBhdHRlcm4gPSBcIioqL1wiICsgcGF0dGVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi53aW5kb3dzUGF0aHNOb0VzY2FwZSA9ICEhb3B0aW9ucy53aW5kb3dzUGF0aHNOb0VzY2FwZSB8fFxuICAgICAgICBvcHRpb25zLmFsbG93V2luZG93c0VzY2FwZSA9PT0gZmFsc2U7XG4gICAgICBpZiAoc2VsZi53aW5kb3dzUGF0aHNOb0VzY2FwZSkge1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuc2lsZW50ID0gISFvcHRpb25zLnNpbGVudDtcbiAgICAgIHNlbGYucGF0dGVybiA9IHBhdHRlcm47XG4gICAgICBzZWxmLnN0cmljdCA9IG9wdGlvbnMuc3RyaWN0ICE9PSBmYWxzZTtcbiAgICAgIHNlbGYucmVhbHBhdGggPSAhIW9wdGlvbnMucmVhbHBhdGg7XG4gICAgICBzZWxmLnJlYWxwYXRoQ2FjaGUgPSBvcHRpb25zLnJlYWxwYXRoQ2FjaGUgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHNlbGYuZm9sbG93ID0gISFvcHRpb25zLmZvbGxvdztcbiAgICAgIHNlbGYuZG90ID0gISFvcHRpb25zLmRvdDtcbiAgICAgIHNlbGYubWFyayA9ICEhb3B0aW9ucy5tYXJrO1xuICAgICAgc2VsZi5ub2RpciA9ICEhb3B0aW9ucy5ub2RpcjtcbiAgICAgIGlmIChzZWxmLm5vZGlyKVxuICAgICAgICBzZWxmLm1hcmsgPSB0cnVlO1xuICAgICAgc2VsZi5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgICBzZWxmLm5vdW5pcXVlID0gISFvcHRpb25zLm5vdW5pcXVlO1xuICAgICAgc2VsZi5ub251bGwgPSAhIW9wdGlvbnMubm9udWxsO1xuICAgICAgc2VsZi5ub3NvcnQgPSAhIW9wdGlvbnMubm9zb3J0O1xuICAgICAgc2VsZi5ub2Nhc2UgPSAhIW9wdGlvbnMubm9jYXNlO1xuICAgICAgc2VsZi5zdGF0ID0gISFvcHRpb25zLnN0YXQ7XG4gICAgICBzZWxmLm5vcHJvY2VzcyA9ICEhb3B0aW9ucy5ub3Byb2Nlc3M7XG4gICAgICBzZWxmLmFic29sdXRlID0gISFvcHRpb25zLmFic29sdXRlO1xuICAgICAgc2VsZi5mcyA9IG9wdGlvbnMuZnMgfHwgZnM7XG5cbiAgICAgIHNlbGYubWF4TGVuZ3RoID0gb3B0aW9ucy5tYXhMZW5ndGggfHwgSW5maW5pdHk7XG4gICAgICBzZWxmLmNhY2hlID0gb3B0aW9ucy5jYWNoZSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgc2VsZi5zdGF0Q2FjaGUgPSBvcHRpb25zLnN0YXRDYWNoZSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgc2VsZi5zeW1saW5rcyA9IG9wdGlvbnMuc3ltbGlua3MgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgc2V0dXBJZ25vcmVzKHNlbGYsIG9wdGlvbnMpO1xuXG4gICAgICBzZWxmLmNoYW5nZWRDd2QgPSBmYWxzZTtcbiAgICAgIHZhciBjd2QgPSBwcm9jZXNzLmN3ZCgpO1xuICAgICAgaWYgKCFvd25Qcm9wKG9wdGlvbnMsIFwiY3dkXCIpKVxuICAgICAgICBzZWxmLmN3ZCA9IHBhdGgucmVzb2x2ZShjd2QpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHNlbGYuY3dkID0gcGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkKTtcbiAgICAgICAgc2VsZi5jaGFuZ2VkQ3dkID0gc2VsZi5jd2QgIT09IGN3ZDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yb290ID0gb3B0aW9ucy5yb290IHx8IHBhdGgucmVzb2x2ZShzZWxmLmN3ZCwgXCIvXCIpO1xuICAgICAgc2VsZi5yb290ID0gcGF0aC5yZXNvbHZlKHNlbGYucm9vdCk7XG5cbiAgICAgIC8vIFRPRE86IGlzIGFuIGFic29sdXRlIGBjd2RgIHN1cHBvc2VkIHRvIGJlIHJlc29sdmVkIGFnYWluc3QgYHJvb3RgP1xuICAgICAgLy8gZS5nLiB7IGN3ZDogJy90ZXN0Jywgcm9vdDogX19kaXJuYW1lIH0gPT09IHBhdGguam9pbihfX2Rpcm5hbWUsICcvdGVzdCcpXG4gICAgICBzZWxmLmN3ZEFicyA9IGlzQWJzb2x1dGUoc2VsZi5jd2QpID8gc2VsZi5jd2QgOiBtYWtlQWJzKHNlbGYsIHNlbGYuY3dkKTtcbiAgICAgIHNlbGYubm9tb3VudCA9ICEhb3B0aW9ucy5ub21vdW50O1xuXG4gICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKSB7XG4gICAgICAgIHNlbGYucm9vdCA9IHNlbGYucm9vdC5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKTtcbiAgICAgICAgc2VsZi5jd2QgPSBzZWxmLmN3ZC5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKTtcbiAgICAgICAgc2VsZi5jd2RBYnMgPSBzZWxmLmN3ZEFicy5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKTtcbiAgICAgIH1cblxuICAgICAgLy8gZGlzYWJsZSBjb21tZW50cyBhbmQgbmVnYXRpb24gaW4gTWluaW1hdGNoLlxuICAgICAgLy8gTm90ZSB0aGF0IHRoZXkgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gR2xvYiBpdHNlbGYgYW55d2F5LlxuICAgICAgb3B0aW9ucy5ub25lZ2F0ZSA9IHRydWU7XG4gICAgICBvcHRpb25zLm5vY29tbWVudCA9IHRydWU7XG5cbiAgICAgIHNlbGYubWluaW1hdGNoID0gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKTtcbiAgICAgIHNlbGYub3B0aW9ucyA9IHNlbGYubWluaW1hdGNoLm9wdGlvbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluaXNoIChzZWxmKSB7XG4gICAgICB2YXIgbm91ID0gc2VsZi5ub3VuaXF1ZTtcbiAgICAgIHZhciBhbGwgPSBub3UgPyBbXSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2VsZi5tYXRjaGVzLmxlbmd0aDsgaSA8IGw7IGkgKyspIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBzZWxmLm1hdGNoZXNbaV07XG4gICAgICAgIGlmICghbWF0Y2hlcyB8fCBPYmplY3Qua2V5cyhtYXRjaGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAoc2VsZi5ub251bGwpIHtcbiAgICAgICAgICAgIC8vIGRvIGxpa2UgdGhlIHNoZWxsLCBhbmQgc3BpdCBvdXQgdGhlIGxpdGVyYWwgZ2xvYlxuICAgICAgICAgICAgdmFyIGxpdGVyYWwgPSBzZWxmLm1pbmltYXRjaC5nbG9iU2V0W2ldO1xuICAgICAgICAgICAgaWYgKG5vdSlcbiAgICAgICAgICAgICAgYWxsLnB1c2gobGl0ZXJhbCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGFsbFtsaXRlcmFsXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGhhZCBtYXRjaGVzXG4gICAgICAgICAgdmFyIG0gPSBPYmplY3Qua2V5cyhtYXRjaGVzKTtcbiAgICAgICAgICBpZiAobm91KVxuICAgICAgICAgICAgYWxsLnB1c2guYXBwbHkoYWxsLCBtKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgYWxsW21dID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghbm91KVxuICAgICAgICBhbGwgPSBPYmplY3Qua2V5cyhhbGwpO1xuXG4gICAgICBpZiAoIXNlbGYubm9zb3J0KVxuICAgICAgICBhbGwgPSBhbGwuc29ydChhbHBoYXNvcnQpO1xuXG4gICAgICAvLyBhdCAqc29tZSogcG9pbnQgd2Ugc3RhdHRlZCBhbGwgb2YgdGhlc2VcbiAgICAgIGlmIChzZWxmLm1hcmspIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhbGxbaV0gPSBzZWxmLl9tYXJrKGFsbFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYubm9kaXIpIHtcbiAgICAgICAgICBhbGwgPSBhbGwuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgbm90RGlyID0gISgvXFwvJC8udGVzdChlKSk7XG4gICAgICAgICAgICB2YXIgYyA9IHNlbGYuY2FjaGVbZV0gfHwgc2VsZi5jYWNoZVttYWtlQWJzKHNlbGYsIGUpXTtcbiAgICAgICAgICAgIGlmIChub3REaXIgJiYgYylcbiAgICAgICAgICAgICAgbm90RGlyID0gYyAhPT0gJ0RJUicgJiYgIUFycmF5LmlzQXJyYXkoYyk7XG4gICAgICAgICAgICByZXR1cm4gbm90RGlyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuaWdub3JlLmxlbmd0aClcbiAgICAgICAgYWxsID0gYWxsLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgcmV0dXJuICFpc0lnbm9yZWQoc2VsZiwgbSlcbiAgICAgICAgfSk7XG5cbiAgICAgIHNlbGYuZm91bmQgPSBhbGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFyayAoc2VsZiwgcCkge1xuICAgICAgdmFyIGFicyA9IG1ha2VBYnMoc2VsZiwgcCk7XG4gICAgICB2YXIgYyA9IHNlbGYuY2FjaGVbYWJzXTtcbiAgICAgIHZhciBtID0gcDtcbiAgICAgIGlmIChjKSB7XG4gICAgICAgIHZhciBpc0RpciA9IGMgPT09ICdESVInIHx8IEFycmF5LmlzQXJyYXkoYyk7XG4gICAgICAgIHZhciBzbGFzaCA9IHAuc2xpY2UoLTEpID09PSAnLyc7XG5cbiAgICAgICAgaWYgKGlzRGlyICYmICFzbGFzaClcbiAgICAgICAgICBtICs9ICcvJztcbiAgICAgICAgZWxzZSBpZiAoIWlzRGlyICYmIHNsYXNoKVxuICAgICAgICAgIG0gPSBtLnNsaWNlKDAsIC0xKTtcblxuICAgICAgICBpZiAobSAhPT0gcCkge1xuICAgICAgICAgIHZhciBtYWJzID0gbWFrZUFicyhzZWxmLCBtKTtcbiAgICAgICAgICBzZWxmLnN0YXRDYWNoZVttYWJzXSA9IHNlbGYuc3RhdENhY2hlW2Fic107XG4gICAgICAgICAgc2VsZi5jYWNoZVttYWJzXSA9IHNlbGYuY2FjaGVbYWJzXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbVxuICAgIH1cblxuICAgIC8vIGxvdHRhIHNpdHVwcy4uLlxuICAgIGZ1bmN0aW9uIG1ha2VBYnMgKHNlbGYsIGYpIHtcbiAgICAgIHZhciBhYnMgPSBmO1xuICAgICAgaWYgKGYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgYWJzID0gcGF0aC5qb2luKHNlbGYucm9vdCwgZik7XG4gICAgICB9IGVsc2UgaWYgKGlzQWJzb2x1dGUoZikgfHwgZiA9PT0gJycpIHtcbiAgICAgICAgYWJzID0gZjtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5jaGFuZ2VkQ3dkKSB7XG4gICAgICAgIGFicyA9IHBhdGgucmVzb2x2ZShzZWxmLmN3ZCwgZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhYnMgPSBwYXRoLnJlc29sdmUoZik7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKVxuICAgICAgICBhYnMgPSBhYnMucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuXG4gICAgICByZXR1cm4gYWJzXG4gICAgfVxuXG5cbiAgICAvLyBSZXR1cm4gdHJ1ZSwgaWYgcGF0dGVybiBlbmRzIHdpdGggZ2xvYnN0YXIgJyoqJywgZm9yIHRoZSBhY2NvbXBhbnlpbmcgcGFyZW50IGRpcmVjdG9yeS5cbiAgICAvLyBFeDotIElmIG5vZGVfbW9kdWxlcy8qKiBpcyB0aGUgcGF0dGVybiwgYWRkICdub2RlX21vZHVsZXMnIHRvIGlnbm9yZSBsaXN0IGFsb25nIHdpdGggaXQncyBjb250ZW50c1xuICAgIGZ1bmN0aW9uIGlzSWdub3JlZCAoc2VsZiwgcGF0aCkge1xuICAgICAgaWYgKCFzZWxmLmlnbm9yZS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICByZXR1cm4gc2VsZi5pZ25vcmUuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm1hdGNoZXIubWF0Y2gocGF0aCkgfHwgISEoaXRlbS5nbWF0Y2hlciAmJiBpdGVtLmdtYXRjaGVyLm1hdGNoKHBhdGgpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGlsZHJlbklnbm9yZWQgKHNlbGYsIHBhdGgpIHtcbiAgICAgIGlmICghc2VsZi5pZ25vcmUubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgICAgcmV0dXJuIHNlbGYuaWdub3JlLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gISEoaXRlbS5nbWF0Y2hlciAmJiBpdGVtLmdtYXRjaGVyLm1hdGNoKHBhdGgpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB2YXIgc3luYztcbiAgICB2YXIgaGFzUmVxdWlyZWRTeW5jO1xuXG4gICAgZnVuY3Rpb24gcmVxdWlyZVN5bmMgKCkge1xuICAgIFx0aWYgKGhhc1JlcXVpcmVkU3luYykgcmV0dXJuIHN5bmM7XG4gICAgXHRoYXNSZXF1aXJlZFN5bmMgPSAxO1xuICAgIFx0c3luYyA9IGdsb2JTeW5jO1xuICAgIFx0Z2xvYlN5bmMuR2xvYlN5bmMgPSBHbG9iU3luYztcblxuICAgIFx0dmFyIHJwID0gZnNfcmVhbHBhdGg7XG4gICAgXHR2YXIgbWluaW1hdGNoID0gbWluaW1hdGNoXzE7XG4gICAgXHRtaW5pbWF0Y2guTWluaW1hdGNoO1xuICAgIFx0cmVxdWlyZUdsb2IoKS5HbG9iO1xuICAgIFx0dmFyIHBhdGggPSByZXF1aXJlJCQ0X19kZWZhdWx0W1wiZGVmYXVsdFwiXTtcbiAgICBcdHZhciBhc3NlcnQgPSByZXF1aXJlJCQ1X19kZWZhdWx0W1wiZGVmYXVsdFwiXTtcbiAgICBcdHZhciBpc0Fic29sdXRlID0gcmVxdWlyZSQkNF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uaXNBYnNvbHV0ZTtcbiAgICBcdHZhciBjb21tb24kMSA9IGNvbW1vbjtcbiAgICBcdHZhciBzZXRvcHRzID0gY29tbW9uJDEuc2V0b3B0cztcbiAgICBcdHZhciBvd25Qcm9wID0gY29tbW9uJDEub3duUHJvcDtcbiAgICBcdHZhciBjaGlsZHJlbklnbm9yZWQgPSBjb21tb24kMS5jaGlsZHJlbklnbm9yZWQ7XG4gICAgXHR2YXIgaXNJZ25vcmVkID0gY29tbW9uJDEuaXNJZ25vcmVkO1xuXG4gICAgXHRmdW5jdGlvbiBnbG9iU3luYyAocGF0dGVybiwgb3B0aW9ucykge1xuICAgIFx0ICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMylcbiAgICBcdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYWxsYmFjayBwcm92aWRlZCB0byBzeW5jIGdsb2JcXG4nK1xuICAgIFx0ICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZTogaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWdsb2IvaXNzdWVzLzE2NycpXG5cbiAgICBcdCAgcmV0dXJuIG5ldyBHbG9iU3luYyhwYXR0ZXJuLCBvcHRpb25zKS5mb3VuZFxuICAgIFx0fVxuXG4gICAgXHRmdW5jdGlvbiBHbG9iU3luYyAocGF0dGVybiwgb3B0aW9ucykge1xuICAgIFx0ICBpZiAoIXBhdHRlcm4pXG4gICAgXHQgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHByb3ZpZGUgcGF0dGVybicpXG5cbiAgICBcdCAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDMpXG4gICAgXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgcHJvdmlkZWQgdG8gc3luYyBnbG9iXFxuJytcbiAgICBcdCAgICAgICAgICAgICAgICAgICAgICAgICdTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvbm9kZS1nbG9iL2lzc3Vlcy8xNjcnKVxuXG4gICAgXHQgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBHbG9iU3luYykpXG4gICAgXHQgICAgcmV0dXJuIG5ldyBHbG9iU3luYyhwYXR0ZXJuLCBvcHRpb25zKVxuXG4gICAgXHQgIHNldG9wdHModGhpcywgcGF0dGVybiwgb3B0aW9ucyk7XG5cbiAgICBcdCAgaWYgKHRoaXMubm9wcm9jZXNzKVxuICAgIFx0ICAgIHJldHVybiB0aGlzXG5cbiAgICBcdCAgdmFyIG4gPSB0aGlzLm1pbmltYXRjaC5zZXQubGVuZ3RoO1xuICAgIFx0ICB0aGlzLm1hdGNoZXMgPSBuZXcgQXJyYXkobik7XG4gICAgXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSArKykge1xuICAgIFx0ICAgIHRoaXMuX3Byb2Nlc3ModGhpcy5taW5pbWF0Y2guc2V0W2ldLCBpLCBmYWxzZSk7XG4gICAgXHQgIH1cbiAgICBcdCAgdGhpcy5fZmluaXNoKCk7XG4gICAgXHR9XG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIFx0ICBhc3NlcnQub2sodGhpcyBpbnN0YW5jZW9mIEdsb2JTeW5jKTtcbiAgICBcdCAgaWYgKHRoaXMucmVhbHBhdGgpIHtcbiAgICBcdCAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXHQgICAgdGhpcy5tYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG1hdGNoc2V0LCBpbmRleCkge1xuICAgIFx0ICAgICAgdmFyIHNldCA9IHNlbGYubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIFx0ICAgICAgZm9yICh2YXIgcCBpbiBtYXRjaHNldCkge1xuICAgIFx0ICAgICAgICB0cnkge1xuICAgIFx0ICAgICAgICAgIHAgPSBzZWxmLl9tYWtlQWJzKHApO1xuICAgIFx0ICAgICAgICAgIHZhciByZWFsID0gcnAucmVhbHBhdGhTeW5jKHAsIHNlbGYucmVhbHBhdGhDYWNoZSk7XG4gICAgXHQgICAgICAgICAgc2V0W3JlYWxdID0gdHJ1ZTtcbiAgICBcdCAgICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICBcdCAgICAgICAgICBpZiAoZXIuc3lzY2FsbCA9PT0gJ3N0YXQnKVxuICAgIFx0ICAgICAgICAgICAgc2V0W3NlbGYuX21ha2VBYnMocCldID0gdHJ1ZTtcbiAgICBcdCAgICAgICAgICBlbHNlXG4gICAgXHQgICAgICAgICAgICB0aHJvdyBlclxuICAgIFx0ICAgICAgICB9XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfSk7XG4gICAgXHQgIH1cbiAgICBcdCAgY29tbW9uJDEuZmluaXNoKHRoaXMpO1xuICAgIFx0fTtcblxuXG4gICAgXHRHbG9iU3luYy5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAocGF0dGVybiwgaW5kZXgsIGluR2xvYlN0YXIpIHtcbiAgICBcdCAgYXNzZXJ0Lm9rKHRoaXMgaW5zdGFuY2VvZiBHbG9iU3luYyk7XG5cbiAgICBcdCAgLy8gR2V0IHRoZSBmaXJzdCBbbl0gcGFydHMgb2YgcGF0dGVybiB0aGF0IGFyZSBhbGwgc3RyaW5ncy5cbiAgICBcdCAgdmFyIG4gPSAwO1xuICAgIFx0ICB3aGlsZSAodHlwZW9mIHBhdHRlcm5bbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgXHQgICAgbiArKztcbiAgICBcdCAgfVxuICAgIFx0ICAvLyBub3cgbiBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IG9uZSB0aGF0IGlzICpub3QqIGEgc3RyaW5nLlxuXG4gICAgXHQgIC8vIFNlZSBpZiB0aGVyZSdzIGFueXRoaW5nIGVsc2VcbiAgICBcdCAgdmFyIHByZWZpeDtcbiAgICBcdCAgc3dpdGNoIChuKSB7XG4gICAgXHQgICAgLy8gaWYgbm90LCB0aGVuIHRoaXMgaXMgcmF0aGVyIHNpbXBsZVxuICAgIFx0ICAgIGNhc2UgcGF0dGVybi5sZW5ndGg6XG4gICAgXHQgICAgICB0aGlzLl9wcm9jZXNzU2ltcGxlKHBhdHRlcm4uam9pbignLycpLCBpbmRleCk7XG4gICAgXHQgICAgICByZXR1cm5cblxuICAgIFx0ICAgIGNhc2UgMDpcbiAgICBcdCAgICAgIC8vIHBhdHRlcm4gKnN0YXJ0cyogd2l0aCBzb21lIG5vbi10cml2aWFsIGl0ZW0uXG4gICAgXHQgICAgICAvLyBnb2luZyB0byByZWFkZGlyKGN3ZCksIGJ1dCBub3QgaW5jbHVkZSB0aGUgcHJlZml4IGluIG1hdGNoZXMuXG4gICAgXHQgICAgICBwcmVmaXggPSBudWxsO1xuICAgIFx0ICAgICAgYnJlYWtcblxuICAgIFx0ICAgIGRlZmF1bHQ6XG4gICAgXHQgICAgICAvLyBwYXR0ZXJuIGhhcyBzb21lIHN0cmluZyBiaXRzIGluIHRoZSBmcm9udC5cbiAgICBcdCAgICAgIC8vIHdoYXRldmVyIGl0IHN0YXJ0cyB3aXRoLCB3aGV0aGVyIHRoYXQncyAnYWJzb2x1dGUnIGxpa2UgL2Zvby9iYXIsXG4gICAgXHQgICAgICAvLyBvciAncmVsYXRpdmUnIGxpa2UgJy4uL2JheidcbiAgICBcdCAgICAgIHByZWZpeCA9IHBhdHRlcm4uc2xpY2UoMCwgbikuam9pbignLycpO1xuICAgIFx0ICAgICAgYnJlYWtcbiAgICBcdCAgfVxuXG4gICAgXHQgIHZhciByZW1haW4gPSBwYXR0ZXJuLnNsaWNlKG4pO1xuXG4gICAgXHQgIC8vIGdldCB0aGUgbGlzdCBvZiBlbnRyaWVzLlxuICAgIFx0ICB2YXIgcmVhZDtcbiAgICBcdCAgaWYgKHByZWZpeCA9PT0gbnVsbClcbiAgICBcdCAgICByZWFkID0gJy4nO1xuICAgIFx0ICBlbHNlIGlmIChpc0Fic29sdXRlKHByZWZpeCkgfHxcbiAgICBcdCAgICAgIGlzQWJzb2x1dGUocGF0dGVybi5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICBcdCAgICAgICAgcmV0dXJuIHR5cGVvZiBwID09PSAnc3RyaW5nJyA/IHAgOiAnWypdJ1xuICAgIFx0ICAgICAgfSkuam9pbignLycpKSkge1xuICAgIFx0ICAgIGlmICghcHJlZml4IHx8ICFpc0Fic29sdXRlKHByZWZpeCkpXG4gICAgXHQgICAgICBwcmVmaXggPSAnLycgKyBwcmVmaXg7XG4gICAgXHQgICAgcmVhZCA9IHByZWZpeDtcbiAgICBcdCAgfSBlbHNlXG4gICAgXHQgICAgcmVhZCA9IHByZWZpeDtcblxuICAgIFx0ICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhyZWFkKTtcblxuICAgIFx0ICAvL2lmIGlnbm9yZWQsIHNraXAgcHJvY2Vzc2luZ1xuICAgIFx0ICBpZiAoY2hpbGRyZW5JZ25vcmVkKHRoaXMsIHJlYWQpKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIHZhciBpc0dsb2JTdGFyID0gcmVtYWluWzBdID09PSBtaW5pbWF0Y2guR0xPQlNUQVI7XG4gICAgXHQgIGlmIChpc0dsb2JTdGFyKVxuICAgIFx0ICAgIHRoaXMuX3Byb2Nlc3NHbG9iU3RhcihwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3Rhcik7XG4gICAgXHQgIGVsc2VcbiAgICBcdCAgICB0aGlzLl9wcm9jZXNzUmVhZGRpcihwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3Rhcik7XG4gICAgXHR9O1xuXG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fcHJvY2Vzc1JlYWRkaXIgPSBmdW5jdGlvbiAocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIpIHtcbiAgICBcdCAgdmFyIGVudHJpZXMgPSB0aGlzLl9yZWFkZGlyKGFicywgaW5HbG9iU3Rhcik7XG5cbiAgICBcdCAgLy8gaWYgdGhlIGFicyBpc24ndCBhIGRpciwgdGhlbiBub3RoaW5nIGNhbiBtYXRjaCFcbiAgICBcdCAgaWYgKCFlbnRyaWVzKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIC8vIEl0IHdpbGwgb25seSBtYXRjaCBkb3QgZW50cmllcyBpZiBpdCBzdGFydHMgd2l0aCBhIGRvdCwgb3IgaWZcbiAgICBcdCAgLy8gZG90IGlzIHNldC4gIFN0dWZmIGxpa2UgQCguZm9vfC5iYXIpIGlzbid0IGFsbG93ZWQuXG4gICAgXHQgIHZhciBwbiA9IHJlbWFpblswXTtcbiAgICBcdCAgdmFyIG5lZ2F0ZSA9ICEhdGhpcy5taW5pbWF0Y2gubmVnYXRlO1xuICAgIFx0ICB2YXIgcmF3R2xvYiA9IHBuLl9nbG9iO1xuICAgIFx0ICB2YXIgZG90T2sgPSB0aGlzLmRvdCB8fCByYXdHbG9iLmNoYXJBdCgwKSA9PT0gJy4nO1xuXG4gICAgXHQgIHZhciBtYXRjaGVkRW50cmllcyA9IFtdO1xuICAgIFx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBcdCAgICB2YXIgZSA9IGVudHJpZXNbaV07XG4gICAgXHQgICAgaWYgKGUuY2hhckF0KDApICE9PSAnLicgfHwgZG90T2spIHtcbiAgICBcdCAgICAgIHZhciBtO1xuICAgIFx0ICAgICAgaWYgKG5lZ2F0ZSAmJiAhcHJlZml4KSB7XG4gICAgXHQgICAgICAgIG0gPSAhZS5tYXRjaChwbik7XG4gICAgXHQgICAgICB9IGVsc2Uge1xuICAgIFx0ICAgICAgICBtID0gZS5tYXRjaChwbik7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgICBpZiAobSlcbiAgICBcdCAgICAgICAgbWF0Y2hlZEVudHJpZXMucHVzaChlKTtcbiAgICBcdCAgICB9XG4gICAgXHQgIH1cblxuICAgIFx0ICB2YXIgbGVuID0gbWF0Y2hlZEVudHJpZXMubGVuZ3RoO1xuICAgIFx0ICAvLyBJZiB0aGVyZSBhcmUgbm8gbWF0Y2hlZCBlbnRyaWVzLCB0aGVuIG5vdGhpbmcgbWF0Y2hlcy5cbiAgICBcdCAgaWYgKGxlbiA9PT0gMClcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICAvLyBpZiB0aGlzIGlzIHRoZSBsYXN0IHJlbWFpbmluZyBwYXR0ZXJuIGJpdCwgdGhlbiBubyBuZWVkIGZvclxuICAgIFx0ICAvLyBhbiBhZGRpdGlvbmFsIHN0YXQgKnVubGVzcyogdGhlIHVzZXIgaGFzIHNwZWNpZmllZCBtYXJrIG9yXG4gICAgXHQgIC8vIHN0YXQgZXhwbGljaXRseS4gIFdlIGtub3cgdGhleSBleGlzdCwgc2luY2UgcmVhZGRpciByZXR1cm5lZFxuICAgIFx0ICAvLyB0aGVtLlxuXG4gICAgXHQgIGlmIChyZW1haW4ubGVuZ3RoID09PSAxICYmICF0aGlzLm1hcmsgJiYgIXRoaXMuc3RhdCkge1xuICAgIFx0ICAgIGlmICghdGhpcy5tYXRjaGVzW2luZGV4XSlcbiAgICBcdCAgICAgIHRoaXMubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKyspIHtcbiAgICBcdCAgICAgIHZhciBlID0gbWF0Y2hlZEVudHJpZXNbaV07XG4gICAgXHQgICAgICBpZiAocHJlZml4KSB7XG4gICAgXHQgICAgICAgIGlmIChwcmVmaXguc2xpY2UoLTEpICE9PSAnLycpXG4gICAgXHQgICAgICAgICAgZSA9IHByZWZpeCArICcvJyArIGU7XG4gICAgXHQgICAgICAgIGVsc2VcbiAgICBcdCAgICAgICAgICBlID0gcHJlZml4ICsgZTtcbiAgICBcdCAgICAgIH1cblxuICAgIFx0ICAgICAgaWYgKGUuY2hhckF0KDApID09PSAnLycgJiYgIXRoaXMubm9tb3VudCkge1xuICAgIFx0ICAgICAgICBlID0gcGF0aC5qb2luKHRoaXMucm9vdCwgZSk7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgICB0aGlzLl9lbWl0TWF0Y2goaW5kZXgsIGUpO1xuICAgIFx0ICAgIH1cbiAgICBcdCAgICAvLyBUaGlzIHdhcyB0aGUgbGFzdCBvbmUsIGFuZCBubyBzdGF0cyB3ZXJlIG5lZWRlZFxuICAgIFx0ICAgIHJldHVyblxuICAgIFx0ICB9XG5cbiAgICBcdCAgLy8gbm93IHRlc3QgYWxsIG1hdGNoZWQgZW50cmllcyBhcyBzdGFuZC1pbnMgZm9yIHRoYXQgcGFydFxuICAgIFx0ICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgICBcdCAgcmVtYWluLnNoaWZ0KCk7XG4gICAgXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICsrKSB7XG4gICAgXHQgICAgdmFyIGUgPSBtYXRjaGVkRW50cmllc1tpXTtcbiAgICBcdCAgICB2YXIgbmV3UGF0dGVybjtcbiAgICBcdCAgICBpZiAocHJlZml4KVxuICAgIFx0ICAgICAgbmV3UGF0dGVybiA9IFtwcmVmaXgsIGVdO1xuICAgIFx0ICAgIGVsc2VcbiAgICBcdCAgICAgIG5ld1BhdHRlcm4gPSBbZV07XG4gICAgXHQgICAgdGhpcy5fcHJvY2VzcyhuZXdQYXR0ZXJuLmNvbmNhdChyZW1haW4pLCBpbmRleCwgaW5HbG9iU3Rhcik7XG4gICAgXHQgIH1cbiAgICBcdH07XG5cblxuICAgIFx0R2xvYlN5bmMucHJvdG90eXBlLl9lbWl0TWF0Y2ggPSBmdW5jdGlvbiAoaW5kZXgsIGUpIHtcbiAgICBcdCAgaWYgKGlzSWdub3JlZCh0aGlzLCBlKSlcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhlKTtcblxuICAgIFx0ICBpZiAodGhpcy5tYXJrKVxuICAgIFx0ICAgIGUgPSB0aGlzLl9tYXJrKGUpO1xuXG4gICAgXHQgIGlmICh0aGlzLmFic29sdXRlKSB7XG4gICAgXHQgICAgZSA9IGFicztcbiAgICBcdCAgfVxuXG4gICAgXHQgIGlmICh0aGlzLm1hdGNoZXNbaW5kZXhdW2VdKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIGlmICh0aGlzLm5vZGlyKSB7XG4gICAgXHQgICAgdmFyIGMgPSB0aGlzLmNhY2hlW2Fic107XG4gICAgXHQgICAgaWYgKGMgPT09ICdESVInIHx8IEFycmF5LmlzQXJyYXkoYykpXG4gICAgXHQgICAgICByZXR1cm5cbiAgICBcdCAgfVxuXG4gICAgXHQgIHRoaXMubWF0Y2hlc1tpbmRleF1bZV0gPSB0cnVlO1xuXG4gICAgXHQgIGlmICh0aGlzLnN0YXQpXG4gICAgXHQgICAgdGhpcy5fc3RhdChlKTtcbiAgICBcdH07XG5cblxuICAgIFx0R2xvYlN5bmMucHJvdG90eXBlLl9yZWFkZGlySW5HbG9iU3RhciA9IGZ1bmN0aW9uIChhYnMpIHtcbiAgICBcdCAgLy8gZm9sbG93IGFsbCBzeW1saW5rZWQgZGlyZWN0b3JpZXMgZm9yZXZlclxuICAgIFx0ICAvLyBqdXN0IHByb2NlZWQgYXMgaWYgdGhpcyBpcyBhIG5vbi1nbG9ic3RhciBzaXR1YXRpb25cbiAgICBcdCAgaWYgKHRoaXMuZm9sbG93KVxuICAgIFx0ICAgIHJldHVybiB0aGlzLl9yZWFkZGlyKGFicywgZmFsc2UpXG5cbiAgICBcdCAgdmFyIGVudHJpZXM7XG4gICAgXHQgIHZhciBsc3RhdDtcbiAgICBcdCAgdHJ5IHtcbiAgICBcdCAgICBsc3RhdCA9IHRoaXMuZnMubHN0YXRTeW5jKGFicyk7XG4gICAgXHQgIH0gY2F0Y2ggKGVyKSB7XG4gICAgXHQgICAgaWYgKGVyLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgXHQgICAgICAvLyBsc3RhdCBmYWlsZWQsIGRvZXNuJ3QgZXhpc3RcbiAgICBcdCAgICAgIHJldHVybiBudWxsXG4gICAgXHQgICAgfVxuICAgIFx0ICB9XG5cbiAgICBcdCAgdmFyIGlzU3ltID0gbHN0YXQgJiYgbHN0YXQuaXNTeW1ib2xpY0xpbmsoKTtcbiAgICBcdCAgdGhpcy5zeW1saW5rc1thYnNdID0gaXNTeW07XG5cbiAgICBcdCAgLy8gSWYgaXQncyBub3QgYSBzeW1saW5rIG9yIGEgZGlyLCB0aGVuIGl0J3MgZGVmaW5pdGVseSBhIHJlZ3VsYXIgZmlsZS5cbiAgICBcdCAgLy8gZG9uJ3QgYm90aGVyIGRvaW5nIGEgcmVhZGRpciBpbiB0aGF0IGNhc2UuXG4gICAgXHQgIGlmICghaXNTeW0gJiYgbHN0YXQgJiYgIWxzdGF0LmlzRGlyZWN0b3J5KCkpXG4gICAgXHQgICAgdGhpcy5jYWNoZVthYnNdID0gJ0ZJTEUnO1xuICAgIFx0ICBlbHNlXG4gICAgXHQgICAgZW50cmllcyA9IHRoaXMuX3JlYWRkaXIoYWJzLCBmYWxzZSk7XG5cbiAgICBcdCAgcmV0dXJuIGVudHJpZXNcbiAgICBcdH07XG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fcmVhZGRpciA9IGZ1bmN0aW9uIChhYnMsIGluR2xvYlN0YXIpIHtcblxuICAgIFx0ICBpZiAoaW5HbG9iU3RhciAmJiAhb3duUHJvcCh0aGlzLnN5bWxpbmtzLCBhYnMpKVxuICAgIFx0ICAgIHJldHVybiB0aGlzLl9yZWFkZGlySW5HbG9iU3RhcihhYnMpXG5cbiAgICBcdCAgaWYgKG93blByb3AodGhpcy5jYWNoZSwgYWJzKSkge1xuICAgIFx0ICAgIHZhciBjID0gdGhpcy5jYWNoZVthYnNdO1xuICAgIFx0ICAgIGlmICghYyB8fCBjID09PSAnRklMRScpXG4gICAgXHQgICAgICByZXR1cm4gbnVsbFxuXG4gICAgXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoYykpXG4gICAgXHQgICAgICByZXR1cm4gY1xuICAgIFx0ICB9XG5cbiAgICBcdCAgdHJ5IHtcbiAgICBcdCAgICByZXR1cm4gdGhpcy5fcmVhZGRpckVudHJpZXMoYWJzLCB0aGlzLmZzLnJlYWRkaXJTeW5jKGFicykpXG4gICAgXHQgIH0gY2F0Y2ggKGVyKSB7XG4gICAgXHQgICAgdGhpcy5fcmVhZGRpckVycm9yKGFicywgZXIpO1xuICAgIFx0ICAgIHJldHVybiBudWxsXG4gICAgXHQgIH1cbiAgICBcdH07XG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fcmVhZGRpckVudHJpZXMgPSBmdW5jdGlvbiAoYWJzLCBlbnRyaWVzKSB7XG4gICAgXHQgIC8vIGlmIHdlIGhhdmVuJ3QgYXNrZWQgdG8gc3RhdCBldmVyeXRoaW5nLCB0aGVuIGp1c3RcbiAgICBcdCAgLy8gYXNzdW1lIHRoYXQgZXZlcnl0aGluZyBpbiB0aGVyZSBleGlzdHMsIHNvIHdlIGNhbiBhdm9pZFxuICAgIFx0ICAvLyBoYXZpbmcgdG8gc3RhdCBpdCBhIHNlY29uZCB0aW1lLlxuICAgIFx0ICBpZiAoIXRoaXMubWFyayAmJiAhdGhpcy5zdGF0KSB7XG4gICAgXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSArKykge1xuICAgIFx0ICAgICAgdmFyIGUgPSBlbnRyaWVzW2ldO1xuICAgIFx0ICAgICAgaWYgKGFicyA9PT0gJy8nKVxuICAgIFx0ICAgICAgICBlID0gYWJzICsgZTtcbiAgICBcdCAgICAgIGVsc2VcbiAgICBcdCAgICAgICAgZSA9IGFicyArICcvJyArIGU7XG4gICAgXHQgICAgICB0aGlzLmNhY2hlW2VdID0gdHJ1ZTtcbiAgICBcdCAgICB9XG4gICAgXHQgIH1cblxuICAgIFx0ICB0aGlzLmNhY2hlW2Fic10gPSBlbnRyaWVzO1xuXG4gICAgXHQgIC8vIG1hcmsgYW5kIGNhY2hlIGRpci1uZXNzXG4gICAgXHQgIHJldHVybiBlbnRyaWVzXG4gICAgXHR9O1xuXG4gICAgXHRHbG9iU3luYy5wcm90b3R5cGUuX3JlYWRkaXJFcnJvciA9IGZ1bmN0aW9uIChmLCBlcikge1xuICAgIFx0ICAvLyBoYW5kbGUgZXJyb3JzLCBhbmQgY2FjaGUgdGhlIGluZm9ybWF0aW9uXG4gICAgXHQgIHN3aXRjaCAoZXIuY29kZSkge1xuICAgIFx0ICAgIGNhc2UgJ0VOT1RTVVAnOiAvLyBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL25vZGUtZ2xvYi9pc3N1ZXMvMjA1XG4gICAgXHQgICAgY2FzZSAnRU5PVERJUic6IC8vIHRvdGFsbHkgbm9ybWFsLiBtZWFucyBpdCAqZG9lcyogZXhpc3QuXG4gICAgXHQgICAgICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhmKTtcbiAgICBcdCAgICAgIHRoaXMuY2FjaGVbYWJzXSA9ICdGSUxFJztcbiAgICBcdCAgICAgIGlmIChhYnMgPT09IHRoaXMuY3dkQWJzKSB7XG4gICAgXHQgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihlci5jb2RlICsgJyBpbnZhbGlkIGN3ZCAnICsgdGhpcy5jd2QpO1xuICAgIFx0ICAgICAgICBlcnJvci5wYXRoID0gdGhpcy5jd2Q7XG4gICAgXHQgICAgICAgIGVycm9yLmNvZGUgPSBlci5jb2RlO1xuICAgIFx0ICAgICAgICB0aHJvdyBlcnJvclxuICAgIFx0ICAgICAgfVxuICAgIFx0ICAgICAgYnJlYWtcblxuICAgIFx0ICAgIGNhc2UgJ0VOT0VOVCc6IC8vIG5vdCB0ZXJyaWJseSB1bnVzdWFsXG4gICAgXHQgICAgY2FzZSAnRUxPT1AnOlxuICAgIFx0ICAgIGNhc2UgJ0VOQU1FVE9PTE9ORyc6XG4gICAgXHQgICAgY2FzZSAnVU5LTk9XTic6XG4gICAgXHQgICAgICB0aGlzLmNhY2hlW3RoaXMuX21ha2VBYnMoZildID0gZmFsc2U7XG4gICAgXHQgICAgICBicmVha1xuXG4gICAgXHQgICAgZGVmYXVsdDogLy8gc29tZSB1bnVzdWFsIGVycm9yLiAgVHJlYXQgYXMgZmFpbHVyZS5cbiAgICBcdCAgICAgIHRoaXMuY2FjaGVbdGhpcy5fbWFrZUFicyhmKV0gPSBmYWxzZTtcbiAgICBcdCAgICAgIGlmICh0aGlzLnN0cmljdClcbiAgICBcdCAgICAgICAgdGhyb3cgZXJcbiAgICBcdCAgICAgIGlmICghdGhpcy5zaWxlbnQpXG4gICAgXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsb2IgZXJyb3InLCBlcik7XG4gICAgXHQgICAgICBicmVha1xuICAgIFx0ICB9XG4gICAgXHR9O1xuXG4gICAgXHRHbG9iU3luYy5wcm90b3R5cGUuX3Byb2Nlc3NHbG9iU3RhciA9IGZ1bmN0aW9uIChwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3Rhcikge1xuXG4gICAgXHQgIHZhciBlbnRyaWVzID0gdGhpcy5fcmVhZGRpcihhYnMsIGluR2xvYlN0YXIpO1xuXG4gICAgXHQgIC8vIG5vIGVudHJpZXMgbWVhbnMgbm90IGEgZGlyLCBzbyBpdCBjYW4gbmV2ZXIgaGF2ZSBtYXRjaGVzXG4gICAgXHQgIC8vIGZvby50eHQvKiogZG9lc24ndCBtYXRjaCBmb28udHh0XG4gICAgXHQgIGlmICghZW50cmllcylcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICAvLyB0ZXN0IHdpdGhvdXQgdGhlIGdsb2JzdGFyLCBhbmQgd2l0aCBldmVyeSBjaGlsZCBib3RoIGJlbG93XG4gICAgXHQgIC8vIGFuZCByZXBsYWNpbmcgdGhlIGdsb2JzdGFyLlxuICAgIFx0ICB2YXIgcmVtYWluV2l0aG91dEdsb2JTdGFyID0gcmVtYWluLnNsaWNlKDEpO1xuICAgIFx0ICB2YXIgZ3NwcmVmID0gcHJlZml4ID8gWyBwcmVmaXggXSA6IFtdO1xuICAgIFx0ICB2YXIgbm9HbG9iU3RhciA9IGdzcHJlZi5jb25jYXQocmVtYWluV2l0aG91dEdsb2JTdGFyKTtcblxuICAgIFx0ICAvLyB0aGUgbm9HbG9iU3RhciBwYXR0ZXJuIGV4aXRzIHRoZSBpbkdsb2JTdGFyIHN0YXRlXG4gICAgXHQgIHRoaXMuX3Byb2Nlc3Mobm9HbG9iU3RhciwgaW5kZXgsIGZhbHNlKTtcblxuICAgIFx0ICB2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7XG4gICAgXHQgIHZhciBpc1N5bSA9IHRoaXMuc3ltbGlua3NbYWJzXTtcblxuICAgIFx0ICAvLyBJZiBpdCdzIGEgc3ltbGluaywgYW5kIHdlJ3JlIGluIGEgZ2xvYnN0YXIsIHRoZW4gc3RvcFxuICAgIFx0ICBpZiAoaXNTeW0gJiYgaW5HbG9iU3RhcilcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgXHQgICAgdmFyIGUgPSBlbnRyaWVzW2ldO1xuICAgIFx0ICAgIGlmIChlLmNoYXJBdCgwKSA9PT0gJy4nICYmICF0aGlzLmRvdClcbiAgICBcdCAgICAgIGNvbnRpbnVlXG5cbiAgICBcdCAgICAvLyB0aGVzZSB0d28gY2FzZXMgZW50ZXIgdGhlIGluR2xvYlN0YXIgc3RhdGVcbiAgICBcdCAgICB2YXIgaW5zdGVhZCA9IGdzcHJlZi5jb25jYXQoZW50cmllc1tpXSwgcmVtYWluV2l0aG91dEdsb2JTdGFyKTtcbiAgICBcdCAgICB0aGlzLl9wcm9jZXNzKGluc3RlYWQsIGluZGV4LCB0cnVlKTtcblxuICAgIFx0ICAgIHZhciBiZWxvdyA9IGdzcHJlZi5jb25jYXQoZW50cmllc1tpXSwgcmVtYWluKTtcbiAgICBcdCAgICB0aGlzLl9wcm9jZXNzKGJlbG93LCBpbmRleCwgdHJ1ZSk7XG4gICAgXHQgIH1cbiAgICBcdH07XG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fcHJvY2Vzc1NpbXBsZSA9IGZ1bmN0aW9uIChwcmVmaXgsIGluZGV4KSB7XG4gICAgXHQgIC8vIFhYWCByZXZpZXcgdGhpcy4gIFNob3VsZG4ndCBpdCBiZSBkb2luZyB0aGUgbW91bnRpbmcgZXRjXG4gICAgXHQgIC8vIGJlZm9yZSBkb2luZyBzdGF0PyAga2luZGEgd2VpcmQ/XG4gICAgXHQgIHZhciBleGlzdHMgPSB0aGlzLl9zdGF0KHByZWZpeCk7XG5cbiAgICBcdCAgaWYgKCF0aGlzLm1hdGNoZXNbaW5kZXhdKVxuICAgIFx0ICAgIHRoaXMubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgXHQgIC8vIElmIGl0IGRvZXNuJ3QgZXhpc3QsIHRoZW4ganVzdCBtYXJrIHRoZSBsYWNrIG9mIHJlc3VsdHNcbiAgICBcdCAgaWYgKCFleGlzdHMpXG4gICAgXHQgICAgcmV0dXJuXG5cbiAgICBcdCAgaWYgKHByZWZpeCAmJiBpc0Fic29sdXRlKHByZWZpeCkgJiYgIXRoaXMubm9tb3VudCkge1xuICAgIFx0ICAgIHZhciB0cmFpbCA9IC9bXFwvXFxcXF0kLy50ZXN0KHByZWZpeCk7XG4gICAgXHQgICAgaWYgKHByZWZpeC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIFx0ICAgICAgcHJlZml4ID0gcGF0aC5qb2luKHRoaXMucm9vdCwgcHJlZml4KTtcbiAgICBcdCAgICB9IGVsc2Uge1xuICAgIFx0ICAgICAgcHJlZml4ID0gcGF0aC5yZXNvbHZlKHRoaXMucm9vdCwgcHJlZml4KTtcbiAgICBcdCAgICAgIGlmICh0cmFpbClcbiAgICBcdCAgICAgICAgcHJlZml4ICs9ICcvJztcbiAgICBcdCAgICB9XG4gICAgXHQgIH1cblxuICAgIFx0ICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJylcbiAgICBcdCAgICBwcmVmaXggPSBwcmVmaXgucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuXG4gICAgXHQgIC8vIE1hcmsgdGhpcyBhcyBhIG1hdGNoXG4gICAgXHQgIHRoaXMuX2VtaXRNYXRjaChpbmRleCwgcHJlZml4KTtcbiAgICBcdH07XG5cbiAgICBcdC8vIFJldHVybnMgZWl0aGVyICdESVInLCAnRklMRScsIG9yIGZhbHNlXG4gICAgXHRHbG9iU3luYy5wcm90b3R5cGUuX3N0YXQgPSBmdW5jdGlvbiAoZikge1xuICAgIFx0ICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhmKTtcbiAgICBcdCAgdmFyIG5lZWREaXIgPSBmLnNsaWNlKC0xKSA9PT0gJy8nO1xuXG4gICAgXHQgIGlmIChmLmxlbmd0aCA+IHRoaXMubWF4TGVuZ3RoKVxuICAgIFx0ICAgIHJldHVybiBmYWxzZVxuXG4gICAgXHQgIGlmICghdGhpcy5zdGF0ICYmIG93blByb3AodGhpcy5jYWNoZSwgYWJzKSkge1xuICAgIFx0ICAgIHZhciBjID0gdGhpcy5jYWNoZVthYnNdO1xuXG4gICAgXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoYykpXG4gICAgXHQgICAgICBjID0gJ0RJUic7XG5cbiAgICBcdCAgICAvLyBJdCBleGlzdHMsIGJ1dCBtYXliZSBub3QgaG93IHdlIG5lZWQgaXRcbiAgICBcdCAgICBpZiAoIW5lZWREaXIgfHwgYyA9PT0gJ0RJUicpXG4gICAgXHQgICAgICByZXR1cm4gY1xuXG4gICAgXHQgICAgaWYgKG5lZWREaXIgJiYgYyA9PT0gJ0ZJTEUnKVxuICAgIFx0ICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICBcdCAgICAvLyBvdGhlcndpc2Ugd2UgaGF2ZSB0byBzdGF0LCBiZWNhdXNlIG1heWJlIGM9dHJ1ZVxuICAgIFx0ICAgIC8vIGlmIHdlIGtub3cgaXQgZXhpc3RzLCBidXQgbm90IHdoYXQgaXQgaXMuXG4gICAgXHQgIH1cbiAgICBcdCAgdmFyIHN0YXQgPSB0aGlzLnN0YXRDYWNoZVthYnNdO1xuICAgIFx0ICBpZiAoIXN0YXQpIHtcbiAgICBcdCAgICB2YXIgbHN0YXQ7XG4gICAgXHQgICAgdHJ5IHtcbiAgICBcdCAgICAgIGxzdGF0ID0gdGhpcy5mcy5sc3RhdFN5bmMoYWJzKTtcbiAgICBcdCAgICB9IGNhdGNoIChlcikge1xuICAgIFx0ICAgICAgaWYgKGVyICYmIChlci5jb2RlID09PSAnRU5PRU5UJyB8fCBlci5jb2RlID09PSAnRU5PVERJUicpKSB7XG4gICAgXHQgICAgICAgIHRoaXMuc3RhdENhY2hlW2Fic10gPSBmYWxzZTtcbiAgICBcdCAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfVxuXG4gICAgXHQgICAgaWYgKGxzdGF0ICYmIGxzdGF0LmlzU3ltYm9saWNMaW5rKCkpIHtcbiAgICBcdCAgICAgIHRyeSB7XG4gICAgXHQgICAgICAgIHN0YXQgPSB0aGlzLmZzLnN0YXRTeW5jKGFicyk7XG4gICAgXHQgICAgICB9IGNhdGNoIChlcikge1xuICAgIFx0ICAgICAgICBzdGF0ID0gbHN0YXQ7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfSBlbHNlIHtcbiAgICBcdCAgICAgIHN0YXQgPSBsc3RhdDtcbiAgICBcdCAgICB9XG4gICAgXHQgIH1cblxuICAgIFx0ICB0aGlzLnN0YXRDYWNoZVthYnNdID0gc3RhdDtcblxuICAgIFx0ICB2YXIgYyA9IHRydWU7XG4gICAgXHQgIGlmIChzdGF0KVxuICAgIFx0ICAgIGMgPSBzdGF0LmlzRGlyZWN0b3J5KCkgPyAnRElSJyA6ICdGSUxFJztcblxuICAgIFx0ICB0aGlzLmNhY2hlW2Fic10gPSB0aGlzLmNhY2hlW2Fic10gfHwgYztcblxuICAgIFx0ICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgXHQgICAgcmV0dXJuIGZhbHNlXG5cbiAgICBcdCAgcmV0dXJuIGNcbiAgICBcdH07XG5cbiAgICBcdEdsb2JTeW5jLnByb3RvdHlwZS5fbWFyayA9IGZ1bmN0aW9uIChwKSB7XG4gICAgXHQgIHJldHVybiBjb21tb24kMS5tYXJrKHRoaXMsIHApXG4gICAgXHR9O1xuXG4gICAgXHRHbG9iU3luYy5wcm90b3R5cGUuX21ha2VBYnMgPSBmdW5jdGlvbiAoZikge1xuICAgIFx0ICByZXR1cm4gY29tbW9uJDEubWFrZUFicyh0aGlzLCBmKVxuICAgIFx0fTtcbiAgICBcdHJldHVybiBzeW5jO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgYSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHdyYXBwZWQgY2FsbGJhY2tcbiAgICAvLyBUaGUgd3JhcHBlciBmdW5jdGlvbiBzaG91bGQgZG8gc29tZSBzdHVmZiwgYW5kIHJldHVybiBhXG4gICAgLy8gcHJlc3VtYWJseSBkaWZmZXJlbnQgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgLy8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgb3duIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkLCBzbyB0aGF0XG4gICAgLy8gZGVjb3JhdGlvbnMgYW5kIHN1Y2ggYXJlIG5vdCBsb3N0IGFsb25nIHRoZSB3YXkuXG4gICAgdmFyIHdyYXBweV8xID0gd3JhcHB5JDI7XG4gICAgZnVuY3Rpb24gd3JhcHB5JDIgKGZuLCBjYikge1xuICAgICAgaWYgKGZuICYmIGNiKSByZXR1cm4gd3JhcHB5JDIoZm4pKGNiKVxuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZWVkIHdyYXBwZXIgZnVuY3Rpb24nKVxuXG4gICAgICBPYmplY3Qua2V5cyhmbikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICB3cmFwcGVyW2tdID0gZm5ba107XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHdyYXBwZXJcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJldCA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB2YXIgY2IgPSBhcmdzW2FyZ3MubGVuZ3RoLTFdO1xuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gJ2Z1bmN0aW9uJyAmJiByZXQgIT09IGNiKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoY2IpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgIHJldFtrXSA9IGNiW2tdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb25jZUV4cG9ydHMgPSB7fTtcbiAgICB2YXIgb25jZSQyID0ge1xuICAgICAgZ2V0IGV4cG9ydHMoKXsgcmV0dXJuIG9uY2VFeHBvcnRzOyB9LFxuICAgICAgc2V0IGV4cG9ydHModil7IG9uY2VFeHBvcnRzID0gdjsgfSxcbiAgICB9O1xuXG4gICAgdmFyIHdyYXBweSQxID0gd3JhcHB5XzE7XG4gICAgb25jZSQyLmV4cG9ydHMgPSB3cmFwcHkkMShvbmNlJDEpO1xuICAgIG9uY2VFeHBvcnRzLnN0cmljdCA9IHdyYXBweSQxKG9uY2VTdHJpY3QpO1xuXG4gICAgb25jZSQxLnByb3RvID0gb25jZSQxKGZ1bmN0aW9uICgpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdW5jdGlvbi5wcm90b3R5cGUsICdvbmNlJywge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBvbmNlJDEodGhpcylcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2VTdHJpY3QnLCB7XG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG9uY2VTdHJpY3QodGhpcylcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uY2UkMSAoZm4pIHtcbiAgICAgIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZi5jYWxsZWQpIHJldHVybiBmLnZhbHVlXG4gICAgICAgIGYuY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGYudmFsdWUgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9O1xuICAgICAgZi5jYWxsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25jZVN0cmljdCAoZm4pIHtcbiAgICAgIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZi5jYWxsZWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGYub25jZUVycm9yKVxuICAgICAgICBmLmNhbGxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfTtcbiAgICAgIHZhciBuYW1lID0gZm4ubmFtZSB8fCAnRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYCc7XG4gICAgICBmLm9uY2VFcnJvciA9IG5hbWUgKyBcIiBzaG91bGRuJ3QgYmUgY2FsbGVkIG1vcmUgdGhhbiBvbmNlXCI7XG4gICAgICBmLmNhbGxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZcbiAgICB9XG5cbiAgICB2YXIgd3JhcHB5ID0gd3JhcHB5XzE7XG4gICAgdmFyIHJlcXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBvbmNlID0gb25jZUV4cG9ydHM7XG5cbiAgICB2YXIgaW5mbGlnaHRfMSA9IHdyYXBweShpbmZsaWdodCk7XG5cbiAgICBmdW5jdGlvbiBpbmZsaWdodCAoa2V5LCBjYikge1xuICAgICAgaWYgKHJlcXNba2V5XSkge1xuICAgICAgICByZXFzW2tleV0ucHVzaChjYik7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXFzW2tleV0gPSBbY2JdO1xuICAgICAgICByZXR1cm4gbWFrZXJlcyhrZXkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZXJlcyAoa2V5KSB7XG4gICAgICByZXR1cm4gb25jZShmdW5jdGlvbiBSRVMgKCkge1xuICAgICAgICB2YXIgY2JzID0gcmVxc1trZXldO1xuICAgICAgICB2YXIgbGVuID0gY2JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMpO1xuXG4gICAgICAgIC8vIFhYWCBJdCdzIHNvbWV3aGF0IGFtYmlndW91cyB3aGV0aGVyIGEgbmV3IGNhbGxiYWNrIGFkZGVkIGluIHRoaXNcbiAgICAgICAgLy8gcGFzcyBzaG91bGQgYmUgcXVldWVkIGZvciBsYXRlciBleGVjdXRpb24gaWYgc29tZXRoaW5nIGluIHRoZVxuICAgICAgICAvLyBsaXN0IG9mIGNhbGxiYWNrcyB0aHJvd3MsIG9yIGlmIGl0IHNob3VsZCBqdXN0IGJlIGRpc2NhcmRlZC5cbiAgICAgICAgLy8gSG93ZXZlciwgaXQncyBzdWNoIGFuIGVkZ2UgY2FzZSB0aGF0IGl0IGhhcmRseSBtYXR0ZXJzLCBhbmQgZWl0aGVyXG4gICAgICAgIC8vIGNob2ljZSBpcyBsaWtlbHkgYXMgc3VycHJpc2luZyBhcyB0aGUgb3RoZXIuXG4gICAgICAgIC8vIEFzIGl0IGhhcHBlbnMsIHdlIGRvIGdvIGFoZWFkIGFuZCBzY2hlZHVsZSBpdCBmb3IgbGF0ZXIgZXhlY3V0aW9uLlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNic1tpXS5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKGNicy5sZW5ndGggPiBsZW4pIHtcbiAgICAgICAgICAgIC8vIGFkZGVkIG1vcmUgaW4gdGhlIGludGVyaW0uXG4gICAgICAgICAgICAvLyBkZS16YWxnbywganVzdCBpbiBjYXNlLCBidXQgZG9uJ3QgY2FsbCBhZ2Fpbi5cbiAgICAgICAgICAgIGNicy5zcGxpY2UoMCwgbGVuKTtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBSRVMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHJlcXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpY2UgKGFyZ3MpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcnJheSA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhcnJheVtpXSA9IGFyZ3NbaV07XG4gICAgICByZXR1cm4gYXJyYXlcbiAgICB9XG5cbiAgICB2YXIgZ2xvYl8xO1xuICAgIHZhciBoYXNSZXF1aXJlZEdsb2I7XG5cbiAgICBmdW5jdGlvbiByZXF1aXJlR2xvYiAoKSB7XG4gICAgXHRpZiAoaGFzUmVxdWlyZWRHbG9iKSByZXR1cm4gZ2xvYl8xO1xuICAgIFx0aGFzUmVxdWlyZWRHbG9iID0gMTtcbiAgICBcdC8vIEFwcHJvYWNoOlxuICAgIFx0Ly9cbiAgICBcdC8vIDEuIEdldCB0aGUgbWluaW1hdGNoIHNldFxuICAgIFx0Ly8gMi4gRm9yIGVhY2ggcGF0dGVybiBpbiB0aGUgc2V0LCBQUk9DRVNTKHBhdHRlcm4sIGZhbHNlKVxuICAgIFx0Ly8gMy4gU3RvcmUgbWF0Y2hlcyBwZXItc2V0LCB0aGVuIHVuaXEgdGhlbVxuICAgIFx0Ly9cbiAgICBcdC8vIFBST0NFU1MocGF0dGVybiwgaW5HbG9iU3RhcilcbiAgICBcdC8vIEdldCB0aGUgZmlyc3QgW25dIGl0ZW1zIGZyb20gcGF0dGVybiB0aGF0IGFyZSBhbGwgc3RyaW5nc1xuICAgIFx0Ly8gSm9pbiB0aGVzZSB0b2dldGhlci4gIFRoaXMgaXMgUFJFRklYLlxuICAgIFx0Ly8gICBJZiB0aGVyZSBpcyBubyBtb3JlIHJlbWFpbmluZywgdGhlbiBzdGF0KFBSRUZJWCkgYW5kXG4gICAgXHQvLyAgIGFkZCB0byBtYXRjaGVzIGlmIGl0IHN1Y2NlZWRzLiAgRU5ELlxuICAgIFx0Ly9cbiAgICBcdC8vIElmIGluR2xvYlN0YXIgYW5kIFBSRUZJWCBpcyBzeW1saW5rIGFuZCBwb2ludHMgdG8gZGlyXG4gICAgXHQvLyAgIHNldCBFTlRSSUVTID0gW11cbiAgICBcdC8vIGVsc2UgcmVhZGRpcihQUkVGSVgpIGFzIEVOVFJJRVNcbiAgICBcdC8vICAgSWYgZmFpbCwgRU5EXG4gICAgXHQvL1xuICAgIFx0Ly8gd2l0aCBFTlRSSUVTXG4gICAgXHQvLyAgIElmIHBhdHRlcm5bbl0gaXMgR0xPQlNUQVJcbiAgICBcdC8vICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGdsb2JzdGFyIG1hdGNoIGlzIGVtcHR5XG4gICAgXHQvLyAgICAgLy8gYnkgcHJ1bmluZyBpdCBvdXQsIGFuZCB0ZXN0aW5nIHRoZSByZXN1bHRpbmcgcGF0dGVyblxuICAgIFx0Ly8gICAgIFBST0NFU1MocGF0dGVyblswLi5uXSArIHBhdHRlcm5bbisxIC4uICRdLCBmYWxzZSlcbiAgICBcdC8vICAgICAvLyBoYW5kbGUgb3RoZXIgY2FzZXMuXG4gICAgXHQvLyAgICAgZm9yIEVOVFJZIGluIEVOVFJJRVMgKG5vdCBkb3RmaWxlcylcbiAgICBcdC8vICAgICAgIC8vIGF0dGFjaCBnbG9ic3RhciArIHRhaWwgb250byB0aGUgZW50cnlcbiAgICBcdC8vICAgICAgIC8vIE1hcmsgdGhhdCB0aGlzIGVudHJ5IGlzIGEgZ2xvYnN0YXIgbWF0Y2hcbiAgICBcdC8vICAgICAgIFBST0NFU1MocGF0dGVyblswLi5uXSArIEVOVFJZICsgcGF0dGVybltuIC4uICRdLCB0cnVlKVxuICAgIFx0Ly9cbiAgICBcdC8vICAgZWxzZSAvLyBub3QgZ2xvYnN0YXJcbiAgICBcdC8vICAgICBmb3IgRU5UUlkgaW4gRU5UUklFUyAobm90IGRvdGZpbGVzLCB1bmxlc3MgcGF0dGVybltuXSBpcyBkb3QpXG4gICAgXHQvLyAgICAgICBUZXN0IEVOVFJZIGFnYWluc3QgcGF0dGVybltuXVxuICAgIFx0Ly8gICAgICAgSWYgZmFpbHMsIGNvbnRpbnVlXG4gICAgXHQvLyAgICAgICBJZiBwYXNzZXMsIFBST0NFU1MocGF0dGVyblswLi5uXSArIGl0ZW0gKyBwYXR0ZXJuW24rMSAuLiAkXSlcbiAgICBcdC8vXG4gICAgXHQvLyBDYXZlYXQ6XG4gICAgXHQvLyAgIENhY2hlIGFsbCBzdGF0cyBhbmQgcmVhZGRpcnMgcmVzdWx0cyB0byBtaW5pbWl6ZSBzeXNjYWxsLiAgU2luY2UgYWxsXG4gICAgXHQvLyAgIHdlIGV2ZXIgY2FyZSBhYm91dCBpcyBleGlzdGVuY2UgYW5kIGRpcmVjdG9yeS1uZXNzLCB3ZSBjYW4ganVzdCBrZWVwXG4gICAgXHQvLyAgIGB0cnVlYCBmb3IgZmlsZXMsIGFuZCBbY2hpbGRyZW4sLi4uXSBmb3IgZGlyZWN0b3JpZXMsIG9yIGBmYWxzZWAgZm9yXG4gICAgXHQvLyAgIHRoaW5ncyB0aGF0IGRvbid0IGV4aXN0LlxuXG4gICAgXHRnbG9iXzEgPSBnbG9iO1xuXG4gICAgXHR2YXIgcnAgPSBmc19yZWFscGF0aDtcbiAgICBcdHZhciBtaW5pbWF0Y2ggPSBtaW5pbWF0Y2hfMTtcbiAgICBcdG1pbmltYXRjaC5NaW5pbWF0Y2g7XG4gICAgXHR2YXIgaW5oZXJpdHMgPSBpbmhlcml0c19icm93c2VyRXhwb3J0cztcbiAgICBcdHZhciBFRSA9IHJlcXVpcmUkJDNfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50RW1pdHRlcjtcbiAgICBcdHZhciBwYXRoID0gcmVxdWlyZSQkNF9fZGVmYXVsdFtcImRlZmF1bHRcIl07XG4gICAgXHR2YXIgYXNzZXJ0ID0gcmVxdWlyZSQkNV9fZGVmYXVsdFtcImRlZmF1bHRcIl07XG4gICAgXHR2YXIgaXNBYnNvbHV0ZSA9IHJlcXVpcmUkJDRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmlzQWJzb2x1dGU7XG4gICAgXHR2YXIgZ2xvYlN5bmMgPSByZXF1aXJlU3luYygpO1xuICAgIFx0dmFyIGNvbW1vbiQxID0gY29tbW9uO1xuICAgIFx0dmFyIHNldG9wdHMgPSBjb21tb24kMS5zZXRvcHRzO1xuICAgIFx0dmFyIG93blByb3AgPSBjb21tb24kMS5vd25Qcm9wO1xuICAgIFx0dmFyIGluZmxpZ2h0ID0gaW5mbGlnaHRfMTtcbiAgICBcdHZhciBjaGlsZHJlbklnbm9yZWQgPSBjb21tb24kMS5jaGlsZHJlbklnbm9yZWQ7XG4gICAgXHR2YXIgaXNJZ25vcmVkID0gY29tbW9uJDEuaXNJZ25vcmVkO1xuXG4gICAgXHR2YXIgb25jZSA9IG9uY2VFeHBvcnRzO1xuXG4gICAgXHRmdW5jdGlvbiBnbG9iIChwYXR0ZXJuLCBvcHRpb25zLCBjYikge1xuICAgIFx0ICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IHt9O1xuICAgIFx0ICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblxuICAgIFx0ICBpZiAob3B0aW9ucy5zeW5jKSB7XG4gICAgXHQgICAgaWYgKGNiKVxuICAgIFx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgcHJvdmlkZWQgdG8gc3luYyBnbG9iJylcbiAgICBcdCAgICByZXR1cm4gZ2xvYlN5bmMocGF0dGVybiwgb3B0aW9ucylcbiAgICBcdCAgfVxuXG4gICAgXHQgIHJldHVybiBuZXcgR2xvYihwYXR0ZXJuLCBvcHRpb25zLCBjYilcbiAgICBcdH1cblxuICAgIFx0Z2xvYi5zeW5jID0gZ2xvYlN5bmM7XG4gICAgXHR2YXIgR2xvYlN5bmMgPSBnbG9iLkdsb2JTeW5jID0gZ2xvYlN5bmMuR2xvYlN5bmM7XG5cbiAgICBcdC8vIG9sZCBhcGkgc3VyZmFjZVxuICAgIFx0Z2xvYi5nbG9iID0gZ2xvYjtcblxuICAgIFx0ZnVuY3Rpb24gZXh0ZW5kIChvcmlnaW4sIGFkZCkge1xuICAgIFx0ICBpZiAoYWRkID09PSBudWxsIHx8IHR5cGVvZiBhZGQgIT09ICdvYmplY3QnKSB7XG4gICAgXHQgICAgcmV0dXJuIG9yaWdpblxuICAgIFx0ICB9XG5cbiAgICBcdCAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICAgIFx0ICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIFx0ICB3aGlsZSAoaS0tKSB7XG4gICAgXHQgICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICAgIFx0ICB9XG4gICAgXHQgIHJldHVybiBvcmlnaW5cbiAgICBcdH1cblxuICAgIFx0Z2xvYi5oYXNNYWdpYyA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBvcHRpb25zXykge1xuICAgIFx0ICB2YXIgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9uc18pO1xuICAgIFx0ICBvcHRpb25zLm5vcHJvY2VzcyA9IHRydWU7XG5cbiAgICBcdCAgdmFyIGcgPSBuZXcgR2xvYihwYXR0ZXJuLCBvcHRpb25zKTtcbiAgICBcdCAgdmFyIHNldCA9IGcubWluaW1hdGNoLnNldDtcblxuICAgIFx0ICBpZiAoIXBhdHRlcm4pXG4gICAgXHQgICAgcmV0dXJuIGZhbHNlXG5cbiAgICBcdCAgaWYgKHNldC5sZW5ndGggPiAxKVxuICAgIFx0ICAgIHJldHVybiB0cnVlXG5cbiAgICBcdCAgZm9yICh2YXIgaiA9IDA7IGogPCBzZXRbMF0ubGVuZ3RoOyBqKyspIHtcbiAgICBcdCAgICBpZiAodHlwZW9mIHNldFswXVtqXSAhPT0gJ3N0cmluZycpXG4gICAgXHQgICAgICByZXR1cm4gdHJ1ZVxuICAgIFx0ICB9XG5cbiAgICBcdCAgcmV0dXJuIGZhbHNlXG4gICAgXHR9O1xuXG4gICAgXHRnbG9iLkdsb2IgPSBHbG9iO1xuICAgIFx0aW5oZXJpdHMoR2xvYiwgRUUpO1xuICAgIFx0ZnVuY3Rpb24gR2xvYiAocGF0dGVybiwgb3B0aW9ucywgY2IpIHtcbiAgICBcdCAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgXHQgICAgY2IgPSBvcHRpb25zO1xuICAgIFx0ICAgIG9wdGlvbnMgPSBudWxsO1xuICAgIFx0ICB9XG5cbiAgICBcdCAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zeW5jKSB7XG4gICAgXHQgICAgaWYgKGNiKVxuICAgIFx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgcHJvdmlkZWQgdG8gc3luYyBnbG9iJylcbiAgICBcdCAgICByZXR1cm4gbmV3IEdsb2JTeW5jKHBhdHRlcm4sIG9wdGlvbnMpXG4gICAgXHQgIH1cblxuICAgIFx0ICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR2xvYikpXG4gICAgXHQgICAgcmV0dXJuIG5ldyBHbG9iKHBhdHRlcm4sIG9wdGlvbnMsIGNiKVxuXG4gICAgXHQgIHNldG9wdHModGhpcywgcGF0dGVybiwgb3B0aW9ucyk7XG4gICAgXHQgIHRoaXMuX2RpZFJlYWxQYXRoID0gZmFsc2U7XG5cbiAgICBcdCAgLy8gcHJvY2VzcyBlYWNoIHBhdHRlcm4gaW4gdGhlIG1pbmltYXRjaCBzZXRcbiAgICBcdCAgdmFyIG4gPSB0aGlzLm1pbmltYXRjaC5zZXQubGVuZ3RoO1xuXG4gICAgXHQgIC8vIFRoZSBtYXRjaGVzIGFyZSBzdG9yZWQgYXMgezxmaWxlbmFtZT46IHRydWUsLi4ufSBzbyB0aGF0XG4gICAgXHQgIC8vIGR1cGxpY2F0ZXMgYXJlIGF1dG9tYWdpY2FsbHkgcHJ1bmVkLlxuICAgIFx0ICAvLyBMYXRlciwgd2UgZG8gYW4gT2JqZWN0LmtleXMoKSBvbiB0aGVzZS5cbiAgICBcdCAgLy8gS2VlcCB0aGVtIGFzIGEgbGlzdCBzbyB3ZSBjYW4gZmlsbCBpbiB3aGVuIG5vbnVsbCBpcyBzZXQuXG4gICAgXHQgIHRoaXMubWF0Y2hlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIFx0ICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgXHQgICAgY2IgPSBvbmNlKGNiKTtcbiAgICBcdCAgICB0aGlzLm9uKCdlcnJvcicsIGNiKTtcbiAgICBcdCAgICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbiAobWF0Y2hlcykge1xuICAgIFx0ICAgICAgY2IobnVsbCwgbWF0Y2hlcyk7XG4gICAgXHQgICAgfSk7XG4gICAgXHQgIH1cblxuICAgIFx0ICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXHQgIHRoaXMuX3Byb2Nlc3NpbmcgPSAwO1xuXG4gICAgXHQgIHRoaXMuX2VtaXRRdWV1ZSA9IFtdO1xuICAgIFx0ICB0aGlzLl9wcm9jZXNzUXVldWUgPSBbXTtcbiAgICBcdCAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgIFx0ICBpZiAodGhpcy5ub3Byb2Nlc3MpXG4gICAgXHQgICAgcmV0dXJuIHRoaXNcblxuICAgIFx0ICBpZiAobiA9PT0gMClcbiAgICBcdCAgICByZXR1cm4gZG9uZSgpXG5cbiAgICBcdCAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIFx0ICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkgKyspIHtcbiAgICBcdCAgICB0aGlzLl9wcm9jZXNzKHRoaXMubWluaW1hdGNoLnNldFtpXSwgaSwgZmFsc2UsIGRvbmUpO1xuICAgIFx0ICB9XG4gICAgXHQgIHN5bmMgPSBmYWxzZTtcblxuICAgIFx0ICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICBcdCAgICAtLXNlbGYuX3Byb2Nlc3Npbmc7XG4gICAgXHQgICAgaWYgKHNlbGYuX3Byb2Nlc3NpbmcgPD0gMCkge1xuICAgIFx0ICAgICAgaWYgKHN5bmMpIHtcbiAgICBcdCAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgXHQgICAgICAgICAgc2VsZi5fZmluaXNoKCk7XG4gICAgXHQgICAgICAgIH0pO1xuICAgIFx0ICAgICAgfSBlbHNlIHtcbiAgICBcdCAgICAgICAgc2VsZi5fZmluaXNoKCk7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfVxuICAgIFx0ICB9XG4gICAgXHR9XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgXHQgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgR2xvYik7XG4gICAgXHQgIGlmICh0aGlzLmFib3J0ZWQpXG4gICAgXHQgICAgcmV0dXJuXG5cbiAgICBcdCAgaWYgKHRoaXMucmVhbHBhdGggJiYgIXRoaXMuX2RpZFJlYWxwYXRoKVxuICAgIFx0ICAgIHJldHVybiB0aGlzLl9yZWFscGF0aCgpXG5cbiAgICBcdCAgY29tbW9uJDEuZmluaXNoKHRoaXMpO1xuICAgIFx0ICB0aGlzLmVtaXQoJ2VuZCcsIHRoaXMuZm91bmQpO1xuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUuX3JlYWxwYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIFx0ICBpZiAodGhpcy5fZGlkUmVhbHBhdGgpXG4gICAgXHQgICAgcmV0dXJuXG5cbiAgICBcdCAgdGhpcy5fZGlkUmVhbHBhdGggPSB0cnVlO1xuXG4gICAgXHQgIHZhciBuID0gdGhpcy5tYXRjaGVzLmxlbmd0aDtcbiAgICBcdCAgaWYgKG4gPT09IDApXG4gICAgXHQgICAgcmV0dXJuIHRoaXMuX2ZpbmlzaCgpXG5cbiAgICBcdCAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWF0Y2hlcy5sZW5ndGg7IGkrKylcbiAgICBcdCAgICB0aGlzLl9yZWFscGF0aFNldChpLCBuZXh0KTtcblxuICAgIFx0ICBmdW5jdGlvbiBuZXh0ICgpIHtcbiAgICBcdCAgICBpZiAoLS1uID09PSAwKVxuICAgIFx0ICAgICAgc2VsZi5fZmluaXNoKCk7XG4gICAgXHQgIH1cbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9yZWFscGF0aFNldCA9IGZ1bmN0aW9uIChpbmRleCwgY2IpIHtcbiAgICBcdCAgdmFyIG1hdGNoc2V0ID0gdGhpcy5tYXRjaGVzW2luZGV4XTtcbiAgICBcdCAgaWYgKCFtYXRjaHNldClcbiAgICBcdCAgICByZXR1cm4gY2IoKVxuXG4gICAgXHQgIHZhciBmb3VuZCA9IE9iamVjdC5rZXlzKG1hdGNoc2V0KTtcbiAgICBcdCAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFx0ICB2YXIgbiA9IGZvdW5kLmxlbmd0aDtcblxuICAgIFx0ICBpZiAobiA9PT0gMClcbiAgICBcdCAgICByZXR1cm4gY2IoKVxuXG4gICAgXHQgIHZhciBzZXQgPSB0aGlzLm1hdGNoZXNbaW5kZXhdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBcdCAgZm91bmQuZm9yRWFjaChmdW5jdGlvbiAocCwgaSkge1xuICAgIFx0ICAgIC8vIElmIHRoZXJlJ3MgYSBwcm9ibGVtIHdpdGggdGhlIHN0YXQsIHRoZW4gaXQgbWVhbnMgdGhhdFxuICAgIFx0ICAgIC8vIG9uZSBvciBtb3JlIG9mIHRoZSBsaW5rcyBpbiB0aGUgcmVhbHBhdGggY291bGRuJ3QgYmVcbiAgICBcdCAgICAvLyByZXNvbHZlZC4gIGp1c3QgcmV0dXJuIHRoZSBhYnMgdmFsdWUgaW4gdGhhdCBjYXNlLlxuICAgIFx0ICAgIHAgPSBzZWxmLl9tYWtlQWJzKHApO1xuICAgIFx0ICAgIHJwLnJlYWxwYXRoKHAsIHNlbGYucmVhbHBhdGhDYWNoZSwgZnVuY3Rpb24gKGVyLCByZWFsKSB7XG4gICAgXHQgICAgICBpZiAoIWVyKVxuICAgIFx0ICAgICAgICBzZXRbcmVhbF0gPSB0cnVlO1xuICAgIFx0ICAgICAgZWxzZSBpZiAoZXIuc3lzY2FsbCA9PT0gJ3N0YXQnKVxuICAgIFx0ICAgICAgICBzZXRbcF0gPSB0cnVlO1xuICAgIFx0ICAgICAgZWxzZVxuICAgIFx0ICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXIpOyAvLyBzcnNseSB3dGYgcmlnaHQgaGVyZVxuXG4gICAgXHQgICAgICBpZiAoLS1uID09PSAwKSB7XG4gICAgXHQgICAgICAgIHNlbGYubWF0Y2hlc1tpbmRleF0gPSBzZXQ7XG4gICAgXHQgICAgICAgIGNiKCk7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfSk7XG4gICAgXHQgIH0pO1xuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUuX21hcmsgPSBmdW5jdGlvbiAocCkge1xuICAgIFx0ICByZXR1cm4gY29tbW9uJDEubWFyayh0aGlzLCBwKVxuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUuX21ha2VBYnMgPSBmdW5jdGlvbiAoZikge1xuICAgIFx0ICByZXR1cm4gY29tbW9uJDEubWFrZUFicyh0aGlzLCBmKVxuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgXHQgIHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgXHQgIHRoaXMuZW1pdCgnYWJvcnQnKTtcbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIFx0ICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgXHQgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgIFx0ICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgICBcdCAgfVxuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIFx0ICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICBcdCAgICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xuICAgIFx0ICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgXHQgICAgaWYgKHRoaXMuX2VtaXRRdWV1ZS5sZW5ndGgpIHtcbiAgICBcdCAgICAgIHZhciBlcSA9IHRoaXMuX2VtaXRRdWV1ZS5zbGljZSgwKTtcbiAgICBcdCAgICAgIHRoaXMuX2VtaXRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIFx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlcS5sZW5ndGg7IGkgKyspIHtcbiAgICBcdCAgICAgICAgdmFyIGUgPSBlcVtpXTtcbiAgICBcdCAgICAgICAgdGhpcy5fZW1pdE1hdGNoKGVbMF0sIGVbMV0pO1xuICAgIFx0ICAgICAgfVxuICAgIFx0ICAgIH1cbiAgICBcdCAgICBpZiAodGhpcy5fcHJvY2Vzc1F1ZXVlLmxlbmd0aCkge1xuICAgIFx0ICAgICAgdmFyIHBxID0gdGhpcy5fcHJvY2Vzc1F1ZXVlLnNsaWNlKDApO1xuICAgIFx0ICAgICAgdGhpcy5fcHJvY2Vzc1F1ZXVlLmxlbmd0aCA9IDA7XG4gICAgXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBxLmxlbmd0aDsgaSArKykge1xuICAgIFx0ICAgICAgICB2YXIgcCA9IHBxW2ldO1xuICAgIFx0ICAgICAgICB0aGlzLl9wcm9jZXNzaW5nLS07XG4gICAgXHQgICAgICAgIHRoaXMuX3Byb2Nlc3MocFswXSwgcFsxXSwgcFsyXSwgcFszXSk7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgfVxuICAgIFx0ICB9XG4gICAgXHR9O1xuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBpbmRleCwgaW5HbG9iU3RhciwgY2IpIHtcbiAgICBcdCAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBHbG9iKTtcbiAgICBcdCAgYXNzZXJ0KHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyk7XG5cbiAgICBcdCAgaWYgKHRoaXMuYWJvcnRlZClcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICB0aGlzLl9wcm9jZXNzaW5nKys7XG4gICAgXHQgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgIFx0ICAgIHRoaXMuX3Byb2Nlc3NRdWV1ZS5wdXNoKFtwYXR0ZXJuLCBpbmRleCwgaW5HbG9iU3RhciwgY2JdKTtcbiAgICBcdCAgICByZXR1cm5cbiAgICBcdCAgfVxuXG4gICAgXHQgIC8vY29uc29sZS5lcnJvcignUFJPQ0VTUyAlZCcsIHRoaXMuX3Byb2Nlc3NpbmcsIHBhdHRlcm4pXG5cbiAgICBcdCAgLy8gR2V0IHRoZSBmaXJzdCBbbl0gcGFydHMgb2YgcGF0dGVybiB0aGF0IGFyZSBhbGwgc3RyaW5ncy5cbiAgICBcdCAgdmFyIG4gPSAwO1xuICAgIFx0ICB3aGlsZSAodHlwZW9mIHBhdHRlcm5bbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgXHQgICAgbiArKztcbiAgICBcdCAgfVxuICAgIFx0ICAvLyBub3cgbiBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IG9uZSB0aGF0IGlzICpub3QqIGEgc3RyaW5nLlxuXG4gICAgXHQgIC8vIHNlZSBpZiB0aGVyZSdzIGFueXRoaW5nIGVsc2VcbiAgICBcdCAgdmFyIHByZWZpeDtcbiAgICBcdCAgc3dpdGNoIChuKSB7XG4gICAgXHQgICAgLy8gaWYgbm90LCB0aGVuIHRoaXMgaXMgcmF0aGVyIHNpbXBsZVxuICAgIFx0ICAgIGNhc2UgcGF0dGVybi5sZW5ndGg6XG4gICAgXHQgICAgICB0aGlzLl9wcm9jZXNzU2ltcGxlKHBhdHRlcm4uam9pbignLycpLCBpbmRleCwgY2IpO1xuICAgIFx0ICAgICAgcmV0dXJuXG5cbiAgICBcdCAgICBjYXNlIDA6XG4gICAgXHQgICAgICAvLyBwYXR0ZXJuICpzdGFydHMqIHdpdGggc29tZSBub24tdHJpdmlhbCBpdGVtLlxuICAgIFx0ICAgICAgLy8gZ29pbmcgdG8gcmVhZGRpcihjd2QpLCBidXQgbm90IGluY2x1ZGUgdGhlIHByZWZpeCBpbiBtYXRjaGVzLlxuICAgIFx0ICAgICAgcHJlZml4ID0gbnVsbDtcbiAgICBcdCAgICAgIGJyZWFrXG5cbiAgICBcdCAgICBkZWZhdWx0OlxuICAgIFx0ICAgICAgLy8gcGF0dGVybiBoYXMgc29tZSBzdHJpbmcgYml0cyBpbiB0aGUgZnJvbnQuXG4gICAgXHQgICAgICAvLyB3aGF0ZXZlciBpdCBzdGFydHMgd2l0aCwgd2hldGhlciB0aGF0J3MgJ2Fic29sdXRlJyBsaWtlIC9mb28vYmFyLFxuICAgIFx0ICAgICAgLy8gb3IgJ3JlbGF0aXZlJyBsaWtlICcuLi9iYXonXG4gICAgXHQgICAgICBwcmVmaXggPSBwYXR0ZXJuLnNsaWNlKDAsIG4pLmpvaW4oJy8nKTtcbiAgICBcdCAgICAgIGJyZWFrXG4gICAgXHQgIH1cblxuICAgIFx0ICB2YXIgcmVtYWluID0gcGF0dGVybi5zbGljZShuKTtcblxuICAgIFx0ICAvLyBnZXQgdGhlIGxpc3Qgb2YgZW50cmllcy5cbiAgICBcdCAgdmFyIHJlYWQ7XG4gICAgXHQgIGlmIChwcmVmaXggPT09IG51bGwpXG4gICAgXHQgICAgcmVhZCA9ICcuJztcbiAgICBcdCAgZWxzZSBpZiAoaXNBYnNvbHV0ZShwcmVmaXgpIHx8XG4gICAgXHQgICAgICBpc0Fic29sdXRlKHBhdHRlcm4ubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgXHQgICAgICAgIHJldHVybiB0eXBlb2YgcCA9PT0gJ3N0cmluZycgPyBwIDogJ1sqXSdcbiAgICBcdCAgICAgIH0pLmpvaW4oJy8nKSkpIHtcbiAgICBcdCAgICBpZiAoIXByZWZpeCB8fCAhaXNBYnNvbHV0ZShwcmVmaXgpKVxuICAgIFx0ICAgICAgcHJlZml4ID0gJy8nICsgcHJlZml4O1xuICAgIFx0ICAgIHJlYWQgPSBwcmVmaXg7XG4gICAgXHQgIH0gZWxzZVxuICAgIFx0ICAgIHJlYWQgPSBwcmVmaXg7XG5cbiAgICBcdCAgdmFyIGFicyA9IHRoaXMuX21ha2VBYnMocmVhZCk7XG5cbiAgICBcdCAgLy9pZiBpZ25vcmVkLCBza2lwIF9wcm9jZXNzaW5nXG4gICAgXHQgIGlmIChjaGlsZHJlbklnbm9yZWQodGhpcywgcmVhZCkpXG4gICAgXHQgICAgcmV0dXJuIGNiKClcblxuICAgIFx0ICB2YXIgaXNHbG9iU3RhciA9IHJlbWFpblswXSA9PT0gbWluaW1hdGNoLkdMT0JTVEFSO1xuICAgIFx0ICBpZiAoaXNHbG9iU3RhcilcbiAgICBcdCAgICB0aGlzLl9wcm9jZXNzR2xvYlN0YXIocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIsIGNiKTtcbiAgICBcdCAgZWxzZVxuICAgIFx0ICAgIHRoaXMuX3Byb2Nlc3NSZWFkZGlyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBjYik7XG4gICAgXHR9O1xuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcHJvY2Vzc1JlYWRkaXIgPSBmdW5jdGlvbiAocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIsIGNiKSB7XG4gICAgXHQgIHZhciBzZWxmID0gdGhpcztcbiAgICBcdCAgdGhpcy5fcmVhZGRpcihhYnMsIGluR2xvYlN0YXIsIGZ1bmN0aW9uIChlciwgZW50cmllcykge1xuICAgIFx0ICAgIHJldHVybiBzZWxmLl9wcm9jZXNzUmVhZGRpcjIocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIsIGVudHJpZXMsIGNiKVxuICAgIFx0ICB9KTtcbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9wcm9jZXNzUmVhZGRpcjIgPSBmdW5jdGlvbiAocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIsIGVudHJpZXMsIGNiKSB7XG5cbiAgICBcdCAgLy8gaWYgdGhlIGFicyBpc24ndCBhIGRpciwgdGhlbiBub3RoaW5nIGNhbiBtYXRjaCFcbiAgICBcdCAgaWYgKCFlbnRyaWVzKVxuICAgIFx0ICAgIHJldHVybiBjYigpXG5cbiAgICBcdCAgLy8gSXQgd2lsbCBvbmx5IG1hdGNoIGRvdCBlbnRyaWVzIGlmIGl0IHN0YXJ0cyB3aXRoIGEgZG90LCBvciBpZlxuICAgIFx0ICAvLyBkb3QgaXMgc2V0LiAgU3R1ZmYgbGlrZSBAKC5mb298LmJhcikgaXNuJ3QgYWxsb3dlZC5cbiAgICBcdCAgdmFyIHBuID0gcmVtYWluWzBdO1xuICAgIFx0ICB2YXIgbmVnYXRlID0gISF0aGlzLm1pbmltYXRjaC5uZWdhdGU7XG4gICAgXHQgIHZhciByYXdHbG9iID0gcG4uX2dsb2I7XG4gICAgXHQgIHZhciBkb3RPayA9IHRoaXMuZG90IHx8IHJhd0dsb2IuY2hhckF0KDApID09PSAnLic7XG5cbiAgICBcdCAgdmFyIG1hdGNoZWRFbnRyaWVzID0gW107XG4gICAgXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIFx0ICAgIHZhciBlID0gZW50cmllc1tpXTtcbiAgICBcdCAgICBpZiAoZS5jaGFyQXQoMCkgIT09ICcuJyB8fCBkb3RPaykge1xuICAgIFx0ICAgICAgdmFyIG07XG4gICAgXHQgICAgICBpZiAobmVnYXRlICYmICFwcmVmaXgpIHtcbiAgICBcdCAgICAgICAgbSA9ICFlLm1hdGNoKHBuKTtcbiAgICBcdCAgICAgIH0gZWxzZSB7XG4gICAgXHQgICAgICAgIG0gPSBlLm1hdGNoKHBuKTtcbiAgICBcdCAgICAgIH1cbiAgICBcdCAgICAgIGlmIChtKVxuICAgIFx0ICAgICAgICBtYXRjaGVkRW50cmllcy5wdXNoKGUpO1xuICAgIFx0ICAgIH1cbiAgICBcdCAgfVxuXG4gICAgXHQgIC8vY29uc29sZS5lcnJvcigncHJkMicsIHByZWZpeCwgZW50cmllcywgcmVtYWluWzBdLl9nbG9iLCBtYXRjaGVkRW50cmllcylcblxuICAgIFx0ICB2YXIgbGVuID0gbWF0Y2hlZEVudHJpZXMubGVuZ3RoO1xuICAgIFx0ICAvLyBJZiB0aGVyZSBhcmUgbm8gbWF0Y2hlZCBlbnRyaWVzLCB0aGVuIG5vdGhpbmcgbWF0Y2hlcy5cbiAgICBcdCAgaWYgKGxlbiA9PT0gMClcbiAgICBcdCAgICByZXR1cm4gY2IoKVxuXG4gICAgXHQgIC8vIGlmIHRoaXMgaXMgdGhlIGxhc3QgcmVtYWluaW5nIHBhdHRlcm4gYml0LCB0aGVuIG5vIG5lZWQgZm9yXG4gICAgXHQgIC8vIGFuIGFkZGl0aW9uYWwgc3RhdCAqdW5sZXNzKiB0aGUgdXNlciBoYXMgc3BlY2lmaWVkIG1hcmsgb3JcbiAgICBcdCAgLy8gc3RhdCBleHBsaWNpdGx5LiAgV2Uga25vdyB0aGV5IGV4aXN0LCBzaW5jZSByZWFkZGlyIHJldHVybmVkXG4gICAgXHQgIC8vIHRoZW0uXG5cbiAgICBcdCAgaWYgKHJlbWFpbi5sZW5ndGggPT09IDEgJiYgIXRoaXMubWFyayAmJiAhdGhpcy5zdGF0KSB7XG4gICAgXHQgICAgaWYgKCF0aGlzLm1hdGNoZXNbaW5kZXhdKVxuICAgIFx0ICAgICAgdGhpcy5tYXRjaGVzW2luZGV4XSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBcdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArKykge1xuICAgIFx0ICAgICAgdmFyIGUgPSBtYXRjaGVkRW50cmllc1tpXTtcbiAgICBcdCAgICAgIGlmIChwcmVmaXgpIHtcbiAgICBcdCAgICAgICAgaWYgKHByZWZpeCAhPT0gJy8nKVxuICAgIFx0ICAgICAgICAgIGUgPSBwcmVmaXggKyAnLycgKyBlO1xuICAgIFx0ICAgICAgICBlbHNlXG4gICAgXHQgICAgICAgICAgZSA9IHByZWZpeCArIGU7XG4gICAgXHQgICAgICB9XG5cbiAgICBcdCAgICAgIGlmIChlLmNoYXJBdCgwKSA9PT0gJy8nICYmICF0aGlzLm5vbW91bnQpIHtcbiAgICBcdCAgICAgICAgZSA9IHBhdGguam9pbih0aGlzLnJvb3QsIGUpO1xuICAgIFx0ICAgICAgfVxuICAgIFx0ICAgICAgdGhpcy5fZW1pdE1hdGNoKGluZGV4LCBlKTtcbiAgICBcdCAgICB9XG4gICAgXHQgICAgLy8gVGhpcyB3YXMgdGhlIGxhc3Qgb25lLCBhbmQgbm8gc3RhdHMgd2VyZSBuZWVkZWRcbiAgICBcdCAgICByZXR1cm4gY2IoKVxuICAgIFx0ICB9XG5cbiAgICBcdCAgLy8gbm93IHRlc3QgYWxsIG1hdGNoZWQgZW50cmllcyBhcyBzdGFuZC1pbnMgZm9yIHRoYXQgcGFydFxuICAgIFx0ICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgICBcdCAgcmVtYWluLnNoaWZ0KCk7XG4gICAgXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICsrKSB7XG4gICAgXHQgICAgdmFyIGUgPSBtYXRjaGVkRW50cmllc1tpXTtcbiAgICBcdCAgICBpZiAocHJlZml4KSB7XG4gICAgXHQgICAgICBpZiAocHJlZml4ICE9PSAnLycpXG4gICAgXHQgICAgICAgIGUgPSBwcmVmaXggKyAnLycgKyBlO1xuICAgIFx0ICAgICAgZWxzZVxuICAgIFx0ICAgICAgICBlID0gcHJlZml4ICsgZTtcbiAgICBcdCAgICB9XG4gICAgXHQgICAgdGhpcy5fcHJvY2VzcyhbZV0uY29uY2F0KHJlbWFpbiksIGluZGV4LCBpbkdsb2JTdGFyLCBjYik7XG4gICAgXHQgIH1cbiAgICBcdCAgY2IoKTtcbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9lbWl0TWF0Y2ggPSBmdW5jdGlvbiAoaW5kZXgsIGUpIHtcbiAgICBcdCAgaWYgKHRoaXMuYWJvcnRlZClcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICBpZiAoaXNJZ25vcmVkKHRoaXMsIGUpKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgIFx0ICAgIHRoaXMuX2VtaXRRdWV1ZS5wdXNoKFtpbmRleCwgZV0pO1xuICAgIFx0ICAgIHJldHVyblxuICAgIFx0ICB9XG5cbiAgICBcdCAgdmFyIGFicyA9IGlzQWJzb2x1dGUoZSkgPyBlIDogdGhpcy5fbWFrZUFicyhlKTtcblxuICAgIFx0ICBpZiAodGhpcy5tYXJrKVxuICAgIFx0ICAgIGUgPSB0aGlzLl9tYXJrKGUpO1xuXG4gICAgXHQgIGlmICh0aGlzLmFic29sdXRlKVxuICAgIFx0ICAgIGUgPSBhYnM7XG5cbiAgICBcdCAgaWYgKHRoaXMubWF0Y2hlc1tpbmRleF1bZV0pXG4gICAgXHQgICAgcmV0dXJuXG5cbiAgICBcdCAgaWYgKHRoaXMubm9kaXIpIHtcbiAgICBcdCAgICB2YXIgYyA9IHRoaXMuY2FjaGVbYWJzXTtcbiAgICBcdCAgICBpZiAoYyA9PT0gJ0RJUicgfHwgQXJyYXkuaXNBcnJheShjKSlcbiAgICBcdCAgICAgIHJldHVyblxuICAgIFx0ICB9XG5cbiAgICBcdCAgdGhpcy5tYXRjaGVzW2luZGV4XVtlXSA9IHRydWU7XG5cbiAgICBcdCAgdmFyIHN0ID0gdGhpcy5zdGF0Q2FjaGVbYWJzXTtcbiAgICBcdCAgaWYgKHN0KVxuICAgIFx0ICAgIHRoaXMuZW1pdCgnc3RhdCcsIGUsIHN0KTtcblxuICAgIFx0ICB0aGlzLmVtaXQoJ21hdGNoJywgZSk7XG4gICAgXHR9O1xuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcmVhZGRpckluR2xvYlN0YXIgPSBmdW5jdGlvbiAoYWJzLCBjYikge1xuICAgIFx0ICBpZiAodGhpcy5hYm9ydGVkKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIC8vIGZvbGxvdyBhbGwgc3ltbGlua2VkIGRpcmVjdG9yaWVzIGZvcmV2ZXJcbiAgICBcdCAgLy8ganVzdCBwcm9jZWVkIGFzIGlmIHRoaXMgaXMgYSBub24tZ2xvYnN0YXIgc2l0dWF0aW9uXG4gICAgXHQgIGlmICh0aGlzLmZvbGxvdylcbiAgICBcdCAgICByZXR1cm4gdGhpcy5fcmVhZGRpcihhYnMsIGZhbHNlLCBjYilcblxuICAgIFx0ICB2YXIgbHN0YXRrZXkgPSAnbHN0YXRcXDAnICsgYWJzO1xuICAgIFx0ICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXHQgIHZhciBsc3RhdGNiID0gaW5mbGlnaHQobHN0YXRrZXksIGxzdGF0Y2JfKTtcblxuICAgIFx0ICBpZiAobHN0YXRjYilcbiAgICBcdCAgICBzZWxmLmZzLmxzdGF0KGFicywgbHN0YXRjYik7XG5cbiAgICBcdCAgZnVuY3Rpb24gbHN0YXRjYl8gKGVyLCBsc3RhdCkge1xuICAgIFx0ICAgIGlmIChlciAmJiBlci5jb2RlID09PSAnRU5PRU5UJylcbiAgICBcdCAgICAgIHJldHVybiBjYigpXG5cbiAgICBcdCAgICB2YXIgaXNTeW0gPSBsc3RhdCAmJiBsc3RhdC5pc1N5bWJvbGljTGluaygpO1xuICAgIFx0ICAgIHNlbGYuc3ltbGlua3NbYWJzXSA9IGlzU3ltO1xuXG4gICAgXHQgICAgLy8gSWYgaXQncyBub3QgYSBzeW1saW5rIG9yIGEgZGlyLCB0aGVuIGl0J3MgZGVmaW5pdGVseSBhIHJlZ3VsYXIgZmlsZS5cbiAgICBcdCAgICAvLyBkb24ndCBib3RoZXIgZG9pbmcgYSByZWFkZGlyIGluIHRoYXQgY2FzZS5cbiAgICBcdCAgICBpZiAoIWlzU3ltICYmIGxzdGF0ICYmICFsc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgXHQgICAgICBzZWxmLmNhY2hlW2Fic10gPSAnRklMRSc7XG4gICAgXHQgICAgICBjYigpO1xuICAgIFx0ICAgIH0gZWxzZVxuICAgIFx0ICAgICAgc2VsZi5fcmVhZGRpcihhYnMsIGZhbHNlLCBjYik7XG4gICAgXHQgIH1cbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9yZWFkZGlyID0gZnVuY3Rpb24gKGFicywgaW5HbG9iU3RhciwgY2IpIHtcbiAgICBcdCAgaWYgKHRoaXMuYWJvcnRlZClcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICBjYiA9IGluZmxpZ2h0KCdyZWFkZGlyXFwwJythYnMrJ1xcMCcraW5HbG9iU3RhciwgY2IpO1xuICAgIFx0ICBpZiAoIWNiKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIC8vY29uc29sZS5lcnJvcignUkQgJWogJWonLCAraW5HbG9iU3RhciwgYWJzKVxuICAgIFx0ICBpZiAoaW5HbG9iU3RhciAmJiAhb3duUHJvcCh0aGlzLnN5bWxpbmtzLCBhYnMpKVxuICAgIFx0ICAgIHJldHVybiB0aGlzLl9yZWFkZGlySW5HbG9iU3RhcihhYnMsIGNiKVxuXG4gICAgXHQgIGlmIChvd25Qcm9wKHRoaXMuY2FjaGUsIGFicykpIHtcbiAgICBcdCAgICB2YXIgYyA9IHRoaXMuY2FjaGVbYWJzXTtcbiAgICBcdCAgICBpZiAoIWMgfHwgYyA9PT0gJ0ZJTEUnKVxuICAgIFx0ICAgICAgcmV0dXJuIGNiKClcblxuICAgIFx0ICAgIGlmIChBcnJheS5pc0FycmF5KGMpKVxuICAgIFx0ICAgICAgcmV0dXJuIGNiKG51bGwsIGMpXG4gICAgXHQgIH1cblxuICAgIFx0ICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXHQgIHNlbGYuZnMucmVhZGRpcihhYnMsIHJlYWRkaXJDYih0aGlzLCBhYnMsIGNiKSk7XG4gICAgXHR9O1xuXG4gICAgXHRmdW5jdGlvbiByZWFkZGlyQ2IgKHNlbGYsIGFicywgY2IpIHtcbiAgICBcdCAgcmV0dXJuIGZ1bmN0aW9uIChlciwgZW50cmllcykge1xuICAgIFx0ICAgIGlmIChlcilcbiAgICBcdCAgICAgIHNlbGYuX3JlYWRkaXJFcnJvcihhYnMsIGVyLCBjYik7XG4gICAgXHQgICAgZWxzZVxuICAgIFx0ICAgICAgc2VsZi5fcmVhZGRpckVudHJpZXMoYWJzLCBlbnRyaWVzLCBjYik7XG4gICAgXHQgIH1cbiAgICBcdH1cblxuICAgIFx0R2xvYi5wcm90b3R5cGUuX3JlYWRkaXJFbnRyaWVzID0gZnVuY3Rpb24gKGFicywgZW50cmllcywgY2IpIHtcbiAgICBcdCAgaWYgKHRoaXMuYWJvcnRlZClcbiAgICBcdCAgICByZXR1cm5cblxuICAgIFx0ICAvLyBpZiB3ZSBoYXZlbid0IGFza2VkIHRvIHN0YXQgZXZlcnl0aGluZywgdGhlbiBqdXN0XG4gICAgXHQgIC8vIGFzc3VtZSB0aGF0IGV2ZXJ5dGhpbmcgaW4gdGhlcmUgZXhpc3RzLCBzbyB3ZSBjYW4gYXZvaWRcbiAgICBcdCAgLy8gaGF2aW5nIHRvIHN0YXQgaXQgYSBzZWNvbmQgdGltZS5cbiAgICBcdCAgaWYgKCF0aGlzLm1hcmsgJiYgIXRoaXMuc3RhdCkge1xuICAgIFx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkgKyspIHtcbiAgICBcdCAgICAgIHZhciBlID0gZW50cmllc1tpXTtcbiAgICBcdCAgICAgIGlmIChhYnMgPT09ICcvJylcbiAgICBcdCAgICAgICAgZSA9IGFicyArIGU7XG4gICAgXHQgICAgICBlbHNlXG4gICAgXHQgICAgICAgIGUgPSBhYnMgKyAnLycgKyBlO1xuICAgIFx0ICAgICAgdGhpcy5jYWNoZVtlXSA9IHRydWU7XG4gICAgXHQgICAgfVxuICAgIFx0ICB9XG5cbiAgICBcdCAgdGhpcy5jYWNoZVthYnNdID0gZW50cmllcztcbiAgICBcdCAgcmV0dXJuIGNiKG51bGwsIGVudHJpZXMpXG4gICAgXHR9O1xuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcmVhZGRpckVycm9yID0gZnVuY3Rpb24gKGYsIGVyLCBjYikge1xuICAgIFx0ICBpZiAodGhpcy5hYm9ydGVkKVxuICAgIFx0ICAgIHJldHVyblxuXG4gICAgXHQgIC8vIGhhbmRsZSBlcnJvcnMsIGFuZCBjYWNoZSB0aGUgaW5mb3JtYXRpb25cbiAgICBcdCAgc3dpdGNoIChlci5jb2RlKSB7XG4gICAgXHQgICAgY2FzZSAnRU5PVFNVUCc6IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvbm9kZS1nbG9iL2lzc3Vlcy8yMDVcbiAgICBcdCAgICBjYXNlICdFTk9URElSJzogLy8gdG90YWxseSBub3JtYWwuIG1lYW5zIGl0ICpkb2VzKiBleGlzdC5cbiAgICBcdCAgICAgIHZhciBhYnMgPSB0aGlzLl9tYWtlQWJzKGYpO1xuICAgIFx0ICAgICAgdGhpcy5jYWNoZVthYnNdID0gJ0ZJTEUnO1xuICAgIFx0ICAgICAgaWYgKGFicyA9PT0gdGhpcy5jd2RBYnMpIHtcbiAgICBcdCAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGVyLmNvZGUgKyAnIGludmFsaWQgY3dkICcgKyB0aGlzLmN3ZCk7XG4gICAgXHQgICAgICAgIGVycm9yLnBhdGggPSB0aGlzLmN3ZDtcbiAgICBcdCAgICAgICAgZXJyb3IuY29kZSA9IGVyLmNvZGU7XG4gICAgXHQgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgXHQgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICBcdCAgICAgIH1cbiAgICBcdCAgICAgIGJyZWFrXG5cbiAgICBcdCAgICBjYXNlICdFTk9FTlQnOiAvLyBub3QgdGVycmlibHkgdW51c3VhbFxuICAgIFx0ICAgIGNhc2UgJ0VMT09QJzpcbiAgICBcdCAgICBjYXNlICdFTkFNRVRPT0xPTkcnOlxuICAgIFx0ICAgIGNhc2UgJ1VOS05PV04nOlxuICAgIFx0ICAgICAgdGhpcy5jYWNoZVt0aGlzLl9tYWtlQWJzKGYpXSA9IGZhbHNlO1xuICAgIFx0ICAgICAgYnJlYWtcblxuICAgIFx0ICAgIGRlZmF1bHQ6IC8vIHNvbWUgdW51c3VhbCBlcnJvci4gIFRyZWF0IGFzIGZhaWx1cmUuXG4gICAgXHQgICAgICB0aGlzLmNhY2hlW3RoaXMuX21ha2VBYnMoZildID0gZmFsc2U7XG4gICAgXHQgICAgICBpZiAodGhpcy5zdHJpY3QpIHtcbiAgICBcdCAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBcdCAgICAgICAgLy8gSWYgdGhlIGVycm9yIGlzIGhhbmRsZWQsIHRoZW4gd2UgYWJvcnRcbiAgICBcdCAgICAgICAgLy8gaWYgbm90LCB3ZSB0aHJldyBvdXQgb2YgaGVyZVxuICAgIFx0ICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgXHQgICAgICB9XG4gICAgXHQgICAgICBpZiAoIXRoaXMuc2lsZW50KVxuICAgIFx0ICAgICAgICBjb25zb2xlLmVycm9yKCdnbG9iIGVycm9yJywgZXIpO1xuICAgIFx0ICAgICAgYnJlYWtcbiAgICBcdCAgfVxuXG4gICAgXHQgIHJldHVybiBjYigpXG4gICAgXHR9O1xuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcHJvY2Vzc0dsb2JTdGFyID0gZnVuY3Rpb24gKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBjYikge1xuICAgIFx0ICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXHQgIHRoaXMuX3JlYWRkaXIoYWJzLCBpbkdsb2JTdGFyLCBmdW5jdGlvbiAoZXIsIGVudHJpZXMpIHtcbiAgICBcdCAgICBzZWxmLl9wcm9jZXNzR2xvYlN0YXIyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBlbnRyaWVzLCBjYik7XG4gICAgXHQgIH0pO1xuICAgIFx0fTtcblxuXG4gICAgXHRHbG9iLnByb3RvdHlwZS5fcHJvY2Vzc0dsb2JTdGFyMiA9IGZ1bmN0aW9uIChwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3RhciwgZW50cmllcywgY2IpIHtcbiAgICBcdCAgLy9jb25zb2xlLmVycm9yKCdwZ3MyJywgcHJlZml4LCByZW1haW5bMF0sIGVudHJpZXMpXG5cbiAgICBcdCAgLy8gbm8gZW50cmllcyBtZWFucyBub3QgYSBkaXIsIHNvIGl0IGNhbiBuZXZlciBoYXZlIG1hdGNoZXNcbiAgICBcdCAgLy8gZm9vLnR4dC8qKiBkb2Vzbid0IG1hdGNoIGZvby50eHRcbiAgICBcdCAgaWYgKCFlbnRyaWVzKVxuICAgIFx0ICAgIHJldHVybiBjYigpXG5cbiAgICBcdCAgLy8gdGVzdCB3aXRob3V0IHRoZSBnbG9ic3RhciwgYW5kIHdpdGggZXZlcnkgY2hpbGQgYm90aCBiZWxvd1xuICAgIFx0ICAvLyBhbmQgcmVwbGFjaW5nIHRoZSBnbG9ic3Rhci5cbiAgICBcdCAgdmFyIHJlbWFpbldpdGhvdXRHbG9iU3RhciA9IHJlbWFpbi5zbGljZSgxKTtcbiAgICBcdCAgdmFyIGdzcHJlZiA9IHByZWZpeCA/IFsgcHJlZml4IF0gOiBbXTtcbiAgICBcdCAgdmFyIG5vR2xvYlN0YXIgPSBnc3ByZWYuY29uY2F0KHJlbWFpbldpdGhvdXRHbG9iU3Rhcik7XG5cbiAgICBcdCAgLy8gdGhlIG5vR2xvYlN0YXIgcGF0dGVybiBleGl0cyB0aGUgaW5HbG9iU3RhciBzdGF0ZVxuICAgIFx0ICB0aGlzLl9wcm9jZXNzKG5vR2xvYlN0YXIsIGluZGV4LCBmYWxzZSwgY2IpO1xuXG4gICAgXHQgIHZhciBpc1N5bSA9IHRoaXMuc3ltbGlua3NbYWJzXTtcbiAgICBcdCAgdmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgXHQgIC8vIElmIGl0J3MgYSBzeW1saW5rLCBhbmQgd2UncmUgaW4gYSBnbG9ic3RhciwgdGhlbiBzdG9wXG4gICAgXHQgIGlmIChpc1N5bSAmJiBpbkdsb2JTdGFyKVxuICAgIFx0ICAgIHJldHVybiBjYigpXG5cbiAgICBcdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIFx0ICAgIHZhciBlID0gZW50cmllc1tpXTtcbiAgICBcdCAgICBpZiAoZS5jaGFyQXQoMCkgPT09ICcuJyAmJiAhdGhpcy5kb3QpXG4gICAgXHQgICAgICBjb250aW51ZVxuXG4gICAgXHQgICAgLy8gdGhlc2UgdHdvIGNhc2VzIGVudGVyIHRoZSBpbkdsb2JTdGFyIHN0YXRlXG4gICAgXHQgICAgdmFyIGluc3RlYWQgPSBnc3ByZWYuY29uY2F0KGVudHJpZXNbaV0sIHJlbWFpbldpdGhvdXRHbG9iU3Rhcik7XG4gICAgXHQgICAgdGhpcy5fcHJvY2VzcyhpbnN0ZWFkLCBpbmRleCwgdHJ1ZSwgY2IpO1xuXG4gICAgXHQgICAgdmFyIGJlbG93ID0gZ3NwcmVmLmNvbmNhdChlbnRyaWVzW2ldLCByZW1haW4pO1xuICAgIFx0ICAgIHRoaXMuX3Byb2Nlc3MoYmVsb3csIGluZGV4LCB0cnVlLCBjYik7XG4gICAgXHQgIH1cblxuICAgIFx0ICBjYigpO1xuICAgIFx0fTtcblxuICAgIFx0R2xvYi5wcm90b3R5cGUuX3Byb2Nlc3NTaW1wbGUgPSBmdW5jdGlvbiAocHJlZml4LCBpbmRleCwgY2IpIHtcbiAgICBcdCAgLy8gWFhYIHJldmlldyB0aGlzLiAgU2hvdWxkbid0IGl0IGJlIGRvaW5nIHRoZSBtb3VudGluZyBldGNcbiAgICBcdCAgLy8gYmVmb3JlIGRvaW5nIHN0YXQ/ICBraW5kYSB3ZWlyZD9cbiAgICBcdCAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFx0ICB0aGlzLl9zdGF0KHByZWZpeCwgZnVuY3Rpb24gKGVyLCBleGlzdHMpIHtcbiAgICBcdCAgICBzZWxmLl9wcm9jZXNzU2ltcGxlMihwcmVmaXgsIGluZGV4LCBlciwgZXhpc3RzLCBjYik7XG4gICAgXHQgIH0pO1xuICAgIFx0fTtcbiAgICBcdEdsb2IucHJvdG90eXBlLl9wcm9jZXNzU2ltcGxlMiA9IGZ1bmN0aW9uIChwcmVmaXgsIGluZGV4LCBlciwgZXhpc3RzLCBjYikge1xuXG4gICAgXHQgIC8vY29uc29sZS5lcnJvcigncHMyJywgcHJlZml4LCBleGlzdHMpXG5cbiAgICBcdCAgaWYgKCF0aGlzLm1hdGNoZXNbaW5kZXhdKVxuICAgIFx0ICAgIHRoaXMubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgXHQgIC8vIElmIGl0IGRvZXNuJ3QgZXhpc3QsIHRoZW4ganVzdCBtYXJrIHRoZSBsYWNrIG9mIHJlc3VsdHNcbiAgICBcdCAgaWYgKCFleGlzdHMpXG4gICAgXHQgICAgcmV0dXJuIGNiKClcblxuICAgIFx0ICBpZiAocHJlZml4ICYmIGlzQWJzb2x1dGUocHJlZml4KSAmJiAhdGhpcy5ub21vdW50KSB7XG4gICAgXHQgICAgdmFyIHRyYWlsID0gL1tcXC9cXFxcXSQvLnRlc3QocHJlZml4KTtcbiAgICBcdCAgICBpZiAocHJlZml4LmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgXHQgICAgICBwcmVmaXggPSBwYXRoLmpvaW4odGhpcy5yb290LCBwcmVmaXgpO1xuICAgIFx0ICAgIH0gZWxzZSB7XG4gICAgXHQgICAgICBwcmVmaXggPSBwYXRoLnJlc29sdmUodGhpcy5yb290LCBwcmVmaXgpO1xuICAgIFx0ICAgICAgaWYgKHRyYWlsKVxuICAgIFx0ICAgICAgICBwcmVmaXggKz0gJy8nO1xuICAgIFx0ICAgIH1cbiAgICBcdCAgfVxuXG4gICAgXHQgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKVxuICAgIFx0ICAgIHByZWZpeCA9IHByZWZpeC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG5cbiAgICBcdCAgLy8gTWFyayB0aGlzIGFzIGEgbWF0Y2hcbiAgICBcdCAgdGhpcy5fZW1pdE1hdGNoKGluZGV4LCBwcmVmaXgpO1xuICAgIFx0ICBjYigpO1xuICAgIFx0fTtcblxuICAgIFx0Ly8gUmV0dXJucyBlaXRoZXIgJ0RJUicsICdGSUxFJywgb3IgZmFsc2VcbiAgICBcdEdsb2IucHJvdG90eXBlLl9zdGF0ID0gZnVuY3Rpb24gKGYsIGNiKSB7XG4gICAgXHQgIHZhciBhYnMgPSB0aGlzLl9tYWtlQWJzKGYpO1xuICAgIFx0ICB2YXIgbmVlZERpciA9IGYuc2xpY2UoLTEpID09PSAnLyc7XG5cbiAgICBcdCAgaWYgKGYubGVuZ3RoID4gdGhpcy5tYXhMZW5ndGgpXG4gICAgXHQgICAgcmV0dXJuIGNiKClcblxuICAgIFx0ICBpZiAoIXRoaXMuc3RhdCAmJiBvd25Qcm9wKHRoaXMuY2FjaGUsIGFicykpIHtcbiAgICBcdCAgICB2YXIgYyA9IHRoaXMuY2FjaGVbYWJzXTtcblxuICAgIFx0ICAgIGlmIChBcnJheS5pc0FycmF5KGMpKVxuICAgIFx0ICAgICAgYyA9ICdESVInO1xuXG4gICAgXHQgICAgLy8gSXQgZXhpc3RzLCBidXQgbWF5YmUgbm90IGhvdyB3ZSBuZWVkIGl0XG4gICAgXHQgICAgaWYgKCFuZWVkRGlyIHx8IGMgPT09ICdESVInKVxuICAgIFx0ICAgICAgcmV0dXJuIGNiKG51bGwsIGMpXG5cbiAgICBcdCAgICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgXHQgICAgICByZXR1cm4gY2IoKVxuXG4gICAgXHQgICAgLy8gb3RoZXJ3aXNlIHdlIGhhdmUgdG8gc3RhdCwgYmVjYXVzZSBtYXliZSBjPXRydWVcbiAgICBcdCAgICAvLyBpZiB3ZSBrbm93IGl0IGV4aXN0cywgYnV0IG5vdCB3aGF0IGl0IGlzLlxuICAgIFx0ICB9XG4gICAgXHQgIHZhciBzdGF0ID0gdGhpcy5zdGF0Q2FjaGVbYWJzXTtcbiAgICBcdCAgaWYgKHN0YXQgIT09IHVuZGVmaW5lZCkge1xuICAgIFx0ICAgIGlmIChzdGF0ID09PSBmYWxzZSlcbiAgICBcdCAgICAgIHJldHVybiBjYihudWxsLCBzdGF0KVxuICAgIFx0ICAgIGVsc2Uge1xuICAgIFx0ICAgICAgdmFyIHR5cGUgPSBzdGF0LmlzRGlyZWN0b3J5KCkgPyAnRElSJyA6ICdGSUxFJztcbiAgICBcdCAgICAgIGlmIChuZWVkRGlyICYmIHR5cGUgPT09ICdGSUxFJylcbiAgICBcdCAgICAgICAgcmV0dXJuIGNiKClcbiAgICBcdCAgICAgIGVsc2VcbiAgICBcdCAgICAgICAgcmV0dXJuIGNiKG51bGwsIHR5cGUsIHN0YXQpXG4gICAgXHQgICAgfVxuICAgIFx0ICB9XG5cbiAgICBcdCAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFx0ICB2YXIgc3RhdGNiID0gaW5mbGlnaHQoJ3N0YXRcXDAnICsgYWJzLCBsc3RhdGNiXyk7XG4gICAgXHQgIGlmIChzdGF0Y2IpXG4gICAgXHQgICAgc2VsZi5mcy5sc3RhdChhYnMsIHN0YXRjYik7XG5cbiAgICBcdCAgZnVuY3Rpb24gbHN0YXRjYl8gKGVyLCBsc3RhdCkge1xuICAgIFx0ICAgIGlmIChsc3RhdCAmJiBsc3RhdC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgXHQgICAgICAvLyBJZiBpdCdzIGEgc3ltbGluaywgdGhlbiB0cmVhdCBpdCBhcyB0aGUgdGFyZ2V0LCB1bmxlc3NcbiAgICBcdCAgICAgIC8vIHRoZSB0YXJnZXQgZG9lcyBub3QgZXhpc3QsIHRoZW4gdHJlYXQgaXQgYXMgYSBmaWxlLlxuICAgIFx0ICAgICAgcmV0dXJuIHNlbGYuZnMuc3RhdChhYnMsIGZ1bmN0aW9uIChlciwgc3RhdCkge1xuICAgIFx0ICAgICAgICBpZiAoZXIpXG4gICAgXHQgICAgICAgICAgc2VsZi5fc3RhdDIoZiwgYWJzLCBudWxsLCBsc3RhdCwgY2IpO1xuICAgIFx0ICAgICAgICBlbHNlXG4gICAgXHQgICAgICAgICAgc2VsZi5fc3RhdDIoZiwgYWJzLCBlciwgc3RhdCwgY2IpO1xuICAgIFx0ICAgICAgfSlcbiAgICBcdCAgICB9IGVsc2Uge1xuICAgIFx0ICAgICAgc2VsZi5fc3RhdDIoZiwgYWJzLCBlciwgbHN0YXQsIGNiKTtcbiAgICBcdCAgICB9XG4gICAgXHQgIH1cbiAgICBcdH07XG5cbiAgICBcdEdsb2IucHJvdG90eXBlLl9zdGF0MiA9IGZ1bmN0aW9uIChmLCBhYnMsIGVyLCBzdGF0LCBjYikge1xuICAgIFx0ICBpZiAoZXIgJiYgKGVyLmNvZGUgPT09ICdFTk9FTlQnIHx8IGVyLmNvZGUgPT09ICdFTk9URElSJykpIHtcbiAgICBcdCAgICB0aGlzLnN0YXRDYWNoZVthYnNdID0gZmFsc2U7XG4gICAgXHQgICAgcmV0dXJuIGNiKClcbiAgICBcdCAgfVxuXG4gICAgXHQgIHZhciBuZWVkRGlyID0gZi5zbGljZSgtMSkgPT09ICcvJztcbiAgICBcdCAgdGhpcy5zdGF0Q2FjaGVbYWJzXSA9IHN0YXQ7XG5cbiAgICBcdCAgaWYgKGFicy5zbGljZSgtMSkgPT09ICcvJyAmJiBzdGF0ICYmICFzdGF0LmlzRGlyZWN0b3J5KCkpXG4gICAgXHQgICAgcmV0dXJuIGNiKG51bGwsIGZhbHNlLCBzdGF0KVxuXG4gICAgXHQgIHZhciBjID0gdHJ1ZTtcbiAgICBcdCAgaWYgKHN0YXQpXG4gICAgXHQgICAgYyA9IHN0YXQuaXNEaXJlY3RvcnkoKSA/ICdESVInIDogJ0ZJTEUnO1xuICAgIFx0ICB0aGlzLmNhY2hlW2Fic10gPSB0aGlzLmNhY2hlW2Fic10gfHwgYztcblxuICAgIFx0ICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgXHQgICAgcmV0dXJuIGNiKClcblxuICAgIFx0ICByZXR1cm4gY2IobnVsbCwgYywgc3RhdClcbiAgICBcdH07XG4gICAgXHRyZXR1cm4gZ2xvYl8xO1xuICAgIH1cblxuICAgIHJlcXVpcmVHbG9iKCk7XG5cbiAgICBjb25zdCBNZXRyb09wdGlvbnMgPSB7XHJcbiAgICAgICAgcmVtb3ZlQ2xvYWtUaW1lb3V0OiAxMDAwXHJcbiAgICB9O1xyXG5cclxuICAgIGNsYXNzIE1ldHJvVUkge1xyXG4gICAgICAgIHZlcnNpb24gPSBcIjUuMC4wXCJcclxuICAgICAgICBzdGF0dXMgPSBcInByZS1hbHBoYVwiXHJcbiAgICAgICAgcGx1Z2lucyA9IHt9XHJcbiAgICAgICAgb3B0aW9ucyA9IHt9XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZSh7fSwgTWV0cm9PcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5mbygpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbmZvKCl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgTWV0cm8gVUkgLSB2JHt0aGlzLnZlcnNpb259LSR7dGhpcy5zdGF0dXN9YCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgSW5jbHVkZTogUXVlcnksIERhdGV0aW1lLCBTdHJpbmcsIEh0bWwuYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0KCl7XHJcbiAgICAgICAgICAgIGdsb2JhbGl6ZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGx1Z2lucyA9ICQoXCJbZGF0YS1yb2xlXVwiKTtcclxuXHJcbiAgICAgICAgICAgIHBsdWdpbnMuZWFjaCgoXywgZWxlbSk9PntcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvbGVzID0gZWxlbVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJvbGVcIilcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcIixcIiwgXCIgXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiIFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAociA9PiByLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHYgPT4gISF2KTtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgcm9sZSBvZiByb2xlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZVBsdWdpbihlbGVtLCByb2xlLCB7fSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9ICQoXCJib2R5XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkuaGFzQ2xhc3MoJ2Nsb2FrJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LmFkZENsYXNzKCdyZW1vdmUtY2xvYWsnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoJ2Nsb2FrIHJlbW92ZS1jbG9haycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sdGhpcy5vcHRpb25zLnJlbW92ZUNsb2FrVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb2JzZXJ2ZSgpe1xyXG4gICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXJDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBvYnNlcnZlckNhbGxiYWNrID0gZnVuY3Rpb24obXV0YXRpb25zKXtcclxuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5tYXAoZnVuY3Rpb24obXV0YXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuaW5mbyhtdXRhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gbXV0YXRpb24udGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0ICRlbGVtID0gJChlbGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gbXV0YXRpb24uYXR0cmlidXRlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSAkZWxlbS5hdHRyKGF0dHIpLCBvbGRWYWx1ZSA9IG11dGF0aW9uLm9sZFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgIT09IFwiZGF0YS1yb2xlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvbGVOYW1lID0gJGVsZW0uYXR0cignZGF0YS1yb2xlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm9sZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHJvbGUgb2Ygcm9sZU5hbWUuc3BsaXQoXCIgXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbS5oYXNBdHRyKGBkYXRhLXJvbGUtJHtuYW1lfWApICYmICRlbGVtLmF0dHIoYGRhdGEtcm9sZS0ke25hbWV9YCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZ2V0UGx1Z2luKGVsZW0sIHJvbGUpLnVwZGF0ZUF0dHIoYXR0ciwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gbXV0YXRpb24uYWRkZWROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBub2RlIG9mIG5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRub2RlID0gJChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRub2RlLmhhc0F0dHIoXCJkYXRhLXJvbGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubWFrZVBsdWdpbihub2RlLCAkbm9kZS5hdHRyKCdkYXRhLXJvbGUnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihvYnNlcnZlckNhbGxiYWNrKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSgkKFwiaHRtbFwiKVswXSwgb2JzZXJ2ZXJDb25maWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0UGx1Z2luKGVsZW0sIG5hbWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5zW2J0b2EoYCR7bmFtZX06OiR7SlNPTi5zdHJpbmdpZnkoZWxlbSl9YCldXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtYWtlUGx1Z2luKGVsZW0sIG5hbWUsIG9wdGlvbnMpe1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5JZCA9IGJ0b2EoYCR7bmFtZX06OiR7SlNPTi5zdHJpbmdpZnkoZWxlbSl9YCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJChlbGVtKS5oYXNBdHRyKGBkYXRhLXJvbGUtJHtuYW1lfWApICYmICQoZWxlbSkuYXR0cihgZGF0YS1yb2xlLSR7bmFtZX1gKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luc1twbHVnaW5JZF1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgX2NsYXNzID0gUmVnaXN0cnkuZ2V0Q2xhc3MobmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9jbGFzcykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgY29tcG9uZW50ICR7bmFtZX1gKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBuZXcgX2NsYXNzKGVsZW0sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbcGx1Z2luSWRdID0gcGx1Z2luO1xyXG4gICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShgZGF0YS1yb2xlLSR7bmFtZX1gLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBsdWdpblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVzdHJveVBsdWdpbihlbGVtLCBuYW1lKXtcclxuICAgICAgICAgICAgY29uc3QgcGx1Z2luSWQgPSBidG9hKGAke25hbWV9Ojoke0pTT04uc3RyaW5naWZ5KGVsZW0pfWApO1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLnBsdWdpbnNbcGx1Z2luSWRdO1xyXG4gICAgICAgICAgICBpZiAoIXBsdWdpbikgcmV0dXJuXHJcbiAgICAgICAgICAgIHBsdWdpbi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHBsdWdpbi5jb21wb25lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBsdWdpbnNbcGx1Z2luSWRdO1xyXG4gICAgICAgIH1cclxuICAgIH1cblxuICAgIGdsb2JhbFRoaXMuTWV0cm8gPSBuZXcgTWV0cm9VSSgpO1xuXG59KShyZXF1aXJlJCQwLCByZXF1aXJlJCQ0LCByZXF1aXJlJCQzLCByZXF1aXJlJCQ1KTtcbiJdLCJuYW1lcyI6WyJyZXF1aXJlJCQwIiwicmVxdWlyZSQkNCIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ1IiwiX2ludGVyb3BEZWZhdWx0TGVnYWN5IiwiZSIsImRlZmF1bHQiLCJyZXF1aXJlJCQwX19kZWZhdWx0IiwicmVxdWlyZSQkNF9fZGVmYXVsdCIsInJlcXVpcmUkJDNfX2RlZmF1bHQiLCJyZXF1aXJlJCQ1X19kZWZhdWx0IiwiZ2xvYmFsVGhpcyIsIk1FVFJPNV9DT01QT05FTlRTX1JFR0lTVFJZIiwiUmVnaXN0cnkiLCJyZWdpc3RlciIsIm5hbWUiLCJfY2xhc3MiLCJ1bnJlZ2lzdGVyIiwiZ2V0Q2xhc3MiLCJnZXRSZWdpc3RyeSIsImR1bXAiLCJhcmdzIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWJ1ZyIsImlzT2JqZWN0IiwiaXRlbSIsIkFycmF5IiwiaXNBcnJheSIsIm1lcmdlIiwidGFyZ2V0Iiwic291cmNlcyIsInNvdXJjZSIsInNoaWZ0Iiwia2V5IiwiT2JqZWN0IiwiYXNzaWduIiwiREVGQVVMVF9GT1JNQVQiLCJJTlZBTElEX0RBVEUiLCJSRUdFWF9GT1JNQVQiLCJSRUdFWF9GT1JNQVRfU1RSRlRJTUUiLCJERUZBVUxUX0xPQ0FMRSIsIm1vbnRocyIsInNwbGl0IiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsIndlZWtTdGFydCIsIk0iLCJtcyIsInMiLCJtIiwiaCIsIkQiLCJkIiwiWSIsInkiLCJ0IiwiQyIsInJlcXVpcmVkIiwiRXJyb3IiLCJpc3NldCIsInYiLCJudWxsYWJsZSIsIm5vdCIsImxwYWQkMSIsInN0ciIsInBhZCIsIl9zdHIiLCJqb2luIiwiRGF0ZXRpbWUiLCJjb25zdHJ1Y3RvciIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsInRoaXMiLCJ2YWx1ZSIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiYmluZCIsImFwcGx5IiwiRGF0ZSIsImNvbmNhdCIsImxvY2FsZSIsImxvY2FsZXMiLCJ1dGNNb2RlIiwibXV0YWJsZSIsImdldFRpbWUiLCJpc05hTiIsInN0YXRpYyIsImVuIiwidmFsIiwiYXNEYXRlIiwiZGF0ZXRpbWUiLCJwYXJzZSIsImRhdGUiLCJhbGlnbiIsInJlc3VsdCIsInRlbXAiLCJfZGF0ZSIsIndlZWtEYXkiLCJhZGREYXkiLCJhbGlnbkVuZCIsImFkZCIsImltbXV0YWJsZSIsInV0YyIsImxvY2FsIiwidXNlTG9jYWxlIiwiZ2V0TG9jYWxlIiwiY2xvbmUiLCJjIiwidG8iLCJ5ZWFyMiIsInllYXIiLCJzdWJzdHIiLCJfc2V0IiwiZm4iLCJfZ2V0IiwiX3dvcmsiLCJwYXJ0Iiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIm1vbnRoIiwidGltZSIsImdldFVUQ0RheSIsImdldERheSIsImRpZmYiLCJnZXQiLCJ1bml0Iiwic2V0IiwiYWRkSG91ciIsImFkZE1pbnV0ZSIsImFkZFNlY29uZCIsImFkZE1zIiwiYWRkV2VlayIsImFkZE1vbnRoIiwiYWRkWWVhciIsImZvcm1hdCIsImZtdCIsIm5hbWVzIiwibWF0Y2hlcyIsIllZIiwiWVlZWSIsIk1NIiwiTU1NIiwiTU1NTSIsIkREIiwiZGQiLCJkZGQiLCJkZGRkIiwiSCIsIkhIIiwibW0iLCJzcyIsInNzcyIsInJlcGxhY2UiLCJtYXRjaCIsIiQxIiwidmFsdWVPZiIsInRvU3RyaW5nIiwiZm5Gb3JtYXQkNSIsImJ1ZGRoaXN0TWl4aW4iLCJidWRkaGlzdCIsIkJCIiwiQkJCQiIsImNhbGVuZGFyIiwiaXNvIiwiaSIsIndzIiwid2QiLCJpc29XZWVrRGF5Iiwibm93IiwiZGF5cyIsIndlZWtzdGFydCIsInN1IiwiZ2V0V2Vla0RheXMiLCJ0b2RheSIsIndlZWtlbmRzIiwid2VlayIsInB1c2giLCJmaWx0ZXIiLCJpbmNsdWRlcyIsImNyZWF0ZUNhbGVuZGFyIiwiZm5Gb3JtYXQkNCIsImNlbnR1cnkiLCJNYXRoIiwiY2VpbCIsInNhbWUiLCJjb21wYXJlIiwib3BlcmF0b3IiLCJjdXJyIiwidDEiLCJ0MiIsInRvTG93ZXJDYXNlIiwiYmV0d2VlbiIsImQxIiwiZDIiLCJ5b3VuZ2VyIiwib2xkZXIiLCJvbGRlck9yRXF1YWwiLCJ5b3VuZ2VyT3JFcXVhbCIsImVxdWFsIiwibm90RXF1YWwiLCJhYnMiLCJkaWZmTW9udGgiLCJmbG9vciIsImRpc3RhbmNlIiwiaXNMZWFwWWVhciIsImRheU9mWWVhciIsImRheXNJbk1vbnRoIiwiZGF5c0luWWVhciIsImRheXNJblllYXJNYXAiLCJkYXlzSW5ZZWFyT2JqIiwic2hvcnROYW1lIiwibWFwIiwiZm9yRWFjaCIsImRlY2FkZSIsImRlY2FkZVN0YXJ0IiwiZGVjYWRlRW5kIiwiZGVjYWRlT2ZNb250aCIsImZyb20iLCJub3JtIiwibm9ybUZvcm1hdCIsImZJdGVtcyIsImRJdGVtcyIsImlNb250aCIsImlEYXkiLCJpWWVhciIsImlIb3VyIiwiaU1pbnV0ZSIsImlTZWNvbmQiLCJpTXMiLCJwYXJzZWRNb250aCIsImdldEluZGV4Iiwid2hlcmUiLCJ3aGF0IiwiZWwiLCJpbmRleE9mIiwiZ2V0UGFydEluZGV4IiwicGFydHMiLCJpbmRleCIsInRyaW0iLCJwYXJzZUludCIsIm1vbnRoTmFtZVRvTnVtYmVyIiwiZm5Gb3JtYXQkMyIsImFtcG0iLCJpc0xvd2VyQ2FzZSIsImhvdXIxMiIsInAiLCJoMTIiLCJhIiwiQSIsImhoIiwiZm5Gb3JtYXQkMiIsImZuQWxpZ24kMSIsImZuQWxpZ25FbmQkMSIsInVuZGVmaW5lZCIsIkkiLCJtYXgiLCJzb3J0IiwiYiIsIm1pbiIsImZuQWxpZ24iLCJmbkFsaWduRW5kIiwiZm5BZGQiLCJxdWFydGVyIiwiYWRkUXVhcnRlciIsImFyciIsIm9wdCIsIl9hcnIiLCJvIiwiZGlyIiwidG9VcHBlckNhc2UiLCJyZXR1cm5BcyIsInJldmVyc2UiLCJmbkZvcm1hdCQxIiwidXRjT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0aW1lem9uZSIsInRvVGltZVN0cmluZyIsInRpbWV6b25lTmFtZSIsIloiLCJaWiIsIlpaWiIsInoiLCJmbkZvcm1hdCIsIndlZWtOdW1iZXIiLCJuWWVhciIsIm5kYXkiLCJuZXdZZWFyIiwiZGF5bnVtIiwid2Vla251bSIsImlzb1dlZWtOdW1iZXIiLCJ3ZWVrc0luWWVhciIsInduIiwid25pIiwiVyIsIldXIiwiV1dXIiwiV1dXVyIsInN0cmZ0aW1lIiwiYURheSIsImFNb250aCIsImFIb3VyIiwiYUhvdXIxMiIsImFNaW51dGUiLCJhU2Vjb25kIiwiYU1zIiwidGhhdCIsInRodXJzZGF5Iiwic3Vic3RyaW5nIiwicm91bmQiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJpc1RvZGF5IiwiaXNUb21vcnJvdyIsInRvbW9ycm93IiwidG9EYXRlU3RyaW5nIiwidG9JU09TdHJpbmciLCJ0b0pTT04iLCJ0b0dNVFN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwidG9VVENTdHJpbmciLCJ0b0RhdGUiLCJ0aW1lc3RhbXAiLCJ1bml4IiwiX3ZhbCIsImlzWWVzdGVyZGF5IiwieWVzdGVyZGF5IiwiZ2V0UmVzdWx0IiwicmVzIiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJob3VycyIsInllYXJzIiwidGltZUxhcHNlIiwib2xkIiwiUGFyc2VUaW1lTWl4aW4iLCJwYXJzZVRpbWUiLCJyZWR1Y2UiLCJhY2MiLCJ3aGl0ZXNwYWNlIiwiZGlhY3JpdGljYWxNYXJrIiwibG93ZXJDYXNlTGV0dGVyIiwidXBwZXJDYXNlTGV0dGVyIiwiUkVHRVhQX1RSSU1fTEVGVCIsIlJlZ0V4cCIsIlJFR0VYUF9UUklNX1JJR0hUIiwiUkVHRVhQX0RJR0lUIiwiUkVHRVhQX0hUTUxfU1BFQ0lBTF9DSEFSQUNURVJTIiwiUkVHRVhQX1RBR1MiLCJSRUdFWFBfV09SRCIsIlJFR0VYUF9MQVRJTl9XT1JEIiwiUkVHRVhQX0FMUEhBIiwiUkVHRVhQX0FMUEhBX0RJR0lUIiwiUkVHRVhQX0VYVEVOREVEX0FTQ0lJIiwidG9TdHIiLCJkZWYiLCJudmwkMSIsIndvcmRzIiwicGF0dGVybiIsImZsYWdzIiwicmVnZXhwIiwidGVzdCIsImNhcGl0YWxpemUiLCJzdHJvbmciLCJfcyIsImxhc3QiLCJsb3dlciIsImNoYXJzJDEiLCJpZ25vcmUiLCJfc3dhcCIsInN3YXBwZWQiLCJjaGFyIiwibGMiLCJ1YyIsInVwcGVyIiwidW5pcXVlQXJyYXkiLCJfYSIsImoiLCJzcGxpY2UiLCJlc2NhcGVDaGFyYWN0ZXJzTWFwIiwicmVwbGFjZVNwZWNpYWxDaGFyYWN0ZXIiLCJjaGFyYWN0ZXIiLCJ1bmVzY2FwZUNoYXJzTWFwIiwiY2hhcnMiLCJrZXlzIiwicmVkdWNlVW5lc2NhcGVkU3RyaW5nIiwic3RyaW5nIiwic3RhcnQiLCJsZW4iLCJNQVhfU0FGRV9JTlRFR0VSIiwiY2xpcCIsInRvSW50IiwiSW5maW5pdHkiLCJyZXBlYXQiLCJ0aW1lcyIsIl90aW1lcyIsIl9vcmlnaW4iLCJwYWRCdWlsZGVyIiwicGFkTGVuZ3RoIiwiX3BhZCIsImxlZnQiLCJfbGVuIiwiX3BhZExlbiIsIl9wYWRkaW5nTGVuIiwicGFkcyIsInJlZHVjZVJpZ2h0IiwibHRyaW0iLCJydHJpbSIsInRyaW1tZWQiLCJpc0VtcHR5IiwicmUiLCJub3Rfc3RyaW5nIiwibm90X2Jvb2wiLCJub3RfdHlwZSIsIm5vdF9wcmltaXRpdmUiLCJudW1iZXIiLCJudW1lcmljX2FyZyIsImpzb24iLCJub3RfanNvbiIsInRleHQiLCJtb2R1bG8iLCJwbGFjZWhvbGRlciIsImtleV9hY2Nlc3MiLCJpbmRleF9hY2Nlc3MiLCJzaWduIiwic3ByaW50Zl9jYWNoZSIsImNyZWF0ZSIsInNwcmludGYiLCJwYXJzZV90cmVlIiwiYXJndiIsImFyZyIsInBoIiwicGFkX2NoYXJhY3RlciIsInBhZF9sZW5ndGgiLCJpc19wb3NpdGl2ZSIsImN1cnNvciIsInRyZWVfbGVuZ3RoIiwib3V0cHV0IiwiayIsInBhcmFtX25vIiwidHlwZSIsIlR5cGVFcnJvciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIndpZHRoIiwicHJlY2lzaW9uIiwicGFyc2VGbG9hdCIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwiTnVtYmVyIiwidG9QcmVjaXNpb24iLCJwYWRfY2hhciIsImNoYXJBdCIsInNwcmludGZfZm9ybWF0IiwiX2ZtdCIsImFyZ19uYW1lcyIsImV4ZWMiLCJTeW50YXhFcnJvciIsImZpZWxkX2xpc3QiLCJyZXBsYWNlbWVudF9maWVsZCIsImZpZWxkX21hdGNoIiwic3ByaW50Zl9wYXJzZSIsImYiLCJjYW1lbENhc2UiLCJjb3VudCIsImNvdW50Q2hhcnMiLCJjb3VudFVuaXF1ZUNoYXJzIiwiY291bnRTdWJzdHIiLCJzdWIiLCJfc3ViIiwiY291bnRXb3JkcyIsImNvdW50VW5pcXVlV29yZHMiLCJkYXNoZWROYW1lIiwiZGVjYXBpdGFsaXplIiwia2ViYWIiLCJqb2luV2l0aCIsInNodWZmbGUiLCJyIiwicmFuZG9tIiwic2h1ZmZsZUFycmF5Iiwic25ha2UiLCJzd2FwIiwidGl0bGUiLCJub1NwbGl0Iiwic2VwIiwibm9TcGxpdEFycmF5IiwidyIsIndyYXAiLCJhZnRlciIsIndyYXBUYWciLCJ0YWciLCJlc2NhcGVIdG1sIiwidW5lc2NhcGVIdG1sIiwidW5pcXVlIiwidW5pcXVlV29yZHMiLCJmaXJzdCIsInRydW5jYXRlIiwiZW5kIiwicHJ1bmUiLCJfdHJ1bmNhdGVkTGVuIiwid29yZCIsIm9mZnNldCIsIndvcmRMZW5ndGgiLCJfc2lkZUxlbiIsIl9yZW1haW5pbmdMZW4iLCJscGFkIiwicnBhZCIsImluc2VydCIsInNiaiIsInBvcyIsImVuZHNXaXRoIiwiaXNBbHBoYSIsImlzQWxwaGFEaWdpdCIsImlzRGlnaXQiLCJpc0JsYW5rIiwiaXNMb3dlciIsImlzVXBwZXIiLCJzdGFydFdpdGgiLCJzdGFydHNXaXRoIiwic3RyaXBUYWdzIiwiYWxsb3dlZCIsIiQwIiwic3RyaXBUYWdzQWxsIiwidnNwcmludGYiLCJsaW1pdCIsInN0cmlwIiwiaXNTdHJpbmciLCJwYXR0ZXJuU3RyIiwiYXBwZW5kIiwicHJlcGVuZCIsInN0cmlwQm9vbSIsInNob3J0ZW4iLCJsIiwiU3RyIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJoaW50IiwidG9TdHJpbmdUYWciLCJzdGF0ZSIsIl9yZXN1bHQiLCJfa2V5IiwiX2xlbjIiLCJfa2V5MiIsImJlZm9yZSIsImlzQXJyYXlMaWtlIiwib2JqIiwiZWFjaCIsImN0eCIsImNiIiwiaGFzT3duUHJvcGVydHkiLCJFbGVtZW50IiwiaXNMb2NhbGhvc3QiLCJob3N0IiwiaG9zdG5hbWUiLCJsb2NhdGlvbiIsImlzUHJpdmF0ZUFkZHJlc3MiLCJsb2MiLCJpc1Zpc2libGUiLCJlbGVtIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJnZXRDbGllbnRSZWN0cyIsImlzSGlkZGVuIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImhpZGRlbiIsImluVmlld3BvcnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiYm90dG9tIiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwiaXNTZWxlY3RvciIsInNlbGVjdG9yIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeUNoZWNrIiwidW5kZWYiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJzdHIyYXJyYXkiLCJkZWwiLCJBdHRyIiwiYXR0ciIsImF0dHJpYnV0ZXMiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsIm5vZGVUeXBlIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiaGFzQXR0ciIsImhhc0F0dHJzIiwicmVtb3ZlQXR0ciIsInRvZ2dsZUF0dHIiLCJpZCIsIkNsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiY29udGFpbnNDbGFzcyIsIml0ZW1DbGFzcyIsImhhc0NsYXNzIiwiY2xzIiwiXyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xlYXJDbGFzc2VzIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsImFzQXJyYXkiLCJjbGFzc2VzQ291bnQiLCJyZW1vdmVDbGFzc0J5IiwibWFzayIsInJlbW92ZSIsImhhc0NsYXNzTGlzdCIsIkNvbnRhaW5zIiwic2VsIiwiZ2xvYmFsIiwiX2luZGV4IiwiJCIsInBhcmVudE5vZGUiLCJjaGlsZHJlbiIsImVxIiwicHJldk9iaiIsImlzIiwic2VsZWN0ZWQiLCJjaGVja2VkIiwic3R5bGVzIiwiX28iLCJvZGQiLCJldmVuIiwiZmluZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwYXJlbnQiLCJwYXJlbnRzIiwicGFyIiwic2libGluZ3MiLCJfc2libGluZ0FsbCIsIl9zaWJsaW5nIiwicHJldiIsIm5leHQiLCJwcmV2QWxsIiwibmV4dEFsbCIsImNsb3Nlc3QiLCJwYXJlbnRFbGVtZW50IiwiaGFzIiwiYmFjayIsInRvX3N0YXJ0IiwicmV0IiwiU2Nyb2xsIiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwiZyIsIkNzcyIsIl9zZXRTdHlsZVByb3AiLCJzdHlsZSIsIl9nZXRTdHlsZSIsInByb3AiLCJwc2V1ZG8iLCJyZW1vdmVTdHlsZSIsInJlbW92ZVByb3BlcnR5IiwiY3NzIiwiaXNFbXB0eU9iamVjdCIsIm5vcm1hbGl6ZUV2ZW50TmFtZSIsIm92ZXJyaWRkZW5TdG9wIiwiRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJvdmVycmlkZGVuUHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1ByZXZlbnRlZERlZmF1bHQiLCJzdG9wIiwiaW1tZWRpYXRlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiRG9sbGFyRXZlbnRzIiwiZXZlbnRzIiwiZXZlbnRIb29rcyIsImV2ZW50VUlEIiwicmVhZHkiLCJvcCIsImxvYWQiLCJvbiIsInVubG9hZCIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2V0RXZlbnRIYW5kbGVyIiwiZWxlbWVudCIsImV2ZW50IiwiaGFuZGxlciIsIm5zIiwib3B0aW9ucyIsImV2ZW50T2JqIiwicmVzdWx0SW5kZXgiLCJmcmVlSW5kZXgiLCJnZXRFdmVudEhhbmRsZXIiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0RXZlbnRzIiwiZ2V0RXZlbnRIb29rcyIsImFkZEV2ZW50SG9vayIsInJlbW92ZUV2ZW50SG9vayIsInJlbW92ZUV2ZW50SG9va3MiLCJFdmVudHMiLCJldmVudHNMaXN0Iiwib3JpZ2luRXZlbnQiLCJiZWZvcmVIb29rIiwiYWZ0ZXJIb29rIiwib25jZSIsImRhdGEiLCJkZWZpbmVQcm9wZXJ0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmUiLCJldk1hcCIsInRyaWdnZXIiLCJmaXJlIiwiX25hbWUiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJhcHBlbmRTY3JpcHQiLCJjb250ZXh0IiwiYm9keSIsIkhUTUxFbGVtZW50IiwiZWxlbWVudHMiLCJzY3IiLCJ0YWdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsIlNjcmlwdCQxIiwic2NyaXB0IiwicGFyc2VIVE1MIiwiaHRtbCIsImJhc2UiLCJzaW5nbGVUYWciLCJkb2MiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImhyZWYiLCJoZWFkIiwiaW5uZXJIVE1MIiwiY2hpbGROb2RlcyIsImFyZ3MkMSIsIl9hcmdzIiwibm9ybWFsaXplRWxlbWVudHMiLCJNYW5pcHVsYXRpb25zIiwiYXBwZW5kVGV4dCIsInByZXBlbmRUZXh0IiwiY2giLCJjaGlsZCIsImNsb25lTm9kZSIsImFwcGVuZFRvIiwicGFySW5kZXgiLCJlbEluZGV4IiwicHJlcGVuZFRvIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0QWZ0ZXIiLCJuZXh0U2libGluZyIsImluc2VydEFkamFjZW50SFRNTCIsImRlZXAiLCJ3aXRoRGF0YSIsImRhdGFzZXQiLCJpbXBvcnQiLCJpbXBvcnROb2RlIiwiYWRvcHQiLCJhZG9wdE5vZGUiLCJub2RlIiwib3V0IiwicmVtb3ZlQWxsIiwiY2xlYXIiLCJ3cmFwcGVyIiwiX3dyYXBwZXIiLCJfdGFyZ2V0Iiwid3JhcEFsbCIsIndyYXBJbm5lciIsIndycCIsIlV0aWxzIiwidG9BcnJheSIsImFnZSIsIlZpc2liaWxpdHkiLCJoaWRlIiwiZGlzcGxheSIsInNob3ciLCJvcGFjaXR5IiwidmlzaWJsZSIsIm1vZGUiLCJ2aXNpYmlsaXR5IiwidG9nZ2xlIiwiZnVuYyIsIlByb3BzIiwiX3Byb3AiLCJvdXRlckhUTUwiLCJlbXB0eSIsIlNpemUiLCJfc2l6ZSIsImhlaWdodCIsIl9zaXplT3V0IiwiYnMiLCJwYSIsInNpemUiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJwYWRkaW5nIiwibWFyZ2luIiwiYm9yZGVyIiwiSW5pdGlhdG9yIiwiaW5pdCIsInNlbGYiLCJkb2N0eXBlIiwiUXVlcnkiLCJwYXJzZWQiLCJjb250ZXh0VGFyZ2V0cyIsImNsIiwid2FybiIsIlBvc2l0aW9uIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIm9mZnNldFBhcmVudCIsInBvc2l0aW9uIiwibWwiLCJtdCIsImNvb3JkIiwiZGVmYXVsdE9wdGlvbnMiLCJ1aWQiLCJRdWVyeSQxIiwic3VwZXIiLCJwcmVmaXgiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5IiwicmVzdCIsIiQkMiIsInVzZSIsIm1peGlucyIsIl9kYXRhc2V0IiwiTWFwIiwiaW5zdGFuY2VNYXAiLCJlcnJvciIsImRlZmF1bHRWYWx1ZSIsImVsZW1lbnREYXRhIiwiZGVsZXRlIiwiYXR0ck5hbWUiLCJtZXRhIiwibWV0YUJ5IiwiY2hhcnNldCIsImNoYXJhY3RlclNldCIsInByb3h5IiwiUHJveHkiLCJkZXZpY2UiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsb2NhbGhvc3QiLCJwcml2YXRlQWRkcmVzcyIsInRvdWNoYWJsZSIsIm1heFRvdWNoUG9pbnRzIiwibm9vcCIsIm5vb3BfdHJ1ZSIsIm5vb3BfZmFsc2UiLCJkYXJrIiwibWF0Y2hNZWRpYSIsImlpZiIsImNvbmQiLCJ0cnVlVmFsIiwiZmFsc2VWYWwiLCJudmwiLCJpZk51bGxWYWx1ZSIsImNvYWxlc2NlIiwicmVtb3ZlRGF0YSIsIl8kIiwibm9Db25mbGljdCIsIiQkMSIsInUiLCJudW1Qcm9wcyIsInNldFN0eWxlcyIsInByb3BOYW1lIiwicHJvcFZhbCIsInVuaXZlcnNhbEF0dHJpYnV0ZXMiLCJCYXNlRWxlbWVudCIsInNlbGZBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsInNpbmdsZSIsInNlcnZpY2UiLCJkYXRhU2V0IiwiYXJpYSIsImRyYXciLCJ0ZW1wbGF0ZSIsImV2ZW50c0FycmF5Iiwic2V0Q2xhc3NlcyIsInBhcnNlciIsIlRhZyIsImNvbnRlbnQiLCJUYWdFbXB0eSIsInJlbmRlciIsInZpZXciLCJyZW5kZXJUbyIsInJlbmRlclBvaW50IiwiUm91dGVyIiwidmVyc2lvbiIsIl9yb3V0ZXMiLCJfcm91dGUiLCJfbW9kZSIsIl9pZ25vcmUiLCJfNDA0Iiwicm91dGVzIiwiYWRkUm91dGVzIiwiY2xlYXJTbGFzaGVzIiwicGF0aCIsImV4aXN0cyIsInJvdXRlRXhpc3RzIiwiX3JvdXRlc0ZuIiwiY2FsbGJhY2siLCJhZGRSb3V0ZSIsInVwZFJvdXRlIiwicm91dGUiLCJ1cGRSb3V0ZXMiLCJkZWxSb3V0ZSIsImZpbmRSb3V0ZSIsInB1c2hTdGF0ZSIsInVybCIsIlVSTCIsInBhdGhuYW1lIiwiaGlzdG9yeSIsImxpc3RlbiIsImNyZWF0ZVN0eWxlRWxlbWVudCIsIm1lZGlhIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVTdHlsZVNoZWV0Iiwic2hlZXQiLCJhZGRDc3NSdWxlIiwicnVsZXMiLCJpbnNlcnRSdWxlIiwiU3BhbiIsIkltZyIsImltZyIsIklucHV0IiwiQnIiLCJIciIsIkhlYWRpbmciLCJoZWFkaW5nIiwiU2VjdGlvbiIsIkFuY2hvciIsIkFiYnIiLCJBcnRpY2xlIiwiTmF2IiwiQXNpZGUiLCJIZWFkZXIiLCJGb290ZXIiLCJBZGRyZXNzIiwiTWFwJDEiLCJBcmVhIiwiYXJlYSIsIkF1ZGlvVGFnIiwiQm9sZCIsIkJkaSIsIkJkbyIsIkJsb2NrcXVvdGUiLCJCdXR0b24iLCJDYW52YXMiLCJUYWJsZSIsIkNhcHRpb24iLCJDb2wiLCJDb2xncm91cCIsIlRhYmxlU2VjdGlvbiIsIlRhYmxlUm93IiwiVGFibGVDZWxsIiwiQ2l0ZSIsIkNvZGUiLCJEbCIsIkR0IiwiRGQiLCJEZXRhaWxzIiwiU3VtbWFyeSIsIkRmbiIsIkRpdiIsIkVtIiwiSXRhbCIsIlN0cm9uZyIsIkVtYmVkIiwiTm9FbWJlZCIsIkZpZWxkc2V0IiwiTGVnZW5kIiwiRmlndXJlIiwiRmlnQ2FwdGlvbiIsIkZvcm0iLCJGcmFtZXNldCIsIkZyYW1lIiwiTm9GcmFtZXMiLCJJRnJhbWUiLCJJbnMiLCJLYmQiLCJMYWJlbCIsImxhYmVsIiwiTGlzdCIsIkxpc3RJdGVtIiwiTWFyayIsIk5vU2NyaXB0IiwiU2VsZWN0IiwiT3B0aW9uR3JvdXAiLCJPcHRpb24iLCJPdXRwdXQiLCJQYXJhZ3JhcGgiLCJQcmUiLCJRdW90ZWQiLCJTdHJpa2UiLCJTY3JpcHQiLCJTbWFsbCIsIlNvdXJjZSIsIlN1YiIsIlN1cCIsIlRleHRhcmVhIiwiVGltZSIsIlRyYWNrIiwidHJhY2siLCJWYXIiLCJWaWRlb1RhZyIsInZpZGVvIiwiV2JyIiwiTWFpbiIsIkZsZXhib3giLCJvcmRlciIsImp1c3RpZnkiLCJpbmxpbmUiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnbkNvbnRlbnQiLCJNYXJnaW4iLCJQYWRkaW5nIiwiQ2VudGVyIiwidGV4dEFsaWduIiwiRmlndXJlU2ltcGxlIiwiY2FwdGlvbiIsImFsdCIsIkNzc0dyaWQiLCJDc3NHcmlkSXRlbSIsIk1ldGEiLCJUaXRsZSIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInJvdXRlciIsImFkZFN0eWxlIiwiY3NzTG9hZGVyIiwiYXN5bmMiLCJ0ZXh0Tm9kZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInN0YXR1cyIsImpzTG9hZGVyIiwidmlld0xvYWRlciIsInN0b3JhZ2UiLCJzdG9yYWdlS2V5IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJldmFsMiIsImV2YWwiLCJjbGVhclZpZXdTdG9yYWdlSG9sZGVyIiwicmVtb3ZlSXRlbSIsImJyIiwiaHIiLCJzcGFuIiwiaW1nMiIsImlucHV0IiwiaW5wdXQyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic2VjdGlvbiIsImFuY2hvciIsImFiYnIiLCJhcnRpY2xlIiwibmF2IiwiYXNpZGUiLCJoZWFkZXIiLCJmb290ZXIiLCJhZGRyZXNzIiwiYXJlYTIiLCJhdWRpbyIsImF1ZGlvMiIsImJvbGQiLCJiZGkiLCJiZG8iLCJibG9ja3F1b3RlIiwiYnV0dG9uIiwiY2FudmFzIiwidGFibGUiLCJjb2wiLCJjb2xncm91cCIsInRoZWFkIiwidGJvZHkiLCJ0Zm9vdCIsInRkIiwidGgiLCJ0ciIsImNpdGUiLCJjb2RlIiwiZGwiLCJkdCIsImRldGFpbHMiLCJzdW1tYXJ5IiwiZGZuIiwiZGl2IiwiZW0iLCJpdGFsIiwiZW1iZWQiLCJub2VtYmVkIiwiZmllbGRzZXQiLCJsZWdlbmQiLCJmaWd1cmUiLCJmaWdjYXB0aW9uIiwiZm9ybSIsImZyYW1lIiwiZnJhbWUyIiwiZnJhbWVzZXQiLCJub2ZyYW1lcyIsImlmcmFtZSIsImlmcmFtZTIiLCJpbnMiLCJrYmQiLCJsYWJlbDIiLCJfZm9yIiwiZm9yIiwidWwiLCJvbCIsImxpIiwibWFyayIsIm5vc2NyaXB0Iiwic2VsZWN0Iiwib3B0Z3JvdXAiLCJvcHRpb24iLCJwYXJhZ3JhcGgiLCJwcmUiLCJxIiwic3RyaWtlIiwic2NyaXB0MiIsInNtYWxsIiwic291cmNlMiIsInN1cCIsInRleHRhcmVhIiwidHJhY2syIiwidmFyaWFibGUiLCJ2aWRlbzIiLCJ3YnIiLCJtYWluIiwiZmxleGJveCIsImNlbnRlciIsImZpZ3VyZVNpbXBsZSIsImNzc0dyaWQiLCJjc3NHcmlkSXRlbSIsImFkZE1ldGEiLCJtZXRhcyIsIm1ldGFFbGVtZW50IiwiY2hlY2siLCJhZGRUaXRsZSIsIm9sZCQxIiwicGF0aE1vZHVsZSIsImlzV2luZG93cyQxIiwicHJvY2VzcyIsInBsYXRmb3JtIiwiZnMkMiIsIkRFQlVHIiwiZW52IiwiTk9ERV9ERUJVRyIsIm1heWJlQ2FsbGJhY2siLCJiYWNrdHJhY2UiLCJlcnIiLCJtZXNzYWdlIiwibWlzc2luZ0NhbGxiYWNrIiwidGhyb3dEZXByZWNhdGlvbiIsIm5vRGVwcmVjYXRpb24iLCJtc2ciLCJzdGFjayIsInRyYWNlRGVwcmVjYXRpb24iLCJ0cmFjZSIsInJldGhyb3ciLCJub3JtYWxpemUiLCJuZXh0UGFydFJlIiwic3BsaXRSb290UmUiLCJyZWFscGF0aFN5bmMiLCJjYWNoZSIsInJlc29sdmUiLCJjdXJyZW50IiwicHJldmlvdXMiLCJvcmlnaW5hbCIsInNlZW5MaW5rcyIsImtub3duSGFyZCIsImxzdGF0U3luYyIsImxhc3RJbmRleCIsInJlc29sdmVkTGluayIsInN0YXQiLCJpc1N5bWJvbGljTGluayIsImxpbmtUYXJnZXQiLCJkZXYiLCJpbm8iLCJzdGF0U3luYyIsInJlYWRsaW5rU3luYyIsInJlYWxwYXRoIiwibmV4dFRpY2siLCJsc3RhdCIsIkxPT1AiLCJnb3RSZXNvbHZlZExpbmsiLCJnb3RTdGF0IiwiZ290VGFyZ2V0IiwicmVhZGxpbmsiLCJmc19yZWFscGF0aCIsInN5bmMiLCJtb25rZXlwYXRjaCIsImZzJDEiLCJ1bm1vbmtleXBhdGNoIiwib3JpZ1JlYWxwYXRoIiwib3JpZ1JlYWxwYXRoU3luYyIsIm5ld0Vycm9yIiwiZXIiLCJzeXNjYWxsIiwicGF0aCQyIiwiYmFsYW5jZWRNYXRjaCIsImJhbGFuY2VkJDEiLCJtYXliZU1hdGNoIiwicmFuZ2UiLCJwb3N0IiwicmVnIiwiYmVncyIsImJlZyIsImFpIiwiYmkiLCJwb3AiLCJiYWxhbmNlZCIsImJyYWNlRXhwYW5zaW9uIiwiZXhwYW5kJDEiLCJlc2NTbGFzaCIsImVzY09wZW4iLCJlc2NDbG9zZSIsImVzY0NvbW1hIiwiZXNjUGVyaW9kIiwiZXNjYXBlQnJhY2VzIiwidW5lc2NhcGVCcmFjZXMiLCJudW1lcmljIiwiY2hhckNvZGVBdCIsInBhcnNlQ29tbWFQYXJ0cyIsInBvc3RQYXJ0cyIsImVtYnJhY2UiLCJpc1BhZGRlZCIsImx0ZSIsImd0ZSIsImlzVG9wIiwiZXhwYW5zaW9ucyIsImV4cGFuc2lvbiIsIm4iLCJOIiwiaXNOdW1lcmljU2VxdWVuY2UiLCJpc0FscGhhU2VxdWVuY2UiLCJpc1NlcXVlbmNlIiwiaXNPcHRpb25zIiwieCIsImluY3IiLCJzb21lIiwibmVlZCIsIm1pbmltYXRjaCQxIiwibWluaW1hdGNoXzEiLCJhc3NlcnRWYWxpZFBhdHRlcm4iLCJub2NvbW1lbnQiLCJNaW5pbWF0Y2gkMSIsInBhdGgkMSIsIkdMT0JTVEFSIiwiZXhwYW5kIiwicGxUeXBlcyIsIm9wZW4iLCJjbG9zZSIsInFtYXJrIiwic3RhciIsImNoYXJTZXQiLCJyZVNwZWNpYWxzIiwiYWRkUGF0dGVyblN0YXJ0U2V0Iiwic2xhc2hTcGxpdCIsImxpc3QiLCJleHQiLCJkZWZhdWx0cyIsIm9yaWciLCJNaW5pbWF0Y2giLCJtYWtlUmUiLCJicmFjZUV4cGFuZCIsIm5vYnJhY2UiLCJTVUJQQVJTRSIsIm5vbnVsbCIsImNoYXJVbmVzY2FwZSIsImJyYUV4cEVzY2FwZSIsIndpbmRvd3NQYXRoc05vRXNjYXBlIiwiYWxsb3dXaW5kb3dzRXNjYXBlIiwibmVnYXRlIiwiY29tbWVudCIsInBhcnRpYWwiLCJtYWtlIiwicGFyc2VOZWdhdGUiLCJnbG9iU2V0IiwiZ2xvYlBhcnRzIiwic2kiLCJub25lZ2F0ZSIsIm5lZ2F0ZU9mZnNldCIsIm1hdGNoT25lIiwiZmlsZSIsImZpIiwicGkiLCJmbCIsInBsIiwiaGl0IiwiZnIiLCJwciIsImRvdCIsInN3YWxsb3dlZSIsImlzU3ViIiwibm9nbG9ic3RhciIsImhhc01hZ2ljIiwiZXNjYXBpbmciLCJwYXR0ZXJuTGlzdFN0YWNrIiwibmVnYXRpdmVMaXN0cyIsInN0YXRlQ2hhciIsImNzIiwic3AiLCJpbkNsYXNzIiwicmVDbGFzc1N0YXJ0IiwiY2xhc3NTdGFydCIsImRvdFRyYXZBbGxvd2VkIiwiZG90RmlsZUFsbG93ZWQiLCJzdWJQYXR0ZXJuU3RhcnQiLCJjbGVhclN0YXRlQ2hhciIsIm5vZXh0IiwicGxFbnRyeSIsInJlU3RhcnQiLCJyZUVuZCIsInRhaWwiLCIkMiIsImFkZFBhdHRlcm5TdGFydCIsIm5sIiwibmxCZWZvcmUiLCJubEZpcnN0IiwibmxBZnRlciIsIm5sTGFzdCIsImNsb3NlUGFyZW5zQmVmb3JlIiwib3BlblBhcmVuc0JlZm9yZSIsImNsZWFuQWZ0ZXIiLCJub2Nhc2UiLCJnbG9iVW5lc2NhcGUiLCJfZ2xvYiIsIl9zcmMiLCJ0d29TdGFyIiwicmVnRXhwRXNjYXBlIiwiZXgiLCJmaWxlbmFtZSIsIm1hdGNoQmFzZSIsImZsaXBOZWdhdGUiLCJpbmhlcml0c19icm93c2VyRXhwb3J0cyIsImluaGVyaXRzX2Jyb3dzZXIiLCJleHBvcnRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiY29tbW9uIiwib3duUHJvcCIsImZpZWxkIiwic2V0b3B0cyIsInNpbGVudCIsInN0cmljdCIsInJlYWxwYXRoQ2FjaGUiLCJmb2xsb3ciLCJub2RpciIsIm5vdW5pcXVlIiwibm9zb3J0Iiwibm9wcm9jZXNzIiwiYWJzb2x1dGUiLCJmcyIsIm1heExlbmd0aCIsInN0YXRDYWNoZSIsInN5bWxpbmtzIiwiaWdub3JlTWFwIiwic2V0dXBJZ25vcmVzIiwiY2hhbmdlZEN3ZCIsImN3ZCIsInJvb3QiLCJjd2RBYnMiLCJpc0Fic29sdXRlIiwibWFrZUFicyIsIm5vbW91bnQiLCJtaW5pbWF0Y2giLCJmaW5pc2giLCJub3UiLCJhbGwiLCJsaXRlcmFsIiwiYWxwaGFzb3J0IiwiX21hcmsiLCJub3REaXIiLCJpc0lnbm9yZWQiLCJmb3VuZCIsImlzRGlyIiwic2xhc2giLCJtYWJzIiwiY2hpbGRyZW5JZ25vcmVkIiwiZ21hdGNoZXIiLCJoYXNSZXF1aXJlZFN5bmMiLCJsb2NhbGVDb21wYXJlIiwiZ3BhdHRlcm4iLCJtYXRjaGVyIiwid3JhcHB5XzEiLCJ3cmFwcHkkMiIsIm9uY2VFeHBvcnRzIiwid3JhcHB5JDEiLCJvbmNlJDEiLCJjYWxsZWQiLCJvbmNlU3RyaWN0Iiwib25jZUVycm9yIiwiZ2xvYl8xIiwiaGFzUmVxdWlyZWRHbG9iIiwid3JhcHB5IiwicmVxcyIsImluZmxpZ2h0XzEiLCJSRVMiLCJjYnMiLCJhcnJheSIsIm1ha2VyZXMiLCJyZXF1aXJlR2xvYiIsImdsb2IiLCJycCIsImluaGVyaXRzIiwiRUUiLCJFdmVudEVtaXR0ZXIiLCJhc3NlcnQiLCJnbG9iU3luYyIsIkdsb2JTeW5jIiwiR2xvYiIsImNvbW1vbiQxIiwiX3Byb2Nlc3MiLCJfZmluaXNoIiwibWF0Y2hzZXQiLCJfbWFrZUFicyIsImluR2xvYlN0YXIiLCJfcHJvY2Vzc1NpbXBsZSIsInJlYWQiLCJyZW1haW4iLCJfcHJvY2Vzc0dsb2JTdGFyIiwiX3Byb2Nlc3NSZWFkZGlyIiwiZW50cmllcyIsIl9yZWFkZGlyIiwicG4iLCJyYXdHbG9iIiwiZG90T2siLCJtYXRjaGVkRW50cmllcyIsIm5ld1BhdHRlcm4iLCJfZW1pdE1hdGNoIiwiX3N0YXQiLCJfcmVhZGRpckluR2xvYlN0YXIiLCJpc1N5bSIsImlzRGlyZWN0b3J5IiwiX3JlYWRkaXJFbnRyaWVzIiwicmVhZGRpclN5bmMiLCJfcmVhZGRpckVycm9yIiwicmVtYWluV2l0aG91dEdsb2JTdGFyIiwiZ3NwcmVmIiwibm9HbG9iU3RhciIsImluc3RlYWQiLCJiZWxvdyIsInRyYWlsIiwibmVlZERpciIsInJlcXVpcmVTeW5jIiwiaW5mbGlnaHQiLCJfZGlkUmVhbFBhdGgiLCJfcHJvY2Vzc2luZyIsIl9lbWl0UXVldWUiLCJfcHJvY2Vzc1F1ZXVlIiwicGF1c2VkIiwiZG9uZSIsIm9wdGlvbnNfIiwib3JpZ2luIiwiZXh0ZW5kIiwiYWJvcnRlZCIsIl9kaWRSZWFscGF0aCIsIl9yZWFscGF0aCIsImVtaXQiLCJfcmVhbHBhdGhTZXQiLCJyZWFsIiwiYWJvcnQiLCJwYXVzZSIsInJlc3VtZSIsInBxIiwiX3Byb2Nlc3NSZWFkZGlyMiIsInN0IiwibHN0YXRjYiIsInJlYWRkaXIiLCJyZWFkZGlyQ2IiLCJfcHJvY2Vzc0dsb2JTdGFyMiIsIl9wcm9jZXNzU2ltcGxlMiIsInN0YXRjYiIsIl9zdGF0MiIsIk1ldHJvT3B0aW9ucyIsInJlbW92ZUNsb2FrVGltZW91dCIsIk1ldHJvIiwicGx1Z2lucyIsImluZm8iLCJvYnNlcnZlIiwiX19odG1sU2F2ZXIiLCJleHRyYWN0IiwicmVzdG9yZSIsInJvbGVzIiwicm9sZSIsIm1ha2VQbHVnaW4iLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm11dGF0aW9uIiwiJGVsZW0iLCJhdHRyaWJ1dGVOYW1lIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsInJvbGVOYW1lIiwiZ2V0UGx1Z2luIiwidXBkYXRlQXR0ciIsImFkZGVkTm9kZXMiLCJub2RlcyIsIiRub2RlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImJ0b2EiLCJwbHVnaW5JZCIsInBsdWdpbiIsImRlc3Ryb3lQbHVnaW4iLCJkZXN0cm95IiwiY29tcG9uZW50Il0sIm1hcHBpbmdzIjoiMEJBQUEsU0FBV0EsRUFBWUMsRUFBWUMsRUFBWUMsR0FHM0MsU0FBU0MsRUFBdUJDLEdBQUssT0FBT0EsR0FBa0IsaUJBQU5BLEdBQWtCLFlBQWFBLEVBQUlBLEVBQUksQ0FBRUMsUUFBV0QsRUFBTSxDQUVsSCxJQUFJRSxFQUFtQ0gsRUFBc0JKLEdBQ3pEUSxFQUFtQ0osRUFBc0JILEdBQ3pEUSxFQUFtQ0wsRUFBc0JGLEdBQ3pEUSxFQUFtQ04sRUFBc0JELEdBTTdEUSxXQUFXQywyQkFBNkIsR0FFeEMsTUFBTUMsRUFBVyxDQUNiQyxTQUFTQyxFQUFNQyxHQUNQSiwyQkFBMkJHLEtBRy9CSCwyQkFBMkJHLEdBQVFDLEVBQ3RDLEVBRURDLFdBQVdGLEVBQU1DLEdBQ1JKLDJCQUEyQkcsSUFBU0gsMkJBQTJCRyxLQUFVQyxVQUd2RUosMkJBQTJCRyxFQUNyQyxFQUVERyxTQUFTSCxHQUNFSCwyQkFBMkJHLEdBR3RDSSxZQUFXLElBQ0FQLDJCQUdYUSxPQTdCVSxLQUFJQyxLQUNiQSxFQUFLQyxPQUE4QyxJQUFoQkQsRUFBS0MsT0FBZUMsUUFBUUMsSUFBSUMsS0FBS0MsVUFBVUwsRUFBSyxHQUFJLEtBQU0sSUFBTUUsUUFBUUMsT0FBT0gsR0FBeEdFLFFBQVFDLElBQUksTUFBaUcsRUE2QnhIRyxDQUFNZiwyQkFDVCxHQUdDZ0IsRUFBV0MsR0FBU0EsR0FBd0IsaUJBQVRBLElBQXNCQyxNQUFNQyxRQUFRRixHQUV2RUcsRUFBUSxDQUFDQyxLQUFXQyxLQUN0QixJQUFLQSxFQUFRWixPQUFRLE9BQU9XLEVBQzVC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
